{"version":3,"sources":["webpack:///webpack/bootstrap d2c1132349697718910d","webpack:///./src/entry.js","webpack:///./src/lib/setting/Planche-Wordpress.js","webpack:///./src/overrides/RadioGroup.js","webpack:///./src/overrides/FixMenuBug.js","webpack:///./src/dbms/mysql.js","webpack:///./src/lib/QuickCommand.js","webpack:///./src/lib/SchemaUtil.js","webpack:///./src/lib/QueryParser.js","webpack:///./src/lib/QueryTokenType.js","webpack:///./src/lib/QueryAlignment.js","webpack:///./src/lib/Query.js","webpack:///./src/lib/DBUtil.js","webpack:///./src/lib/Base64.js","webpack:///./src/store/DatabaseSchemaTree.js","webpack:///./src/store/GrantSchemaTree.js","webpack:///./src/view/user/GrantPrivList.js","webpack:///./src/view/database/DownloadToCSVTargetList.js","webpack:///./src/view/database/CopyDatabaseTargetList.js","webpack:///./src/lib/Window.js","webpack:///./src/view/layout/Menu.js","webpack:///./src/view/Main.js","webpack:///./src/view/Viewport.js","webpack:///./src/view/layout/ConnectTab.js","webpack:///./src/view/user/UserAdd.js","webpack:///./src/view/user/GrantUserList.js","webpack:///./src/view/user/GrantSchemaTree.js","webpack:///./src/view/user/Grant.js","webpack:///./src/view/table/TableInfoTab.js","webpack:///./src/view/table/TableSQLTab.js","webpack:///./src/view/table/TableIndexesTab.js","webpack:///./src/view/table/TablePropertiesTab.js","webpack:///./src/view/table/TableSchemaTab.js","webpack:///./src/view/table/EditSchemaWindow.js","webpack:///./src/view/table/EditIndexWindow.js","webpack:///./src/view/layout/Toolbar.js","webpack:///./src/view/layout/QueryTabPanel.js","webpack:///./src/view/layout/ResultTabPanel.js","webpack:///./src/view/layout/QueryEditor.js","webpack:///./src/view/layout/HistoryTab.js","webpack:///./src/view/layout/InfoTab.js","webpack:///./src/view/layout/TableDataTab.js","webpack:///./src/view/layout/MessageTab.js","webpack:///./src/view/layout/QueryTab.js","webpack:///./src/view/layout/SchemaTree.js","webpack:///./src/store/SchemaTree.js","webpack:///./src/view/database/DownloadToCSV.js","webpack:///./src/view/database/SchemaToHTML.js","webpack:///./src/view/database/DatabaseSchemaTree.js","webpack:///./src/view/database/CopyDatabaseWindow.js","webpack:///./src/lib/SchemaTree.js","webpack:///./src/controller/user/Grant.js","webpack:///./src/controller/layout/SchemaTree.js","webpack:///./src/controller/database/CopyDatabaseWindow.js","webpack:///./src/lib/Menu.js","webpack:///./src/controller/menu/bookmark/Planche-Wordpress.js","webpack:///./src/controller/menu/Help.js","webpack:///./src/controller/menu/Tools.js","webpack:///./src/controller/menu/Export.js","webpack:///./src/controller/menu/Table.js","webpack:///./src/controller/menu/Edit.js","webpack:///./src/controller/menu/Database.js","webpack:///./src/controller/menu/Query.js","webpack:///./src/controller/menu/Connection.js","webpack:///./src/controller/user/UserAdd.js","webpack:///./src/controller/Main.js","webpack:///./src/controller/table/TableInfoTab.js","webpack:///./src/controller/table/TableSQLTab.js","webpack:///./src/controller/table/TableIndexesTab.js","webpack:///./src/controller/table/TablePropertiesTab.js","webpack:///./src/controller/table/TableSchemaTab.js","webpack:///./src/controller/table/ReorderColumns.js","webpack:///./src/controller/table/EditTextColumn.js","webpack:///./src/controller/table/AdvancedProperties.js","webpack:///./src/controller/table/EditSchemaWindow.js","webpack:///./src/controller/table/EditIndexWindow.js","webpack:///./src/controller/layout/Toolbar.js","webpack:///./src/controller/layout/ConnectTab.js","webpack:///./src/controller/layout/HistoryTab.js","webpack:///./src/controller/layout/InfoTab.js","webpack:///./src/controller/layout/TableDataTab.js","webpack:///./src/controller/layout/MessageTab.js","webpack:///./src/controller/layout/QueryTab.js","webpack:///./src/controller/layout/ResultTabPanel.js","webpack:///./src/controller/layout/QueryEditor.js","webpack:///./src/controller/layout/QueryTabPanel.js","webpack:///./src/controller/layout/SchemaTreeContextMenu.js","webpack:///./src/controller/query/Token.js","webpack:///./src/controller/database/DownloadToCSV.js","webpack:///./src/controller/database/SchemaToHTML.js","webpack:///./src/controller/database/CreateDatabase.js","webpack:///./src/controller/connection/NewConnect.js","webpack:///./src/controller/connection/Connect.js","webpack:///./src/controller/command/Variables.js","webpack:///./src/controller/command/Status.js","webpack:///./src/controller/command/Quick.js","webpack:///./src/controller/command/Process.js","webpack:///./src/controller/command/Flush.js","webpack:///./src/controller/command/Find.js","webpack:///./src/Application.js","webpack:///./src/App.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;ACtlGA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA,kCAAiC,YAAY;AAC7C;AACA;;AAEA;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA,UAAS;AACT,MAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA,kCAAiC,0BAA0B;AAC3D;AACA;;AAEA;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA,UAAS;AACT,MAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA,kCAAiC,6CAA6C;AAC9E;AACA;;AAEA;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA,UAAS;AACT;AACA,EAAC;;;;;;;ACtGD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,EAAC;;;;;;;AC3BD;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;;;AAGA;;;AAGA;AACA;AACA;;;AAGA;AACA;AACA,EAAC,E;;;;;;AC/BD;;AAEA;AACA;AACA,8EAA6E,EAAE,aAAa,EAAE;AAC9F,kEAAiE,EAAE,IAAI,EAAE;AACzE,kDAAiD,EAAE,IAAI,EAAE,kBAAkB,EAAE;AAC7E,gDAA+C,EAAE,IAAI,EAAE;AACvD,2CAA0C,EAAE,KAAK,EAAE,MAAM,EAAE,IAAI,EAAE,GAAG,EAAE;AACtE,4CAA2C,EAAE,KAAK,EAAE,QAAQ,EAAE,IAAI,EAAE;AACpE,kDAAiD,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE;AACxE,gFAA+E,EAAE,eAAe,EAAE;AAClG,8EAA6E,EAAE,eAAe,EAAE;AAChG,gHAA+G,EAAE,eAAe,EAAE;AAClI,+HAA8H,EAAE,eAAe,EAAE;AACjJ,8HAA6H,EAAE,eAAe,EAAE;AAChJ,4DAA2D,EAAE,IAAI,EAAE;AACnE,4DAA2D,EAAE;AAC7D,4DAA2D,EAAE;AAC7D,6DAA4D,EAAE,SAAS,EAAE;AACzE;AACA,4CAA2C,EAAE,QAAQ,EAAE,MAAM,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE;AAC/E,sDAAqD,EAAE,IAAI,EAAE,mBAAmB,EAAE;AAClF,sDAAqD,EAAE,IAAI,EAAE;AAC7D,gDAA+C,EAAE,MAAM,EAAE,IAAI,EAAE;AAC/D,oDAAmD,EAAE,GAAG,EAAE,IAAI,EAAE;AAChE,mDAAkD,EAAE,GAAG,EAAE,IAAI,EAAE;AAC/D,kDAAiD,EAAE,GAAG,EAAE,IAAI,EAAE;AAC9D,gDAA+C,EAAE,GAAG,EAAE,IAAI,EAAE;AAC5D,+CAA8C,EAAE,GAAG,EAAE,IAAI,EAAE;AAC3D,uEAAsE,EAAE;AACxE,sEAAqE,EAAE;AACvE,yDAAwD,EAAE;AAC1D,mNAAkN,EAAE;AACpN,0MAAyM,EAAE;AAC3M,2DAA0D,EAAE;AAC5D,6DAA4D,EAAE;AAC9D,6DAA4D,EAAE,SAAS,EAAE;AACzE,kDAAiD,EAAE,IAAI,EAAE,YAAY,EAAE;AACvE,kDAAiD,EAAE,IAAI,EAAE,IAAI,EAAE,UAAU,EAAE,EAAE;AAC7E,kDAAiD,EAAE,IAAI,EAAE,IAAI,EAAE,UAAU,GAAG;AAC5E,kDAAiD,EAAE,IAAI,EAAE,IAAI,EAAE,UAAU,EAAE,2BAA2B,EAAE;AACxG,6CAA4C,EAAE,IAAI,EAAE,OAAO,EAAE,QAAQ,GAAG;AACxE,kDAAiD,EAAE,IAAI,EAAE,SAAS,GAAG;AACrE,4CAA2C,EAAE,QAAQ,EAAE,IAAI,EAAE,GAAG,GAAG;AACnE,qDAAoD,EAAE,IAAI,EAAE;AAC5D,mDAAkD,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE;AACzE,gDAA+C,EAAE,GAAG,EAAE,IAAI,EAAE;AAC5D,wDAAuD,EAAE,IAAI,EAAE;AAC/D,qDAAoD,EAAE,IAAI,EAAE;AAC5D,qDAAoD,EAAE,IAAI,EAAE,mBAAmB,EAAE;AACjF,0EAAyE,sBAAsB,kBAAkB,EAAE,IAAI,EAAE,qDAAqD,6DAA6D,sBAAsB,oBAAoB,uFAAuF;AAC5W,0EAAyE,sBAAsB,iBAAiB,EAAE,IAAI,EAAE,qBAAqB,4BAA4B,2CAA2C,6DAA6D,iBAAiB,oBAAoB,kFAAkF;AACxY,0EAAyE,sBAAsB,gBAAgB,EAAE,IAAI,EAAE,8DAA8D,EAAE,yFAAyF;AAChR,mKAAkK,sBAAsB,cAAc,EAAE,IAAI,EAAE,mKAAmK,gDAAgD,4PAA4P,+CAA+C,qDAAqD,gDAAgD,wJAAwJ;AACz8B,8DAA6D,8BAA8B,+DAA+D,oBAAoB,eAAe,EAAE,IAAI,EAAE;AACrM,4DAA2D,EAAE,IAAI,EAAE;AACnE,wDAAuD,EAAE,IAAI,EAAE;AAC/D,wDAAuD,EAAE,IAAI,EAAE;AAC/D,2DAA0D,EAAE,IAAI,EAAE;AAClE,0DAAyD,EAAE,IAAI,EAAE;AACjE,wDAAuD,EAAE,IAAI,EAAE;AAC/D,mDAAkD,EAAE,IAAI,EAAE,GAAG,EAAE;AAC/D,kDAAiD,EAAE,IAAI,EAAE,GAAG,EAAE;AAC9D,yDAAwD,EAAE,4BAA4B,EAAE,OAAO,EAAE,eAAe;AAChH,yDAAwD,EAAE,iCAAiC,EAAE,OAAO,EAAE,eAAe;AACrH,yDAAwD,EAAE,gCAAgC,EAAE,OAAO,EAAE,eAAe;AACpH,yDAAwD,EAAE,+BAA+B,EAAE,OAAO,EAAE,eAAe;AACnH,yDAAwD,EAAE,6BAA6B,EAAE,OAAO,EAAE,eAAe;AACjH;AACA;AACA;AACA;AACA;AACA,sDAAqD,EAAE,iBAAiB,EAAE,UAAU,EAAE;AACtF,qDAAoD,EAAE,iBAAiB,EAAE,UAAU,EAAE;AACrF,oDAAmD,EAAE;AACrD;AACA;AACA,6DAA4D,EAAE,IAAI,EAAE;AACpE;AACA;AACA,0CAAyC,EAAE;AAC3C;AACA,mDAAkD,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE;AAC3E,6CAA4C,EAAE,IAAI,EAAE,kBAAkB,EAAE,IAAI,EAAE;;AAE9E;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;;AAEA;;AAEA;AACA;AACA;;;AAGA;AACA,UAAS;AACT;;AAEA;AACA;;AAEA;AACA,UAAS;AACT;;AAEA;AACA,UAAS;AACT;;AAEA;;AAEA;;AAEA;AACA,cAAa;;AAEb;AACA,UAAS;;AAET;;AAEA;AACA,UAAS;;AAET;;AAEA;AACA,UAAS;;AAET;;AAEA;AACA,UAAS;;AAET;;AAEA;AACA,UAAS;;AAET;;AAEA;AACA,UAAS;;AAET;;AAEA;AACA;AACA;AACA,EAAC;AACD,E;;;;;;ACtTA;AACA;;AAEA;AACA,MAAK;;AAEL;;AAEA;AACA,MAAK;;AAEL;;AAEA;AACA,MAAK;;AAEL;;AAEA;AACA;AACA,EAAC,E;;;;;;ACpBD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,kCAAiC;AACjC;;AAEA;AACA;AACA;AACA,sBAAqB;AACrB;;AAEA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;;AAEA;AACA;AACA;;AAEA,UAAS;AACT,MAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,sBAAqB;AACrB;;AAEA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;;AAEA;AACA;AACA;;AAEA,UAAS;AACT,MAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,sBAAqB;AACrB;;AAEA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;;AAEA;AACA;AACA;;AAEA,UAAS;AACT,MAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,sBAAqB;AACrB;;AAEA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;;AAEA;AACA;AACA;;AAEA,UAAS;AACT,MAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,sBAAqB;AACrB;;AAEA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;;AAEA;AACA;AACA;;AAEA,UAAS;AACT,MAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,sBAAqB;AACrB;;AAEA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;;AAEA;AACA;AACA;;AAEA,UAAS;AACT,MAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,sBAAqB;AACrB;;AAEA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;;AAEA;AACA;AACA;;AAEA,UAAS;AACT,MAAK;;AAEL;;AAEA;AACA;AACA;AACA;;AAEA;AACA,UAAS;AACT;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,cAAa;AACb;AACA,UAAS;AACT;AACA;AACA;AACA,EAAC,E;;;;;;ACrZD;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,oCAAmC,KAAK,KAAK;AAC7C;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,8CAA6C;AAC7C;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,MAAK;;AAEL;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,MAAK;;AAEL;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,MAAK;;AAEL;;AAEA,uBAAsB;;AAEtB;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA,kCAAiC;AACjC;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,MAAK;AACL;;AAEA;;AAEA;AACA;AACA,cAAa;AACb;AACA;;AAEA;AACA;AACA,cAAa;AACb;AACA,MAAK;AACL;;AAEA;;AAEA,qBAAoB,oBAAoB;;AAExC;AACA;AACA;;AAEA;;AAEA;;AAEA,6BAA4B,kBAAkB;;AAE9C;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,MAAK;;AAEL;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,mCAAkC,0EAA0E;AAC5G;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;;AAEjB;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA,+BAA8B,gFAAgF;;AAE9G;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA,2BAA0B,wDAAwD;AAClF;;AAEA;AACA,MAAK;;AAEL;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA,yBAAwB,0BAA0B;;AAElD;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,EAAC;;;;;;;ACnkBD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,UAAS;AACT;;AAEA;AACA;AACA;AACA,EAAC,E;;;;;;AC1CD;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,UAAS;;AAET;;AAEA;AACA,UAAS;;AAET;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;;AAEA;;AAEA;AACA;AACA;AACA,qDAAoD,wBAAwB;AAC5E;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA,EAAC;;;;;;;ACtRD;AACA;;AAEA;;AAEA;AACA;AACA,GAAE;;AAEF;;AAEA;;AAEA;;AAEA;AACA,GAAE;;AAEF;;AAEA;;AAEA;AACA,GAAE;;AAEF;;AAEA;;AAEA;;AAEA;AACA,GAAE;;AAEF;;AAEA;;AAEA;AACA,GAAE;;AAEF;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,GAAE;;AAEF;;AAEA;AACA,GAAE;;AAEF;;AAEA;AACA,GAAE;;AAEF;;AAEA;AACA,GAAE;;AAEF;;AAEA;AACA,GAAE;;AAEF;;AAEA;AACA,GAAE;;AAEF;;AAEA;AACA;AACA,IAAG;AACH,GAAE;;AAEF;;AAEA;AACA;AACA,GAAE;;AAEF;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,EAAC,E;;;;;;ACjHD;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,cAAa;AACb;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,cAAa;;AAEb;AACA,UAAS;;AAET;AACA,MAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAqC;AACrC;AACA;AACA,UAAS;AACT;AACA,EAAC;;;;;;;ACxDD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA2B,WAAW,qBAAqB;AAC3D;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA0B;AAC1B,2BAA0B;AAC1B;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA,yBAAwB,eAAe;AACvC;AACA,2BAA0B,4BAA4B;AACtD;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC,E;;;;;;ACjFD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA,UAAS;AACT,MAAK;AACL;;AAEA;AACA;AACA,EAAC,E;;;;;;ACtCD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC,E;;;;;;ACRD;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,UAAS;;AAET;AACA,cAAa;AACb;;AAEA;AACA;AACA;AACA,UAAS;;AAET;;AAEA;AACA,EAAC,E;;;;;;ACxBD;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;;AAEA;AACA;AACA,UAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,8FAA6F,EAAE;AAC/F;AACA,cAAa;AACb;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA,UAAS;;AAET;AACA;AACA,EAAC,E;;;;;;ACnCD;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;;AAEA;;AAEA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;;AAEA,6FAA4F,EAAE;AAC9F;AACA,UAAS;;AAET;AACA;AACA;AACA,UAAS;;AAET;AACA;AACA,EAAC,E;;;;;;AC9BD;AACA;AACA;AACA;AACA,MAAK;AACL;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAa;AACb;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAK;AACL;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC,E;;;;;;AC3DD;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,uBAAsB,8CAA8C;AACpE,UAAS;;AAET;AACA,MAAK;AACL,EAAC;;;;;;;AC5BD;AACA;AACA;AACA,eAAc,wBAAwB;AACtC;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA,EAAC;;;;;;;ACjID;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAK;;AAEL;AACA;AACA,MAAK;AACL,EAAC,E;;;;;;ACnBD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAe,wBAAwB;AACvC;AACA;AACA;AACA,MAAK;;AAEL;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC;;;;;;;AC9BD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA,UAAS;AACT,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA,UAAS;AACT;AACA;AACA,UAAS;AACT;AACA;AACA,UAAS;AACT,MAAK;AACL;AACA;AACA;AACA,MAAK;AACL;AACA;AACA,MAAK;AACL;;AAEA;AACA;AACA,EAAC,E;;;;;;ACxFD;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,yFAAwF,EAAE;AAC1F;AACA,UAAS;AACT;AACA;AACA;AACA;AACA,cAAa;AACb,UAAS;AACT;AACA;AACA;AACA;AACA,cAAa;AACb,UAAS;;AAET;AACA;AACA;AACA,UAAS;;AAET;AACA;AACA,EAAC,E;;;;;;ACzCD;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,EAAC,E;;;;;;ACTD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA,MAAK;AACL;AACA;AACA,MAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;;AAET;AACA;AACA,EAAC,E;;;;;;ACnED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;;AAEA;AACA;AACA,EAAC,E;;;;;;ACjBD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;;AAEA;AACA;AACA,EAAC,E;;;;;;AChBD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA,MAAK;AACL;;AAEA;AACA;;AAEA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA,UAAS;AACT;AACA;AACA,UAAS;;AAET;AACA,cAAa,wDAAwD;AACrE,cAAa,wDAAwD;AACrE,cAAa,0DAA0D;AACvE,cAAa;AACb;;AAEA;;AAEA;AACA;;AAEA;AACA,UAAS;;AAET;AACA;AACA;AACA;AACA,UAAS;;AAET;AACA;AACA,EAAC,E;;;;;;ACrcAAa;AACb;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA,cAAa;AACb,cAAa,6DAA6D;AAC1E,cAAa,yEAAyE;AACtF,cAAa,yEAAyE;AACtF,cAAa,2EAA2E;AACxF,cAAa,yEAAyE;AACtF;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,UAAS;;AAET;AACA;AACA;AACA;AACA,UAAS;;AAET;AACA;AACA,EAAC,E;;;;;;AClGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL,EAAC,E;;;;;;ACpBD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA,UAAS;AACT;AACA;AACA,UAAS;AACT;AACA;AACA,cAAa,mDAAmD;AAChE,cAAa,gDAAgD;AAC7D,cAAa,+CAA+C;AAC5D,cAAa,uEAAuE;AACpF;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA,cAAa;AACb,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA,cAAa;AACb,UAAS;AACT,MAAK;AACL;AACA;AACA;AACA,MAAK;AACL;AACA;AACA,MAAK;AACL,EAAC,E;;;;;;ACpHD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,EAAC,E;;;;;;AC5FD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL,EAAC,E;;;;;;ACZD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA,MAAK;AACL;AACA,MAAK;AACL;AACA,MAAK;AACL,EAAC,E;;;;;;AClBD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC,E;;;;;;ACVD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC;;;;;;;ACVD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC;;;;;;;ACVD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC,E;;;;;;ACVD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC,E;;;;;;ACVD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA,MAAK;AACL,EAAC,E;;;;;;ACbD;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;;AAEA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA,EAAC,E;;;;;;ACfD;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;;AAEA;AACA;AACA,EAAC,E;;;;;;ACXD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;;AAEA;;AAEA;AACA;AACA;AACA;AACA,UAAS;;AAET;AACA,MAAK;AACL;AACA;AACA;AACA,MAAK;AACL;AACA;AACA,MAAK;AACL,EAAC,E;;;;;;ACtCD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;;AAET;AACA,MAAK;AACL;AACA;AACA;AACA,MAAK;AACL,EAAC,E;;;;;;ACtCD;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,EAAC,E;;;;;;ACdD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA,sBAAqB;AACrB,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB,cAAa;AACb,UAAS;;AAET;AACA,MAAK;AACL;AACA;AACA;AACA,MAAK;AACL;AACA;AACA,MAAK;AACL,EAAC,E;;;;;;AChGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA,UAAS;AACT;AACA;AACA,MAAK;;AAEL;;AAEA;AACA,MAAK;;AAEL;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAK;;AAEL;;AAEA,0CAAyC,QAAQ;AACjD;AACA,MAAK;;AAEL;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,MAAK;;AAEL;;AAEA;AACA,MAAK;;AAEL;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,8BAA6B;;AAE7B;AACA,0BAAyB;AACzB,sBAAqB;AACrB,kBAAiB;;AAEjB;;AAEA;AACA;AACA;;AAEA;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA;AACA,UAAS;AACT,MAAK;;AAEL;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,4CAA2C,QAAQ;;AAEnD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,8BAA6B;;AAE7B;AACA,0BAAyB;AACzB,sBAAqB;AACrB,kBAAiB;;AAEjB;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA,cAAa;AACb;;AAEA;AACA;AACA;AACA,UAAS;AACT,MAAK;;AAEL;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB,kBAAiB;;AAEjB;;AAEA;AACA;AACA;;AAEA;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA;AACA,UAAS;AACT,MAAK;;AAEL;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB,kBAAiB;;AAEjB;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA;AACA,UAAS;AACT,MAAK;;AAEL;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB,kBAAiB;;AAEjB;;AAEA;AACA;AACA;;AAEA;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA;AACA,UAAS;AACT,MAAK;;AAEL;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB,kBAAiB;;AAEjB;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA;AACA,UAAS;AACT,MAAK;;AAEL;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB,kBAAiB;;AAEjB;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA;AACA,UAAS;AACT,MAAK;;AAEL;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB,kBAAiB;;AAEjB;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA;AACA,UAAS;AACT,MAAK;;AAEL;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAiB;;AAEjB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB,kBAAiB;;AAEjB;;AAEA;AACA;AACA;;AAEA;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA;AACA,UAAS;AACT;AACA,EAAC,E;;;;;;AC9gBD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA,UAAS;;AAET;AACA;AACA;AACA,UAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA,cAAa;AACb;AACA;AACA,cAAa;AACb;AACA;AACA,cAAa;AACb;AACA;AACA,cAAa;AACb;AACA;AACA,cAAa;AACb;AACA;AACA,cAAa;AACb;AACA;AACA,cAAa;AACb;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;;AAET;;AAEA;AACA,UAAS;AACT,MAAK;;AAEL;;AAEA;AACA;AACA,UAAS;AACT,MAAK;;AAEL;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,MAAK;;AAEL;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAS;AACT,MAAK;;AAEL;;AAEA;;AAEA;AACA;AACA,MAAK;;AAEL;;AAEA;AACA;AACA,MAAK;;AAEL;;AAEA;AACA,MAAK;;AAEL;;AAEA;AACA,MAAK;;AAEL;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,cAAa;AACb,UAAS;AACT,MAAK;;AAEL;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA,MAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,cAAa;;;AAGb;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,cAAa;;AAEb;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,kBAAiB;AACjB;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,kBAAiB;AACjB;;;AAGA,UAAS;;AAET;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,cAAa;AACb;;AAEA;AACA;;AAEA;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA;AACA,UAAS;AACT,MAAK;;AAEL;;AAEA;AACA;AACA;AACA,MAAK;;AAEL;;AAEA;AACA,MAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,4BAA2B;AAC3B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,sBAAqB;AACrB,kBAAiB;AACjB;;AAEA;AACA;AACA,cAAa;AACb;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,0BAAyB;AACzB,sBAAqB;AACrB,kBAAiB;AACjB;;AAEA;AACA;AACA,cAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,sBAAqB;AACrB,kBAAiB;AACjB;;AAEA;AACA;AACA,cAAa;AACb;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,sBAAqB;AACrB,kBAAiB;AACjB;;AAEA;AACA;AACA,cAAa;AACb;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,sBAAqB;AACrB,kBAAiB;AACjB;;AAEA;AACA;AACA,cAAa;;AAEb;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,8BAA6B;AAC7B,0BAAyB;AACzB;;AAEA;AACA;AACA,sBAAqB;AACrB,kBAAiB;;AAEjB;AACA;;AAEA;AACA;AACA,sBAAqB;AACrB;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,8BAA6B;AAC7B;;AAEA;;AAEA;AACA;AACA;AACA,0BAAyB;AACzB,sBAAqB;AACrB;;AAEA;;AAEA;AACA;AACA;AACA,kBAAiB;AACjB,cAAa;AACb;;AAEA;AACA;AACA,UAAS;AACT,MAAK;;AAEL;;AAEA;AACA;AACA;AACA;;AAEA;AACA,cAAa;;AAEb;;AAEA;;AAEA;;AAEA;AACA,MAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,cAAa;AACb,UAAS;;AAET;;AAEA;AACA;AACA;;AAEA;AACA;;;AAGA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA,UAAS;;AAET;;AAEA;;AAEA;AACA;AACA,MAAK;;AAEL;;AAEA;AACA,MAAK;;AAEL;;AAEA;AACA,MAAK;;AAEL;;AAEA;AACA,MAAK;;AAEL;;AAEA;AACA,MAAK;;AAEL;;AAEA;AACA,MAAK;;AAEL;;AAEA;AACA,MAAK;;AAEL;;AAEA;AACA,MAAK;;AAEL;;AAEA;AACA,MAAK;;;AAGL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC;;;;;;;AC9zBD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,sBAAqB;AACrB;AACA,cAAa;AACb;AACA;AACA;AACA;AACA,UAAS;AACT,MAAK;;AAEL;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,EAAC;;;;;;;ACnED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,sBAAqB;AACrB,kBAAiB;AACjB;AACA;;AAEA;;AAEA;AACA;AACA,sBAAqB;AACrB,kBAAiB;AACjB;;AAEA;;AAEA;AACA;AACA,sBAAqB;AACrB,kBAAiB;AACjB;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,sBAAqB;AACrB,kBAAiB;AACjB;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA,0BAAyB;;AAEzB;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,8BAA6B;;AAE7B;AACA,0BAAyB;AACzB,sBAAqB;AACrB;AACA,cAAa;AACb;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,8BAA6B;AAC7B,0BAAyB;AACzB,sBAAqB;;;AAGrB;AACA,kBAAiB;;AAEjB;;AAEA;AACA;;AAEA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA,cAAa;AACb;AACA;AACA;AACA,UAAS;;AAET;AACA,MAAK;;AAEL;;AAEA;;AAEA;AACA;AACA;AACA,UAAS;AACT,MAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;;AAEL;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;;AAET;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;;AAET;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;;AAET;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;;AAET;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;;AAET;AACA,MAAK;;AAEL;;AAEA;AACA,MAAK;;AAEL;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,MAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;;AAEL;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;;AAEL;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;;AAEL;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,UAAS;;AAET;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,UAAS;;AAET;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;;AAEL;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT,MAAK;;AAEL;;AAEA;AACA,MAAK;;AAEL;;AAEA;AACA,MAAK;;AAEL;;AAEA;AACA;AACA;;AAEA;AACA,sBAAqB;AACrB,uBAAsB;AACtB,4BAA2B;AAC3B;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,sBAAqB;AACrB;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,0BAAyB;;AAEzB;AACA;AACA,kBAAiB;AACjB;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,kBAAiB;;AAEjB;;AAEA;AACA;AACA;;AAEA,UAAS;;AAET,MAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT,MAAK;;AAEL;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAK;;AAEL;;AAEA;AACA;AACA;AACA,wBAAuB;AACvB;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,UAAS;;AAET;AACA;;AAEA;AACA,MAAK;;AAEL;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,EAAC;;;;;;;ACprBD;AACA;AACA;AACA;;AAEA;AACA,MAAK;;AAEL;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,UAAS;;AAET;AACA;AACA,EAAC,E;;;;;;ACjCD;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,UAAS;AACT;AACA;;AAEA;AACA;AACA,UAAS;;AAET;AACA;AACA,EAAC;;;;;;;ACvBD;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAS;AACT;AACA;;AAEA;AACA;AACA,UAAS;;AAET;AACA;AACA,EAAC;;;;;;;ACvBD;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,cAAa;AACb;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,UAAS;AACT;AACA;AACA;;AAEA;AACA,cAAa;AACb;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,UAAS;AACT;AACA;AACA;;AAEA;AACA,cAAa;AACb;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,UAAS;AACT;AACA;AACA;;AAEA;AACA,cAAa;AACb;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,UAAS;AACT;AACA;AACA;;AAEA;AACA,cAAa;AACb;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,UAAS;AACT;AACA;AACA;;AAEA;AACA,cAAa;AACb;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,UAAS;;AAET;AACA;AACA,EAAC;;;;;;;ACxGD;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,cAAa;AACb;;AAEA;AACA;AACA,UAAS;AACT;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,cAAa;AACb;;AAEA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA,cAAa;AACb,UAAS;AACT;AACA;AACA;AACA;AACA,cAAa;AACb;AACA,cAAa;AACb,UAAS;;AAET;AACA;AACA,EAAC,E;;;;;;ACtDD;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,cAAa;AACb;AACA,wCAAuC,cAAc;AACrD;;AAEA;AACA;;AAEA;AACA;AACA,cAAa;AACb,mCAAkC,cAAc;AAChD;;AAEA;AACA;;AAEA;AACA;AACA,cAAa;AACb,wCAAuC,cAAc;AACrD;;AAEA;AACA;;AAEA;AACA;AACA,cAAa;AACb,mCAAkC,SAAS,MAAM,SAAS,UAAU,cAAc;AAClF;;AAEA;AACA;;AAEA;AACA;AACA,cAAa;AACb;AACA;;AAEA;AACA;;AAEA;AACA;AACA,cAAa;AACb,UAAS;AACT;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,cAAa;AACb;;AAEA;AACA;AACA;AACA,UAAS;AACT;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,cAAa;AACb;;AAEA;AACA;;AAEA;AACA;AACA,UAAS;AACT;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,cAAa;AACb;;AAEA;AACA;AACA;AACA,UAAS;AACT;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,cAAa;AACb;;AAEA;AACA;;AAEA;AACA;AACA,UAAS;AACT;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,cAAa;AACb;;AAEA;AACA;;AAEA;AACA;AACA,UAAS;AACT;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,cAAa;AACb;;AAEA;AACA;;AAEA;AACA;AACA,UAAS;AACT;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,cAAa;AACb;;AAEA;AACA;;AAEA;AACA;AACA,UAAS;AACT;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,cAAa;AACb;;AAEA;AACA;;AAEA;AACA;AACA,UAAS;AACT;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,cAAa;AACb;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,cAAa;AACb;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA,sBAAqB;AACrB;AACA,cAAa;AACb;AACA;;AAEA;AACA;;AAEA;AACA;AACA,cAAa;AACb;AACA;;AAEA;AACA;;AAEA;AACA;AACA,cAAa;AACb;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,sBAAqB;AACrB;AACA,cAAa;AACb;AACA;;AAEA;AACA;;AAEA;AACA;AACA,cAAa;AACb;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,sBAAqB;AACrB;;AAEA;AACA;;AAEA;AACA;AACA,sBAAqB;AACrB;;AAEA;AACA;;AAEA;AACA;AACA,sBAAqB;AACrB;;AAEA;AACA;;AAEA;AACA;AACA,sBAAqB;AACrB;;AAEA;AACA;;AAEA;AACA;AACA,sBAAqB;AACrB;;AAEA;AACA;;AAEA;AACA;AACA,sBAAqB;AACrB;;AAEA;AACA;;AAEA;AACA;AACA,sBAAqB;AACrB;;AAEA;AACA;;AAEA;AACA;AACA,sBAAqB;AACrB;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAa;AACb,UAAS;AACT;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,cAAa;AACb;;AAEA;AACA;AACA;AACA,UAAS;;AAET;AACA;AACA,EAAC,E;;;;;;ACtXD;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,cAAa;AACb;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,UAAS;AACT;AACA;AACA;;AAEA;AACA,cAAa;AACb;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,UAAS;AACT;AACA;AACA;;AAEA;AACA,cAAa;AACb;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,UAAS;AACT;AACA;AACA;;AAEA;AACA,cAAa;AACb;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,qBAAoB;AACpB;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,iBAAgB;AAChB;AACA;AACA;;AAEA;AACA,qBAAoB;AACpB;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,iBAAgB;AAChB;AACA;AACA;;AAEA;AACA,qBAAoB;AACpB;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,iBAAgB;AAChB;AACA;AACA;AACA;AACA;;AAEA;AACA,qBAAoB;AACpB;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,iBAAgB;AAChB;AACA;AACA;;AAEA;AACA,qBAAoB;AACpB;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,iBAAgB;AAChB;AACA;AACA;;AAEA;AACA,qBAAoB;AACpB;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,EAAC,E;;;;;;AClMD;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA,cAAa;AACb;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,UAAS;AACT;AACA;;AAEA;AACA,cAAa;AACb;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,UAAS;AACT;AACA;;AAEA;AACA;AACA,cAAa;AACb;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,UAAS;AACT;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,cAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAa;AACb;AACA;;AAEA;AACA;AACA;AACA,cAAa;AACb;AACA;;AAEA;AACA;AACA;AACA,cAAa;AACb;AACA;;AAEA;AACA;AACA;AACA,cAAa;AACb;AACA;;AAEA;AACA;AACA;AACA,cAAa;AACb;AACA;;AAEA;AACA;AACA;AACA,cAAa;AACb,UAAS;AACT;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,cAAa;AACb;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,sBAAqB;AACrB;AACA,cAAa;AACb;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,0BAAyB;AACzB,sBAAqB;AACrB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;;AAET;AACA;AACA,EAAC,E;;;;;;ACjKD;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,cAAa;AACb;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,UAAS;AACT;AACA;AACA;;AAEA;AACA,cAAa;AACb;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,UAAS;AACT;AACA;AACA;;AAEA;AACA;AACA,cAAa;AACb;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,UAAS;AACT;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,kBAAiB;AACjB,cAAa;AACb;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,UAAS;;AAET;AACA;AACA,EAAC,E;;;;;;AClGD;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,cAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA,UAAS;AACT;AACA;AACA;;AAEA;AACA;AACA,UAAS;AACT;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,cAAa;AACb;;AAEA;AACA;AACA,UAAS;AACT;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,cAAa;AACb;;AAEA;AACA;AACA;;AAEA;AACA,kBAAiB;AACjB;AACA,UAAS;;AAET;AACA;AACA,EAAC,E;;;;;;AC/ED;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA,cAAa;AACb;AACA;AACA;AACA,UAAS;AACT,MAAK;;AAEL;;AAEA;AACA;AACA;AACA,UAAS;AACT,MAAK;;AAEL;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT,MAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAa;;AAEb;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAa;AACb;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAa;AACb;;AAEA;AACA;;AAEA;AACA,cAAa;AACb;;AAEA;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA;AACA,UAAS;AACT,MAAK;;AAEL;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,MAAK;;AAEL;;AAEA;AACA;AACA;AACA,EAAC;;;;;;;AClND;AACA;AACA;;;AAGA;AACA,EAAC;;;;;;;;ACND;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,UAAS;AACT;AACA,EAAC;;;;;;;ACnBD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT,MAAK;;AAEL;;AAEA;AACA,MAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA,UAAS;;AAET;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA,UAAS;AACT;AACA,EAAC;;;;;;;AC3DD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA,cAAa;AACb;AACA;AACA,cAAa;AACb;AACA;AACA;AACA,UAAS;AACT,MAAK;;AAEL;;AAEA;AACA;AACA;AACA;;AAEA;AACA,MAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA,MAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAiB;AACjB;AACA,UAAS;AACT,MAAK;;AAEL;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,UAAS;AACT;AACA,EAAC;;;;;;;AC9GD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAa;AACb;AACA;;AAEA;AACA;AACA;AACA,cAAa;AACb;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kCAAiC;AACjC,8BAA6B;;AAE7B;;AAEA;AACA;AACA,sBAAqB;AACrB;AACA,cAAa;AACb;AACA;;AAEA;;AAEA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kCAAiC;AACjC,8BAA6B;;AAE7B;;AAEA;AACA;AACA,sBAAqB;AACrB;AACA;;AAEA,UAAS;AACT,MAAK;;AAEL;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,0BAAyB;AACzB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA,cAAa;;AAEb;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAS;AACT,MAAK;;AAEL;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,MAAK;;AAEL;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,EAAC;;;;;;;AC3SD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA,cAAa;AACb;AACA;AACA,cAAa;AACb;AACA;AACA;AACA,UAAS;AACT,MAAK;;AAEL;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA,MAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,+CAA8C;AAC9C;AACA,MAAK;;AAEL;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,oCAAmC;AACnC;AACA;;AAEA,+CAA8C;AAC9C;AACA,MAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA;;AAEA,0BAAyB,QAAQ;AACjC,wBAAuB,QAAQ;AAC/B;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,MAAK;;AAEL;;AAEA;AACA,MAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,UAAS;;AAET;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA;AACA,UAAS;AACT,MAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,UAAS;;AAET;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,UAAS;;AAET;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAS;;;AAGT;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,cAAa;AACb;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA,cAAa;AACb;;AAEA;;AAEA;;AAEA;AACA;AACA,UAAS;AACT,MAAK;;AAEL;;AAEA;AACA;AACA;;AAEA;AACA,MAAK;;AAEL;;AAEA;AACA;AACA;;AAEA;;AAEA,MAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAa;AACb;;AAEA;;AAEA,+CAA8C;AAC9C;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB,kBAAiB;;AAEjB;;AAEA;AACA;;AAEA,mDAAkD;;AAElD;AACA;AACA,UAAS;AACT;AACA,EAAC;;;;;;;AC5YD;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAS;AACT,MAAK;;AAEL;;AAEA;AACA;;AAEA;;AAEA;AACA,UAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb,UAAS;;AAET;AACA,MAAK;;;AAGL;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,cAAa;AACb,UAAS;AACT;AACA,MAAK;;AAEL;;AAEA;AACA,cAAa,8CAA8C;AAC3D,cAAa;AACb;AACA,MAAK;;AAEL;;AAEA;AACA,MAAK;;AAEL;;AAEA;AACA,MAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,kBAAiB;;AAEjB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kBAAiB;;AAEjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAiB;AACjB,cAAa;AACb;;AAEA;AACA;AACA;AACA,UAAS;;;AAGT,MAAK;;AAEL;;AAEA;AACA,MAAK;;AAEL;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC,E;;;;;;ACrMD;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAa;AACb,UAAS;AACT,MAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA0B;AAC1B,2BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA8C;AAC9C;AACA,yBAAwB,yBAAyB;AACjD;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,6CAA4C,SAAS;AACrD,+CAA8C,SAAS,SAAS;AAChE;AACA;AACA;AACA,4CAA2C;AAC3C;AACA;AACA,uCAAsC;;AAEtC;AACA;AACA,EAAC,E;;;;;;ACpFD;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAS;AACT,MAAK;;AAEL;;AAEA;;AAEA;AACA;;AAEA;AACA,UAAS;;AAET;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb,UAAS;;AAET;AACA,MAAK;;AAEL;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,cAAa;AACb,UAAS;AACT;AACA,MAAK;;AAEL;;AAEA;AACA,cAAa,oDAAoD;AACjE,cAAa;AACb;AACA,MAAK;;;AAGL;;AAEA;AACA;AACA,EAAC,E;;;;;;AC7FD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAS;AACT,MAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT,MAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;;AAEL;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,cAAa;AACb;AACA;;AAEA;AACA;AACA;AACA,EAAC;;;;;;;AC7HD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA,UAAS;AACT,MAAK;;AAEL;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT,MAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA,yBAAwB;AACxB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB,kBAAiB;AACjB,cAAa;AACb;;AAEA;AACA;AACA,UAAS;;AAET;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,sBAAqB;;AAErB,sCAAqC,+BAA+B;AACpE,kBAAiB;AACjB;;AAEA;AACA;AACA,cAAa;AACb;;AAEA;AACA;;AAEA;AACA,cAAa;AACb;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA,sBAAqB;AACrB;;AAEA;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA;AACA,UAAS;AACT,MAAK;;AAEL;;AAEA;;AAEA;;AAEA,MAAK;;AAEL;;AAEA;;AAEA;AACA;AACA,MAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,UAAS;;AAET;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAS;;AAET;AACA;;AAEA;AACA,cAAa;AACb;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA;AACA,UAAS;AACT,MAAK;;AAEL;;AAEA;AACA;AACA;AACA,EAAC;;;;;;;AChRD;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA,cAAa;;AAEb;AACA;AACA,cAAa;;AAEb;AACA;AACA,cAAa;;AAEb;AACA;AACA,cAAa;;AAEb;AACA;AACA,cAAa;;AAEb;AACA;AACA,cAAa;;AAEb;AACA;AACA,cAAa;;AAEb;AACA;AACA,cAAa;;AAEb;AACA;AACA,cAAa;;AAEb;AACA;AACA,cAAa;;AAEb;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA,UAAS;AACT,MAAK;;AAEL;;AAEA,2BAA0B,iBAAiB;;AAE3C,iCAAgC,QAAQ;;AAExC;;AAEA;AACA;AACA;AACA,EAAC;;;;;;;AC5ED;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,kBAAiB;AACjB;;AAEA;AACA,kBAAiB;AACjB;;AAEA;AACA;AACA;AACA,UAAS;AACT;AACA,EAAC;;;;;;;ACzBD;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAmB;AACnB;AACA;AACA;AACA,gBAAe;;AAEf;;AAEA;;AAEA,OAAM;;AAEN;AACA,MAAK;AACL;;AAEA;AACA,MAAK;AACL;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,OAAM;AACN;AACA,EAAC,E;;;;;;ACvDD;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,cAAa;AACb;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,UAAS;AACT,MAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,EAAC,E;;;;;;ACzDD;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA,EAAC,E;;;;;;ACxCD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAM;AACN,MAAK;;AAEL;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,WAAU;;AAEV;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,EAAC,E;;;;;;ACnCD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,EAAC;;;;;;;ACTD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAS;AACT,MAAK;;AAEL;;AAEA,yCAAwC,UAAU;;AAElD;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,UAAS;AACT,MAAK;;AAEL;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAa;;AAEb;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,kBAAiB;AACjB,cAAa;;AAEb;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,cAAa;;AAEb;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,kBAAiB;AACjB;AACA;AACA;AACA,cAAa;;AAEb;;AAEA;AACA,UAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA,cAAa;;AAEb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAa;AACb;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA,cAAa;AACb;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAa;AACb;AACA,kBAAiB,6BAA6B;AAC9C,kBAAiB,+CAA+C;AAChE,kBAAiB;AACjB;AACA;AACA;AACA;AACA,UAAS;;AAET;;AAEA;AACA,UAAS;;AAET;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAa;AACb,UAAS;;AAET;;AAEA;;AAEA;;AAEA;AACA;AACA,cAAa;;AAEb;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,MAAK;;AAEL;;AAEA;AACA;;AAEA,qBAAoB;AACpB;AACA,MAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,cAAa;;AAEb;AACA;AACA;AACA;;AAEA;AACA,kBAAiB;AACjB;;AAEA;AACA;AACA,cAAa;AACb,UAAS;;AAET;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;;AAEA;AACA,kBAAiB;AACjB;;AAEA;AACA;AACA,cAAa;AACb,UAAS;;AAET;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,cAAa;AACb;;AAEA;AACA;;AAEA;AACA,cAAa;AACb;;AAEA;AACA;AACA;AACA,UAAS;AACT,MAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;;AAEA;AACA,kBAAiB;AACjB;;AAEA;AACA;AACA,cAAa;AACb,UAAS;;AAET;AACA;;AAEA;AACA,cAAa;AACb;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,kBAAiB;AACjB,cAAa;;AAEb;;AAEA;AACA;AACA;AACA,UAAS;AACT;AACA,EAAC;;;;;;;AC5kBD;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAmB;AACnB;;AAEA;AACA;AACA,gBAAe;AACf,MAAK;AACL;;AAEA;AACA;AACA;AACA,OAAM;AACN;AACA,EAAC;;;;;;;AChCD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAS;AACT,MAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;;AAET,wBAAuB,QAAQ;;AAE/B;AACA;AACA;AACA,EAAC;;;;;;;ACjCD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAS;AACT,MAAK;;AAEL;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,MAAK;;AAEL;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAK;;AAEL;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAa;AACb;AACA;AACA;;AAEA;AACA;AACA,cAAa;AACb;AACA;;AAEA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,sBAAqB;AACrB;AACA,cAAa;AACb;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,0BAAyB;AACzB,sBAAqB;AACrB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;;AAEL;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAS;AACT;AACA;;AAEA;AACA;AACA,UAAS;AACT,MAAK;;AAEL;;AAEA;;AAEA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA,sBAAqB;AACrB;AACA,cAAa;AACb;AACA,2CAA0C,cAAc;AACxD;;AAEA;AACA;;AAEA;AACA;AACA,cAAa;AACb,sCAAqC,cAAc;AACnD;;AAEA;AACA;;AAEA;AACA;AACA,cAAa;AACb,2CAA0C,cAAc;AACxD;;AAEA;AACA;;AAEA;AACA;AACA,cAAa;AACb,sCAAqC,SAAS,MAAM,SAAS,UAAU,cAAc;AACrF;;AAEA;AACA;;AAEA;AACA;AACA,cAAa;AACb;AACA;;AAEA;AACA;;AAEA;AACA;AACA,cAAa;AACb,UAAS;AACT;AACA;;AAEA;AACA;AACA,UAAS;AACT;AACA,UAAS;AACT;AACA;;AAEA;AACA;;AAEA;AACA;AACA,UAAS;AACT;AACA;;AAEA;AACA;;AAEA;AACA;AACA,UAAS;AACT;AACA;;AAEA;AACA;AACA;AACA,UAAS;AACT;AACA;;AAEA;AACA;;AAEA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,cAAa;AACb;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA,sBAAqB;AACrB;AACA,cAAa;AACb;AACA;;AAEA;AACA;;AAEA;AACA;AACA,cAAa;AACb;AACA;;AAEA;AACA;;AAEA;AACA;AACA,cAAa;AACb;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,sBAAqB;AACrB;AACA,cAAa;AACb;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,sBAAqB;AACrB;AACA,cAAa;AACb;AACA;;AAEA;AACA;;AAEA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,sBAAqB;;AAErB;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA;AACA,sBAAqB;;AAErB;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAa;AACb,UAAS;AACT;AACA,UAAS;AACT;AACA;;AAEA;AACA;AACA;AACA,UAAS;AACT,MAAK;;AAEL;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,UAAS;AACT;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,UAAS;AACT,MAAK;;AAEL;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAS;AACT;AACA;;AAEA;AACA;AACA;AACA,UAAS;AACT,MAAK;;AAEL;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,UAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAiB;AACjB;AACA,UAAS;AACT;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,UAAS;AACT;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,kBAAiB;AACjB;AACA,UAAS;AACT;AACA;AACA;;AAEA;AACA,UAAS;AACT,MAAK;;AAEL;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAS;AACT;AACA;;AAEA;AACA;AACA;AACA,UAAS;AACT,MAAK;;AAEL;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,UAAS;AACT;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,kBAAiB;AACjB;AACA,UAAS;AACT;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,kBAAiB;AACjB;AACA,UAAS;AACT,MAAK;;AAEL;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,UAAS;AACT;AACA;;AAEA;AACA;AACA;AACA,UAAS;AACT,MAAK;;AAEL;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,UAAS;AACT;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,kBAAiB;AACjB;AACA,UAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAiB;AACjB;AACA,UAAS;AACT,MAAK;;AAEL;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAS;AACT;AACA;;AAEA;AACA;AACA;AACA,UAAS;AACT,MAAK;;AAEL;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,UAAS;AACT;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,kBAAiB;AACjB;AACA,UAAS;AACT,MAAK;;AAEL;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAS;AACT;AACA;;AAEA;AACA;AACA;AACA,UAAS;AACT,MAAK;;AAEL;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAS;AACT;AACA;;AAEA;AACA;;AAEA;AACA;AACA,UAAS;AACT;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,kBAAiB;AACjB;AACA,UAAS;AACT;;AAEA,EAAC;;;;;;;;ACjxBD;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAa;AACb,UAAS;AACT,MAAK;;AAEL;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,UAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb,UAAS;;AAET;AACA,MAAK;;AAEL;;AAEA;AACA;;AAEA;AACA,UAAS;;AAET;AACA;;AAEA,wBAAuB,8CAA8C;AACrE,UAAS;;AAET;AACA,MAAK;;AAEL;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,cAAa;AACb;AACA,UAAS;;AAET;AACA,MAAK;;AAEL,oC;;AAEA;AACA,cAAa,kCAAkC;AAC/C,cAAa,oDAAoD;AACjE,cAAa;AACb;AACA;AACA,EAAC,E;;;;;;AC1GD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA,cAAa;AACb;AACA;AACA;AACA,UAAS;;AAET;AACA,MAAK;;AAEL;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA,cAAa;AACb;;AAEA;AACA;AACA,UAAS;AACT,MAAK;;AAEL;;AAEA;;AAEA;AACA;AACA;AACA,UAAS;AACT,MAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;;AAEA;AACA;AACA,UAAS;AACT,MAAK;;AAEL;;AAEA;AACA;AACA,EAAC;;;;;;;AClHD;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,cAAa;AACb;AACA;;AAEA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA,UAAS;;AAET;AACA,MAAK;;AAEL;;AAEA;;AAEA;AACA;AACA;AACA,UAAS;AACT,MAAK;;AAEL;;AAEA;AACA;AACA,EAAC;;;;;;;AC7CD;AACA;AACA;;AAEA;AACA;AACA,MAAK;;AAEL;;AAEA;AACA;AACA;AACA,kBAAiB,gEAAgE;AACjF,kBAAiB,4DAA4D;AAC7E,kBAAiB,wEAAwE;AACzF,kBAAiB;AACjB;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kCAAiC;AACjC,8BAA6B;;AAE7B;AACA;AACA;;AAEA;AACA;;AAEA;AACA,sBAAqB;AACrB;;AAEA;;AAEA;AACA;AACA,kBAAiB;AACjB;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,UAAS;AACT,MAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA,cAAa;AACb,UAAS;AACT,MAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;;AAEL;;AAEA;AACA;AACA,UAAS;;AAET;AACA;AACA;AACA;AACA;;AAEA;AACA,MAAK;;AAEL;;AAEA;AACA;AACA,UAAS;;AAET;AACA;AACA;AACA;AACA;;AAEA;AACA,MAAK;;AAEL;;AAEA;AACA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA,MAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA,cAAa;AACb;;AAEA;AACA;AACA,UAAS;AACT,MAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA,cAAa;AACb;;AAEA;AACA;AACA,UAAS;AACT,MAAK;;AAEL;;AAEA;AACA;AACA,EAAC,E;;;;;;AC9PD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB,cAAa;AACb;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA,oCAAmC;AACnC;;AAEA;;AAEA;AACA,sBAAqB;;AAErB;AACA;AACA;AACA,UAAS;AACT,MAAK;;AAEL;;AAEA;AACA,MAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,cAAa;;AAEb;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA,cAAa;;AAEb;;AAEA;AACA;AACA;AACA;AACA,UAAS;AACT,MAAK;;AAEL;;AAEA;AACA;AACA;AACA,EAAC;;;;;;;AC1PD;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,UAAS;;AAET;AACA;AACA,UAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,kBAAiB;AACjB;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,UAAS;;;AAGT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA,sBAAqB;;AAErB;;AAEA;;AAEA;;AAEA;;AAEA;AACA,0BAAyB;AACzB,sBAAqB;AACrB;AACA;AACA,UAAS;AACT,MAAK;;AAEL;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA,UAAS;AACT,MAAK;;AAEL;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,UAAS;AACT,MAAK;;AAEL;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA,UAAS;AACT,MAAK;;AAEL;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,MAAK;;AAEL;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,MAAK;;AAEL;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,cAAa;AACb,UAAS;AACT,MAAK;;AAEL;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,cAAa;AACb;;AAEA;AACA;AACA;AACA,UAAS;AACT,MAAK;;AAEL;;AAEA;AACA,MAAK;;AAEL;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,MAAK;;AAEL;;AAEA;AACA;AACA;;AAEA,kGAAiG,EAAE;AACnG;AACA,cAAa;AACb;AACA;;AAEA,gGAA+F,EAAE;AACjG;AACA,cAAa;AACb;AACA;;AAEA,8FAA6F,EAAE;AAC/F;AACA,cAAa;AACb;AACA;;AAEA;AACA;AACA,cAAa;AACb,cAAa,iDAAiD;AAC9D,cAAa,2CAA2C;AACxD,cAAa;AACb;AACA,MAAK;;AAEL;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,MAAK;;AAEL;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,cAAa;AACb,UAAS;AACT,MAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA,cAAa;AACb,UAAS;AACT;AACA,EAAC;;;;;;;ACvVD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAS;AACT,MAAK;;AAEL;;AAEA;AACA;;AAEA;;AAEA;AACA,UAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb,UAAS;;AAET;AACA,MAAK;;AAEL;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA,cAAa;AACb,UAAS;AACT,MAAK;;AAEL;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,cAAa;AACb;AACA,UAAS;;AAET;AACA,MAAK;AACL;;AAEA;AACA,cAAa,8DAA8D;AAC3E,cAAa;AACb;AACA;AACA,EAAC,E;;;;;;ACjGD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAS;AACT,MAAK;;AAEL;;AAEA;AACA;;AAEA;;AAEA;AACA,UAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAS;;AAET;AACA,MAAK;;AAEL;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA,cAAa;AACb,UAAS;AACT,MAAK;;AAEL;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,cAAa;AACb;AACA,UAAS;;AAET;AACA,MAAK;AACL;;AAEA;AACA,cAAa,8DAA8D;AAC3E,cAAa;AACb;AACA;AACA,EAAC,E;;;;;;ACnJD;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;;AAEA;AACA;;AAEA,6FAA4F,KAAK,WAAW,KAAK;AACjH;AACA,0BAAyB;AACzB;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,8BAA6B;;AAE7B,0BAAyB;AACzB,sBAAqB;;AAErB;;AAEA;AACA;AACA;AACA,cAAa;;AAEb;AACA;;AAEA;AACA;AACA,EAAC,E;;;;;;ACnGD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,mD;AACA,0BAAyB;AACzB;;AAEA;AACA,mD;AACA;AACA,sBAAqB;AACrB;AACA,cAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAS;AACT,MAAK;;AAEL;;AAEA;;AAEA;AACA;;AAEA;AACA,UAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA,kBAAiB,8DAA8D;AAC/E,kBAAiB;AACjB;AACA;;AAEA;;AAEA;AACA;AACA;AACA,mBAAkB;AAClB,kBAAiB;;AAEjB;AACA,mBAAkB;AAClB,kBAAiB;;AAEjB;;AAEA;AACA;AACA;AACA,UAAS;;AAET;AACA,MAAK;;AAEL;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,cAAa;AACb,UAAS;AACT,MAAK;;AAEL;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,cAAa;AACb;AACA,UAAS;;AAET;AACA,MAAK;AACL,oC;;AAEA;AACA,cAAa,0CAA0C;AACvD,cAAa,8CAA8C;AAC3D,cAAa,gDAAgD;AAC7D,cAAa,4CAA4C;AACzD,cAAa,sDAAsD;AACnE,cAAa,kDAAkD;AAC/D,cAAa;AACb;AACA;AACA,EAAC,E;;;;;;ACxKD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA,cAAa;AACb,UAAS;AACT,MAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,MAAK;;AAEL;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAK;;AAEL;;AAEA,oC;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA,MAAK;;AAEL;;AAEA;AACA;AACA,MAAK;;AAEL;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,sBAAqB;AACrB;;AAEA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;;AAEA;AACA;AACA;AACA;;AAEA,UAAS;AACT;AACA,EAAC,E;;;;;;ACpKD;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,UAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAa;AACb;AACA,kBAAiB;;AAEjB;AACA,mBAAkB;AAClB,kBAAiB;;AAEjB;AACA,mBAAkB;AAClB,kBAAiB;;AAEjB;AACA,mBAAkB;AAClB,kBAAiB;;AAEjB;AACA,mBAAkB;AAClB,kBAAiB;;AAEjB;AACA,mBAAkB;AAClB,kBAAiB;;AAEjB;AACA,mBAAkB;AAClB;AACA,kBAAiB;;AAEjB;AACA,mBAAkB;AAClB,kBAAiB;;AAEjB;AACA,mBAAkB;AAClB,kBAAiB;;AAEjB;AACA;AACA;AACA,UAAS;;AAET,oBAAmB;AACnB;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,mCAAkC,6BAA6B;AAC/D,iCAAgC;AAChC,sBAAqB;;AAErB,4BAA2B;;AAE3B;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,wBAAuB;AACvB;;AAEA;AACA;;;AAGA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,mCAAkC,gCAAgC;AAClE,iCAAgC;AAChC,sBAAqB;AACrB;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,mCAAkC,gCAAgC;AAClE,iCAAgC;AAChC,sBAAqB;AACrB;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA,MAAK;;AAEL;;AAEA;AACA;AACA,MAAK;;AAEL;;AAEA;AACA;AACA,MAAK;;AAEL;;AAEA;AACA;AACA;AACA,EAAC;;;;;;;ACjRD,mCAAkC,46GAA46G,E;;;;;;ACA98G;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,UAAS;;AAET;AACA;;AAEA;AACA,UAAS;;AAET;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,UAAS;;AAET;AACA;;AAEA;AACA;;AAEA;AACA,kCAAiC,6BAA6B;AAC9D,6CAA4C,qBAAqB;AACjE,wCAAuC,UAAU,QAAQ;AACzD,UAAS;;AAET;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,MAAK;;AAEL;;AAEA;;AAEA;AACA,MAAK;;AAEL;;AAEA;AACA,MAAK;;AAEL;;AAEA;AACA,MAAK;;AAEL;;AAEA;AACA,MAAK;;AAEL;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA,cAAa;AACb,UAAS;;AAET,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAS;AACT,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;;AAEL;;AAEA;AACA,MAAK;;AAEL;;AAEA;AACA,MAAK;;AAEL;;AAEA;AACA,MAAK;;AAEL;;AAEA;AACA,MAAK;;AAEL;;AAEA;;AAEA;AACA;;AAEA;AACA,MAAK;;AAEL;;AAEA;;AAEA;AACA;;AAEA;AACA,MAAK;;AAEL;;AAEA;AACA;AACA,MAAK;;AAEL;;AAEA;AACA;AACA,MAAK;;AAEL;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA,6BAA4B,6BAA6B;;AAEzD;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,MAAK;;AAEL;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,MAAK;;AAEL;;AAEA;AACA;;AAEA;AACA,MAAK;;AAEL;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,MAAK;;AAEL;;AAEA;AACA,MAAK;;AAEL;;AAEA;;AAEA;;AAEA;AACA,UAAS;AACT,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,MAAK;;AAEL;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA,cAAa;AACb,UAAS;AACT,MAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;;AAEA;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAa;AACb,UAAS;AACT,MAAK;;AAEL;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA,gBAAe,OAAO;AACtB;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,cAAa;AACb;;AAEA;AACA;AACA,UAAS;;AAET;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA,MAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;;AAET;;AAEA;;AAEA;;AAEA;AACA;AACA,gBAAe;AACf;AACA;;AAEA;AACA;AACA,UAAS;;AAET;AACA,MAAK;;AAEL;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;;AAET;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,cAAa;AACb;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,cAAa;;AAEb;AACA;;AAEA;;AAEA;AACA;AACA;AACA,cAAa;;AAEb;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,cAAa;;AAEb;AACA;;AAEA;AACA;AACA,sBAAqB;AACrB,kBAAiB;AACjB;;AAEA;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,kBAAiB;;AAEjB;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA,gBAAe,OAAO;AACtB,gBAAe,OAAO;AACtB,gBAAe,OAAO;AACtB;AACA;;AAEA;AACA,oCAAmC;AACnC;;AAEA;AACA;AACA,yCAAwC;AACxC,yCAAwC;AACxC;AACA,UAAS;;AAET;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,sBAAqB;AACrB;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,kBAAiB;AACjB;AACA;;AAEA;AACA;AACA;AACA,UAAS;AACT,MAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,sBAAqB;AACrB;AACA,kBAAiB;AACjB;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,sBAAqB;AACrB;AACA,kBAAiB;AACjB;;AAEA;;AAEA;AACA,+CAA8C,6CAA6C;AAC3F,sBAAqB;AACrB;AACA,kBAAiB;AACjB;;AAEA;;AAEA,+CAA8C,6CAA6C;AAC3F,sBAAqB;AACrB;AACA,kBAAiB;AACjB;;AAEA;;AAEA;AACA,sBAAqB;AACrB;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,UAAS;AACT,MAAK;;AAEL;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAS;AACT,MAAK;;AAEL;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,UAAS;AACT,MAAK;;AAEL;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA,UAAS;AACT,MAAK;;AAEL;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,kBAAiB;AACjB;AACA,UAAS;AACT,MAAK;;AAEL;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,8BAA6B;AAC7B;AACA;AACA;;AAEA;AACA;AACA,8BAA6B;;AAE7B;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,8BAA6B;AAC7B;;AAEA;;AAEA;AACA;AACA,0BAAyB;AACzB;AACA,kBAAiB;AACjB;AACA,UAAS;AACT,MAAK;;AAEL;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,UAAS;AACT,MAAK;;AAEL;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,UAAS;AACT,MAAK;;AAEL;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,kBAAiB;AACjB;AACA,UAAS;AACT,MAAK;;AAEL;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,UAAS;AACT,MAAK;;AAEL;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,UAAS;AACT,MAAK;;AAEL;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,kBAAiB;AACjB;AACA,UAAS;AACT,MAAK;;AAEL;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,UAAS;AACT,MAAK;;AAEL;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,UAAS;AACT,MAAK;;AAEL;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,kBAAiB;AACjB;AACA,UAAS;AACT,MAAK;;AAEL;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,8BAA6B;AAC7B;AACA;AACA;;AAEA;AACA;AACA,8BAA6B;;AAE7B;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,8BAA6B;AAC7B;;AAEA;AACA;AACA;AACA,0BAAyB;AACzB;AACA,kBAAiB;AACjB;AACA,UAAS;AACT,MAAK;;AAEL;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,UAAS;AACT,MAAK;;AAEL;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,UAAS;AACT,MAAK;;AAEL;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,kBAAiB;AACjB;AACA,UAAS;AACT,MAAK;;AAEL;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,8BAA6B;AAC7B;AACA;AACA;;AAEA;AACA;AACA,8BAA6B;;AAE7B;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,8BAA6B;AAC7B;;AAEA;AACA;AACA;AACA,0BAAyB;AACzB;AACA,kBAAiB;AACjB;AACA,UAAS;AACT,MAAK;;AAEL;;AAEA;AACA,MAAK;;AAEL;;AAEA;AACA,MAAK;;AAEL;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAS;AACT,MAAK;;AAEL;;AAEA;AACA,MAAK;;AAEL;;AAEA;AACA,MAAK;;AAEL;;AAEA;AACA,MAAK;;AAEL;;AAEA;AACA,MAAK;;AAEL;;AAEA;AACA,MAAK;;AAEL;;AAEA;AACA,MAAK;;AAEL;;AAEA;AACA,MAAK;;AAEL;;AAEA;AACA,MAAK;;AAEL;;AAEA;AACA,MAAK;;AAEL;;AAEA;AACA,MAAK;;AAEL;;AAEA;AACA,MAAK;;AAEL;;AAEA;AACA,MAAK;;AAEL;;AAEA;AACA,MAAK;;AAEL;;AAEA;AACA,MAAK;;AAEL;;AAEA;AACA,MAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAS;AACT,MAAK;;AAEL;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAS;AACT,MAAK;;AAEL;;AAEA;AACA,MAAK;;AAEL;;AAEA;AACA,MAAK;;AAEL;;AAEA;AACA,MAAK;;AAEL;;AAEA;AACA,MAAK;;AAEL;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,kBAAiB;AACjB;AACA,UAAS;AACT,MAAK;;AAEL;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,8BAA6B;AAC7B,0BAAyB;;AAEzB;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,8BAA6B;AAC7B;;AAEA;AACA;AACA;AACA,0BAAyB;AACzB;AACA,kBAAiB;AACjB;AACA,UAAS;AACT,MAAK;;AAEL;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,kBAAiB;AACjB;AACA,UAAS;AACT,MAAK;;AAEL;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,kBAAiB;AACjB;AACA,UAAS;AACT,MAAK;;AAEL;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,kBAAiB;AACjB;AACA,UAAS;AACT,MAAK;;AAEL;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,kBAAiB;AACjB;AACA,UAAS;AACT,MAAK;;AAEL;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,sBAAqB;AACrB;AACA;AACA;;AAEA;AACA;AACA,sBAAqB;;AAErB;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA,sBAAqB;AACrB;;AAEA;AACA;AACA;AACA,kBAAiB;AACjB;AACA,UAAS;AACT,MAAK;;AAEL;;AAEA;AACA;AACA;AACA,MAAK;;;AAGL;;AAEA;AACA;;AAEA;AACA,MAAK;;AAEL;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,cAAa;;AAEb;;AAEA;AACA;;AAEA;AACA,MAAK;;AAEL;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA,2BAA0B,QAAQ;;AAElC;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,UAAS;;AAET;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,8BAA6B;AAC7B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,sBAAqB;AACrB;;AAEA;;AAEA;;AAEA;AACA;AACA,kBAAiB;AACjB;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA,UAAS;AACT,MAAK;;AAEL;;AAEA,oCAAmC,QAAQ;;AAE3C;AACA,MAAK;;AAEL;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA,MAAK;;AAEL;;AAEA;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,MAAK;;AAEL;;AAEA;AACA,MAAK;;AAEL;;AAEA;AACA,MAAK;;AAEL;;AAEA;AACA;AACA,MAAK;;AAEL;;AAEA;AACA;AACA,MAAK;;AAEL;;AAEA;;AAEA;;AAEA,uBAAsB,gBAAgB;;AAEtC;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,cAAa;AACb;AACA;AACA,MAAK;;AAEL;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,uCAAsC,iBAAiB;AACvD;AACA,cAAa;AACb;;AAEA;AACA;AACA;AACA,UAAS;AACT,MAAK;;AAEL;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,uCAAsC,iBAAiB;AACvD;AACA,cAAa;AACb;;AAEA;AACA;AACA;AACA,UAAS;AACT,MAAK;;AAEL;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,cAAa;AACb;AACA,UAAS;;AAET;AACA,MAAK;;AAEL;;AAEA;AACA,MAAK;;AAEL;;AAEA;AACA,MAAK;;AAEL;;AAEA;;AAEA,uBAAsB,QAAQ;AAC9B;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA,cAAa;AACb,UAAS;;AAET;AACA,MAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA,UAAS;;AAET;AACA;AACA;AACA;AACA;AACA,UAAS;;AAET;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;;AAErB;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;;AAErB;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;;AAErB;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;;AAErB;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;;AAErB;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,kCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,kCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,kCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,kCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,kCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,kCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,kCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,kCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,kCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,kCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,kCAAiC;AACjC,8BAA6B;;AAE7B;AACA;AACA,0BAAyB;AACzB;;AAEA;AACA;AACA,sBAAqB;AACrB,kBAAiB;;AAEjB;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,sBAAqB;AACrB;;AAEA;AACA;AACA;AACA;AACA,kBAAiB;AACjB,cAAa;AACb;;AAEA;AACA;AACA;AACA,UAAS;AACT,MAAK;;AAEL;;AAEA;AACA;;AAEA;;AAEA;;AAEA,UAAS;;AAET;;AAEA,UAAS;;AAET;AACA;AACA;;AAEA;AACA;AACA,MAAK;;AAEL;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC","file":"app.bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap d2c1132349697718910d","require(\"./lib/setting/Planche-Wordpress\")\nrequire(\"./overrides/RadioGroup\")\nrequire(\"./overrides/FixMenuBug\")\nrequire(\"./dbms/mysql\")\nrequire(\"./lib/QuickCommand\")\nrequire(\"./lib/SchemaUtil\")\nrequire(\"./lib/QueryParser\")\nrequire(\"./lib/QueryTokenType\")\nrequire(\"./lib/QueryAlignment\")\nrequire(\"./lib/Query\")\nrequire(\"./lib/DBUtil\")\nrequire(\"./lib/Base64\")\nrequire(\"./store/DatabaseSchemaTree\")\nrequire(\"./store/GrantSchemaTree\")\nrequire(\"./view/user/GrantPrivList\")\nrequire(\"./view/database/DownloadToCSVTargetList\")\nrequire(\"./view/database/CopyDatabaseTargetList\")\nrequire(\"./lib/Window\")\nrequire(\"./view/layout/Menu\")\nrequire(\"./view/Main\")\nrequire(\"./view/Viewport\")\nrequire(\"./view/layout/ConnectTab\")\nrequire(\"./view/user/UserAdd\")\nrequire(\"./view/user/GrantUserList\")\nrequire(\"./view/user/GrantSchemaTree\")\nrequire(\"./view/user/Grant\")\nrequire(\"./view/table/TableInfoTab\")\nrequire(\"./view/table/TableSQLTab\")\nrequire(\"./view/table/TableIndexesTab\")\nrequire(\"./view/table/TablePropertiesTab\")\nrequire(\"./view/table/TableSchemaTab\")\nrequire(\"./view/table/EditSchemaWindow\")\nrequire(\"./view/table/EditIndexWindow\")\nrequire(\"./view/layout/Toolbar\")\nrequire(\"./view/layout/QueryTabPanel\")\nrequire(\"./view/layout/ResultTabPanel\")\nrequire(\"./view/layout/QueryEditor\")\nrequire(\"./view/layout/HistoryTab\")\nrequire(\"./view/layout/InfoTab\")\nrequire(\"./view/layout/TableDataTab\")\nrequire(\"./view/layout/MessageTab\")\nrequire(\"./view/layout/QueryTab\")\nrequire(\"./view/layout/SchemaTree\")\nrequire(\"./store/SchemaTree\")\nrequire(\"./view/database/DownloadToCSV\")\nrequire(\"./view/database/SchemaToHTML\")\nrequire(\"./view/database/DatabaseSchemaTree\")\nrequire(\"./view/database/CopyDatabaseWindow\")\nrequire(\"./lib/SchemaTree\")\nrequire(\"./controller/user/Grant\")\nrequire(\"./controller/layout/SchemaTree\")\nrequire(\"./controller/database/CopyDatabaseWindow\")\nrequire(\"./lib/Menu\")\nrequire(\"./controller/menu/bookmark/Planche-Wordpress\")\nrequire(\"./controller/menu/Help\")\nrequire(\"./controller/menu/Tools\")\nrequire(\"./controller/menu/Export\")\nrequire(\"./controller/menu/Table\")\nrequire(\"./controller/menu/Edit\")\nrequire(\"./controller/menu/Database\")\nrequire(\"./controller/menu/Query\")\nrequire(\"./controller/menu/Connection\")\nrequire(\"./controller/user/UserAdd\")\nrequire(\"./controller/Main\")\nrequire(\"./controller/table/TableInfoTab\")\nrequire(\"./controller/table/TableSQLTab\")\nrequire(\"./controller/table/TableIndexesTab\")\nrequire(\"./controller/table/TablePropertiesTab\")\nrequire(\"./controller/table/TableSchemaTab\")\nrequire(\"./controller/table/ReorderColumns\")\nrequire(\"./controller/table/EditTextColumn\")\nrequire(\"./controller/table/AdvancedProperties\")\nrequire(\"./controller/table/EditSchemaWindow\")\nrequire(\"./controller/table/EditIndexWindow\")\nrequire(\"./controller/layout/Toolbar\")\nrequire(\"./controller/layout/ConnectTab\")\nrequire(\"./controller/layout/HistoryTab\")\nrequire(\"./controller/layout/InfoTab\")\nrequire(\"./controller/layout/TableDataTab\")\nrequire(\"./controller/layout/MessageTab\")\nrequire(\"./controller/layout/QueryTab\")\nrequire(\"./controller/layout/ResultTabPanel\")\nrequire(\"./controller/layout/QueryEditor\")\nrequire(\"./controller/layout/QueryTabPanel\")\nrequire(\"./controller/layout/SchemaTreeContextMenu\")\nrequire(\"./controller/query/Token\")\nrequire(\"./controller/database/DownloadToCSV\")\nrequire(\"./controller/database/SchemaToHTML\")\nrequire(\"./controller/database/CreateDatabase\")\nrequire(\"./controller/connection/NewConnect\")\nrequire(\"./controller/connection/Connect\")\nrequire(\"./controller/command/Variables\")\nrequire(\"./controller/command/Status\")\nrequire(\"./controller/command/Quick\")\nrequire(\"./controller/command/Process\")\nrequire(\"./controller/command/Flush\")\nrequire(\"./controller/command/Find\")\nrequire(\"./Application\")\nrequire(\"./App\")\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/entry.js\n// module id = 0\n// module chunks = 0","Ext.define('Planche.lib.setting.Planche-Wordpress', {\n    singleton         : true,\n    alternateClassName: ['Planche.lib.Setting'],\n\n    setHosts : function(hosts, callback) {\n\n        Ext.Ajax.request({\n            url: 'config/hosts.php',\n            method : 'post',\n            params: {\n                hosts : Ext.JSON.encode(hosts)\n            },\n            success: function(response){\n\n                // debugger;\n                if (response.responseText) {\n\n                    response = Ext.JSON.decode(response.responseText);\n                }\n\n                if (response.success === true) {\n\n                    if(callback){ callback(); }\n                }\n                else {\n\n                    Ext.Msg.alert('error', response.message);\n                }\n                // process server response here\n            },\n            failure : function(response){\n\n                Ext.Msg.alert('error', 'Please. Try again.');\n            }\n        });\n    },\n\n    getHosts: function(callback) {\n\n        Ext.Ajax.request({\n            url: 'config/hosts.php',\n            method : 'get',\n            params : {\n                'ajax' : true\n            },\n            success: function(response){\n\n                // debugger;\n                if (response.responseText) {\n\n                    response = Ext.JSON.decode(response.responseText);\n                }\n\n                if (response.success === true) {\n\n                    if(callback){ callback(response.hosts); }\n                }\n                else {\n\n                    Ext.Msg.alert('error', response.message);\n                }\n                // process server response here\n            },\n            failure : function(response){\n\n                Ext.Msg.alert('error', 'Please. Try again.');\n            }\n        });\n    },\n\n    isEnableAutoLoadConnectionWindow : function(callback){\n\n        Ext.Ajax.request({\n            url: 'config/hosts.php',\n            method : 'get',\n            params : {\n                'ajax' : true\n            },\n            success: function(response){\n\n                // debugger;\n                if (response.responseText) {\n\n                    response = Ext.JSON.decode(response.responseText);\n                }\n\n                if (response.success === true) {\n\n                    if(callback){ callback(response.autoLoadConnectionWindow); }\n                }\n                else {\n\n                    Ext.Msg.alert('error', response.message);\n                }\n                // process server response here\n            },\n            failure : function(response){\n\n                Ext.Msg.alert('error', 'Please. Try again.');\n            }\n        });\n    }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/lib/setting/Planche-Wordpress.js\n// module id = 1\n// module chunks = 0","Ext.define(\"Planche.overrides.RadioGroup\", {\n    override: \"Ext.form.RadioGroup\",\n    setValue: Ext.Function.createSequence(\n        Ext.form.RadioGroup.prototype.setValue,\n        function(value){\n\n            var idx = this.name || this.id;\n            if(!Ext.isObject(value) && !Ext.isEmpty(idx)){\n                var data = {};\n\n                data[idx] = value;\n                this.setValue(data);\n            }\n        }\n    ),\n    getValue: function(first){\n\n       var value = this.callParent();\n        if(Ext.Object.getSize(value) == 1 && first === true){\n\n            return Ext.Object.getValues(value)[0];\n        }\n        else {\n\n            return value;\n        }\n    }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/overrides/RadioGroup.js\n// module id = 2\n// module chunks = 0","// fix hide submenu (in chrome 43)\nExt.define(\"Planche.overrides.FixMenuBug\", {\n    override: \"Ext.menu.Menu\",\n    onMouseLeave: function(e) {\n        var me = this;\n\n\n        // BEGIN FIX\n        var visibleSubmenu = false;\n        me.items.each(function(item) {\n            if(item.menu && item.menu.isVisible()) {\n                visibleSubmenu = true;\n            }\n        })\n        if(visibleSubmenu) {\n            //console.log('apply fix hide submenu');\n            return;\n        }\n        // END FIX\n\n\n        me.deactivateActiveItem();\n\n\n        if (me.disabled) {\n            return;\n        }\n\n\n        me.fireEvent('mouseleave', me, e);\n    }\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/overrides/FixMenuBug.js\n// module id = 3\n// module chunks = 0","Ext.define('Planche.dbms.mysql', function() {\r\n\r\n    var queries = {\r\n        SELECT_ALL_USER         : 'SELECT * FROM `mysql`.`user`',\r\n        SELECT_USER             : 'SELECT * FROM `mysql`.`user` WHERE user=\"{0}\" AND host=\"{1}\"',\r\n        SELECT_COUNT            : 'SELECT COUNT(1) as cnt FROM `{0}`.`{1}`',\r\n        CREATE_USER             : 'CREATE USER `{0}`@`{1}` IDENTIFIED BY \"{2}\"',\r\n        DELETE_USER             : 'DROP USER `{0}`@`{1}`',\r\n        GRANT                   : 'GRANT {0} ON {3} TO `{1}`@`{2}` {4}',\r\n        REVOKE                  : 'REVOKE {0} ON {3} FROM `{1}`@`{2}`',\r\n        RENAME_USER             : 'RENAME USER `{0}`@`{1}` TO `{2}`@`{3}`',\r\n        USER_PRIV               : 'SELECT * FROM `mysql`.`user` WHERE USER = \"{0}\" AND HOST = \"{1}\"',\r\n        USER_DATABASE_PRIV      : 'SELECT * FROM `mysql`.`db` WHERE USER = \"{0}\" AND HOST = \"{1}\"',\r\n        USER_TABLE_PRIV         : 'SELECT Db, Table_name, Table_priv FROM `mysql`.`tables_priv` WHERE USER = \"{0}\" AND HOST = \"{1}\"',\r\n        USER_COLUMN_PRIV        : 'SELECT Db, Table_name, Column_name, Column_priv FROM `mysql`.`columns_priv` WHERE USER = \"{0}\" AND HOST = \"{1}\"',\r\n        USER_PROC_PRIV          : 'SELECT Db, Routine_name, Routine_type, Proc_priv FROM `mysql`.`procs_priv` WHERE USER = \"{0}\" AND HOST = \"{1}\"',\r\n        SHOW_FULL_FIELDS        : 'SHOW FULL FIELDS FROM `{0}`.`{1}`',\r\n        SHOW_DATABASE_VIEWS     : 'SHOW FULL TABLES FROM `{0}` WHERE TABLE_TYPE LIKE \\'VIEW\\'',\r\n        SHOW_DATABASE_TABLES    : 'SHOW FULL TABLES FROM `{0}` WHERE table_type = \\'BASE TABLE\\'',\r\n        SHOW_ADVANCED_PROPERTIES: 'SHOW TABLE STATUS FROM `{0}` LIKE \"{1}\"',\r\n        SHOW_DATABASE           : 'SHOW DATABASES',\r\n        ADD_INDEX               : 'CREATE {3} INDEX {2} ON `{0}`.`{1}`({4}) {5}',\r\n        SHOW_INDEX              : 'SHOW INDEX FROM `{0}`.`{1}` WHERE key_name=\"{2}\"',\r\n        SHOW_INDEXES            : 'SHOW INDEX FROM `{0}`.`{1}`',\r\n        DROP_INDEX              : 'DROP INDEX {2} ON `{0}`.`{1}`',\r\n        DROP_PROCEDURE          : 'DROP PROCEDURE {2} `{0}`.`{1}`',\r\n        DROP_FUNCTION           : 'DROP FUNCTION {2} `{0}`.`{1}`',\r\n        DROP_TRIGGER            : 'DROP TRIGGER {2} `{0}`.`{1}`',\r\n        DROP_EVENT              : 'DROP EVENT {2} `{0}`.`{1}`',\r\n        DROP_VIEW               : 'DROP VIEW {2} `{0}`.`{1}`',\r\n        SHOW_PROCEDURES         : 'SHOW PROCEDURE STATUS WHERE DB = \"{0}\"',\r\n        SHOW_FUNCTIONS          : 'SHOW FUNCTION STATUS WHERE DB = \"{0}\"',\r\n        SHOW_TRIGGERS           : 'SHOW TRIGGERS FROM `{0}`',\r\n        SHOW_EVENTS             : 'SELECT `Event_name`,`Definer`,`Event_type`,`Execute_at`,`Interval_value`,`Interval_field`,`Starts`,`Ends`,`Status` FROM `INFORMATION_SCHEMA`.`EVENTS` WHERE `EVENT_SCHEMA` = \"{0}\"',\r\n        SHOW_VIEWS              : 'SELECT `TABLE_NAME` AS View_name,`View_definition`,`Check_option`,`Is_updatable`,`Definer`,`Security_type` FROM `INFORMATION_SCHEMA`.`VIEWS` WHERE `TABLE_SCHEMA` = \"{0}\"',\r\n        SHOW_DATABASE_DDL       : 'SHOW CREATE DATABASE `{0}`',\r\n        SHOW_ALL_TABLE_STATUS   : 'SHOW TABLE STATUS FROM `{0}` WHERE ENGINE IS NOT NULL',\r\n        SHOW_TABLE_STATUS       : 'SHOW TABLE STATUS FROM `{0}` like \"{1}\"',\r\n        CHANGE_TABLE_TYPE       : 'ALTER TABLE `{0}`.`{1}` ENGINE = {2}',\r\n        INSERT_TABLE            : 'INSERT INTO `{0}`.`{1}` ({2}) VALUES({3});',\r\n        INSERT_TABLE_BULK       : 'INSERT INTO `{0}`.`{1}` ({2}) VALUES {3};',\r\n        INSERT_ON_DUPLICATE     : 'INSERT INTO `{0}`.`{1}` ({2}) VALUES({3}) ON DUPLICATE KEY UPDATE {4}',\r\n        UPDATE_TABLE            : 'UPDATE `{0}`.`{1}` SET {2} WHERE {3};',\r\n        DELETE_TABLE            : 'DELETE FROM `{0}`.`{1}` WHERE {2};',\r\n        SELECT_TABLE            : 'SELECT {2} FROM `{0}`.`{1}` {3};',\r\n        TRUNCATE_TABLE          : 'TRUNCATE TABLE `{0}`.`{1}`',\r\n        RENAME_TABLE            : 'RENAME TABLE `{0}`.`{1}` TO `{2}`.`{3}`',\r\n        DROP_TABLE              : 'DROP TABLE {2} `{0}`.`{1}`',\r\n        TABLE_CREATE_INFO       : 'SHOW CREATE TABLE `{0}`.`{1}`',\r\n        TABLE_KEYS_INFO         : 'SHOW KEYS FROM `{0}`.`{1}`',\r\n        INDEX_KEYS_INFO         : 'SHOW KEYS FROM `{0}`.`{1}` WHERE key_name=\"{2}\"',\r\n        CREATE_PROCEDURE        : 'DELIMITER $$ \\nCREATE \\n/*[DEFINER = { user | CURRENT_USER }]*/ \\nPROCEDURE `{0}`.`{1}`() \\n\\n/* LANGUAGE SQL */\\n/* [NOT] DETERMINISTIC  { CONTAINS SQL | NO SQL | READS SQL DATA | MODIFIES SQL DATA } */\\n/* SQL SECURITY { DEFINER | INVOKER } */\\n/* COMMENT \\'string\\'*/ \\nBEGIN \\n\\n\\t/* SQL Statements */ \\n\\nEND$$ \\nDELIMITER ;',\r\n        CREATE_FUNCTION         : 'DELIMITER $$ \\nCREATE \\n/*[DEFINER = { user | CURRENT_USER }]*/ \\nFUNCTION `{0}`.`{1}`() \\nRETURNS INT /*{STRING|INTEGER|REAL|DECIMAL}*/ /*LANGUAGE SQL | [NOT] DETERMINISTIC | { CONTAINS SQL | NO SQL | READS SQL DATA | MODIFIES SQL DATA } | SQL SECURITY { DEFINER | INVOKER } | COMMENT \\'string\\'*/ \\nBEGIN \\n\\n\\t/* SQL Statements */ \\n\\nEND$$ \\nDELIMITER ;',\r\n        CREATE_TRIGGER          : 'DELIMITER $$ \\nCREATE \\n/*[DEFINER = { user | CURRENT_USER }]*/ \\nTRIGGER `{0}`.`{1}` \\nBEFORE \\n-- AFTER \\nINSERT \\n-- UPDATE \\n-- DELETE \\nON `{0}`.`<Table Name>` FOR EACH ROW \\nBEGIN  \\n\\n\\t/* SQL Statements */ \\n\\nEND$$ \\nDELIMITER ;',\r\n        CREATE_EVENT            : 'DELIMITER $$ \\n-- SET GLOBAL event_scheduler = ON$$ \\n-- required for event to execute but not create \\nCREATE \\n/*[DEFINER = { user | CURRENT_USER }]*/ \\nEVENT `{0}`.`{1}` \\nON SCHEDULE EVERY 1 HOUR /* uncomment the example below you want to use */ \\n-- scheduleexample 1: run once \\n-- AT \\'YYYY-MM-DD HH:MM.SS\\'/CURRENT_TIMESTAMP { + INTERVAL 1 [HOUR|MONTH|WEEK|DAY|MINUTE|...] } \\n-- scheduleexample 2: run at intervals forever after creation \\n-- scheduleexample 3: specified start time, end time and interval for execution \\n/* \\n\\tEVERY 1  [HOUR|MONTH|WEEK|DAY|MINUTE|...] \\n\\tSTARTS CURRENT_TIMESTAMP/\\'YYYY-MM-DD HH:MM.SS\\' { + INTERVAL 1[HOUR|MONTH|WEEK|DAY|MINUTE|...] } \\n\\tENDS CURRENT_TIMESTAMP/\\'YYYY-MM-DD HH:MM.SS\\' { + INTERVAL 1 [HOUR|MONTH|WEEK|DAY|MINUTE|...] } \\n*/ \\n/*[ON COMPLETION [NOT] PRESERVE] [ENABLE | DISABLE] */ \\n/* COMMENT \\'comment\\' */ \\nDO BEGIN \\n\\n\\t/* SQL Statements */ \\n\\nEND$$ \\nDELIMITER ;',\r\n        CREATE_VIEW             : 'CREATE \\n/* [ALGORITHM = {UNDEFINED | MERGE | TEMPTABLE}] */ \\n/* DEFINER = user | CURRENT_USER */  \\n/* SQL SECURITY { DEFINER | INVOKER }] */  \\nVIEW `{0}`.`{1}` AS  \\n/* SQL SELECT Statement */',\r\n        SHOW_CREATE_PROCEDURE   : 'SHOW CREATE PROCEDURE `{0}`.`{1}`',\r\n        SHOW_CREATE_TABLE       : 'SHOW CREATE TABLE `{0}`.`{1}`',\r\n        SHOW_CREATE_VIEW        : 'SHOW CREATE TABLE `{0}`.`{1}`',\r\n        SHOW_CREATE_FUNCTION    : 'SHOW CREATE FUNCTION `{0}`.`{1}`',\r\n        SHOW_CREATE_TRIGGER     : 'SHOW CREATE TRIGGER `{0}`.`{1}`',\r\n        SHOW_CREATE_EVENT       : 'SHOW CREATE EVENT `{0}`.`{1}`',\r\n        CREATE_TABLE            : 'CREATE TABLE `{0}`.`{1}` {2}',\r\n        ALTER_TABLE             : 'ALTER TABLE `{0}`.`{1}` {2}',\r\n        ALTER_VIEW              : 'DELIMITER $$ \\nUSE `{0}`$$ \\nDROP VIEW IF EXISTS `{1}`$$ \\n{2}$$ \\nDELIMITER;',\r\n        ALTER_PROCEDURE         : 'DELIMITER $$ \\nUSE `{0}`$$ \\nDROP PROCEDURE IF EXISTS `{1}`$$ \\n{2}$$ \\nDELIMITER;',\r\n        ALTER_FUNCTION          : 'DELIMITER $$ \\nUSE `{0}`$$ \\nDROP FUNCTION IF EXISTS `{1}`$$ \\n{2}$$ \\nDELIMITER;',\r\n        ALTER_TRIGGER           : 'DELIMITER $$ \\nUSE `{0}`$$ \\nDROP TRIGGER IF EXISTS `{1}`$$ \\n{2}$$ \\nDELIMITER;',\r\n        ALTER_EVENT             : 'DELIMITER $$ \\nUSE `{0}`$$ \\nDROP EVENT IF EXISTS `{1}`$$ \\n{2}$$ \\nDELIMITER;',\r\n        SHOW_PROCESS_LIST       : 'SHOW FULL PROCESSLIST',\r\n        SHOW_VARIABLES          : 'SHOW VARIABLES',\r\n        SHOW_STATUS             : 'SHOW STATUS',\r\n        SHOW_GLOBAL_STATUS      : 'SHOW GLOBAL STATUS',\r\n        SHOW_SESSION_STATUS     : 'SHOW SESSION STATUS',\r\n        CREATE_DATABASE         : 'CREATE DATABASE `{0}` CHARACTER SET {1} COLLATE {2}',\r\n        ALTER_DATABASE          : 'ALTER DATABASE `{0}` CHARACTER SET {1} COLLATE {2}',\r\n        DROP_DATABASE           : 'DROP DATABASE `{0}`',\r\n        SHOW_CHARSET            : 'SHOW CHARSET',\r\n        SHOW_COLLATION          : 'SHOW COLLATION',\r\n        SHOW_COLUMNS            : 'SHOW FULL COLUMNS FROM `{0}`.`{1}`',\r\n        CHARSET_DATABASE        : 'SHOW VARIABLES LIKE \\'character_set_database\\'',\r\n        COLLATION_DATABASE      : 'SHOW VARIABLES LIKE \\'collation_database\\'',\r\n        KILL_QUERY              : 'KILL {0}',\r\n        SHOW_DATABASES          : 'SHOW DATABASES',\r\n        COPY_TABLE_STRUCTURE    : 'CREATE TABLE `{2}`.`{3}` LIKE `{0}`.`{1}`',\r\n        COPY_TABLE_DATA         : 'INSERT `{2}`.`{3}` SELECT * FROM `{0}`.`{1}`'\r\n\r\n    };\r\n\r\n    var joins = [\r\n        'NATURAL JOIN', 'INNER JOIN', 'LFET INNER JOIN', 'RIGHT INNER JOIN', 'LEFT OUTER JOIN',\r\n        'LEFT JOIN', 'RIGHT OUTER JOIN', 'RIGHT JOIN', 'CROSS JOIN', 'JOIN', 'FROM'\r\n    ];\r\n\r\n    var etc = [\r\n        'ON DUPLICATE KEY UPDATE'\r\n    ];\r\n\r\n    var functions = [\r\n        'ABS', 'ACOS', 'ADDDATE', 'ADDTIME', 'AES_DECRYPT',\r\n        'AES_ENCRYPT', 'AREA', 'ASBINARY', 'ASWKB', 'ASCII',\r\n        'ASIN', 'ASTEXT', 'ASWKT', 'ATAN2', 'ATAN',\r\n        'ATAN', 'AVG', 'BDMPOLYFROMTEXT', 'BDMPOLYFROMWKB', 'BDPOLYFROMTEXT',\r\n        'BDPOLYFROMWKB', 'BENCHMARK', 'BIN', 'BINARY', 'BIT_AND',\r\n        'BIT_COUNT', 'BIT_LENGTH', 'BIT_OR', 'BIT_XOR', 'BOUNDARY',\r\n        'BUFFER', 'CAST', 'CEIL', 'CEILING', 'CHAR_LENGTH',\r\n        'CHAR', 'CHARACTER_LENGTH', 'CHARSET', 'COALESCE', 'COERCIBILITY',\r\n        'COLLATION', 'COMPRESS', 'CONCAT_WS', 'CONCAT', 'CONNECTION_ID',\r\n        'CONTAINS', 'CONV', 'CONVERT_TZ', 'CONVERT', 'COS',\r\n        'COT', 'COUNT', 'CRC32', 'CROSSES', 'CURDATE',\r\n        'CURRENT_DATE', 'CURRENT_TIME', 'CURRENT_TIMESTAMP', 'CURRENT_USER',\r\n        'CURTIME', 'DATABASE', 'DATE_ADD', 'DATE_FORMAT', 'DATE_SUB',\r\n        'DATE', 'DATEDIFF', 'DAY', 'DAYNAME', 'DAYOFMONTH',\r\n        'DAYOFWEEK', 'DAYOFYEAR', 'DECODE', 'DEFAULT', 'DEGREES',\r\n        'DES_DECRYPT', 'DES_ENCRYPT', 'DIMENSION', 'DISJOINT', 'DIV',\r\n        'ELT', 'ENCODE', 'ENCRYPT', 'ENDPOINT', 'ENVELOPE',\r\n        'EQUALS', 'EXP', 'EXPORT_SET', 'EXTERIORRING', 'EXTRACT',\r\n        'EXTRACTVALUE', 'FIELD', 'FIND_IN_SET', 'FLOOR', 'FORMAT',\r\n        'FOUND_ROWS', 'FROM_BASE64', 'FROM_DAYS', 'FROM_UNIXTIME', 'GEOMCOLLFROMTEXT',\r\n        'GEOMETRYCOLLECTIONFROMTEXT', 'GEOMCOLLFROMWKB', 'GEOMETRYCOLLECTIONFROMWKB', 'GEOMETRYCOLLECTION', 'GEOMETRYN',\r\n        'GEOMETRYTYPE', 'GEOMFROMTEXT', 'GEOMETRYFROMTEXT', 'GEOMFROMWKB', 'GET_FORMAT',\r\n        'GET_LOCK', 'GLENGTH', 'GREATEST', 'GROUP_CONCAT', 'GTID_SUBSET',\r\n        'GTID_SUBTRACT', 'HEX', 'HOUR', 'IF', 'IFNULL',\r\n        'IN', 'INET_ATON', 'INET_NTOA', 'INET6_ATON', 'INET6_NTOA',\r\n        'INSERT', 'INSTR', 'INTERIORRINGN', 'INTERSECTS', 'INTERVAL',\r\n        'IS_FREE_LOCK', 'IS_IPV4_COMPAT', 'IS_IPV4_MAPPED', 'IS_IPV4', 'IS_IPV6',\r\n        'IS_USED_LOCK', 'ISCLOSED', 'ISEMPTY', 'ISNULL', 'ISSIMPLE',\r\n        'LAST_DAY', 'LAST_INSERT_ID', 'LCASE', 'LEAST', 'LEFT',\r\n        'LENGTH', 'LINEFROMTEXT', 'LINEFROMWKB', 'LINESTRINGFROMWKB', 'LINESTRING',\r\n        'LN', 'LOAD_FILE', 'LOCALTIME', 'LOCALTIME', 'LOCALTIMESTAMP',\r\n        'LOCALTIMESTAMP', 'LOCATE', 'LOG10', 'LOG2', 'LOG',\r\n        'LOWER', 'LPAD', 'LTRIM', 'MAKE_SET', 'MAKEDATE',\r\n        'MAKETIME', 'MASTER_POS_WAIT', 'MAX', 'MBRCONTAINS', 'MBRDISJOINT',\r\n        'MBREQUAL', 'MBRINTERSECTS', 'MBROVERLAPS', 'MBRTOUCHES', 'MBRWITHIN',\r\n        'MD5', 'MICROSECOND', 'MID', 'MIN', 'MINUTE',\r\n        'MLINEFROMTEXT', 'MULTILINESTRINGFROMTEXT', 'MLINEFROMWKB', 'MULTILINESTRINGFROMWKB', 'MOD',\r\n        'MONTH', 'MONTHNAME', 'MPOINTFROMTEXT', 'MULTIPOINTFROMTEXT', 'MPOINTFROMWKB',\r\n        'MULTIPOINTFROMWKB', 'MPOLYFROMTEXT', 'MULTIPOLYGONFROMTEXT', 'MPOLYFROMWKB', 'MULTIPOLYGONFROMWKB',\r\n        'MULTILINESTRING', 'MULTIPOINT', 'MULTIPOLYGON', 'NAME_CONST', 'NOT',\r\n        'IN', 'NOW', 'NULLIF', 'NUMGEOMETRIES', 'NUMINTERIORRINGS',\r\n        'NUMPOINTS', 'OCT', 'OCTET_LENGTH', 'OLD_PASSWORD', 'ORD',\r\n        'OVERLAPS', 'PASSWORD', 'PERIOD_ADD', 'PERIOD_DIFF', 'PI',\r\n        'POINT', 'POINTFROMTEXT', 'POINTFROMWKB', 'POINTN', 'POLYFROMTEXT',\r\n        'POLYGONFROMTEXT', 'POLYFROMWKB', 'POLYGONFROMWKB', 'POLYGON', 'POSITION',\r\n        'POW', 'POWER', 'PROCEDURE', 'ANALYSE', 'QUARTER',\r\n        'QUOTE', 'RADIANS', 'RAND', 'RANDOM_BYTES', 'REGEXP',\r\n        'RELEASE_LOCK', 'REPEAT', 'REPLACE', 'REVERSE', 'RIGHT',\r\n        'RLIKE', 'ROUND', 'ROW_COUNT', 'RPAD', 'RTRIM',\r\n        'SCHEMA', 'SEC_TO_TIME', 'SECOND', 'SESSION_USER', 'SHA1',\r\n        'SHA', 'SHA2', 'SIGN', 'SIN', 'SLEEP',\r\n        'SOUNDEX', 'SPACE', 'SQRT', 'SRID', 'ST_CONTAINS',\r\n        'ST_CROSSES', 'ST_DISJOINT', 'ST_EQUALS', 'ST_INTERSECTS', 'ST_OVERLAPS',\r\n        'ST_TOUCHES', 'ST_WITHIN', 'STARTPOINT', 'STD', 'STDDEV_POP',\r\n        'STDDEV_SAMP', 'STDDEV', 'STR_TO_DATE', 'STRCMP', 'SUBDATE',\r\n        'SUBSTR', 'SUBSTRING_INDEX', 'SUBSTRING', 'SUBTIME', 'SUM',\r\n        'SYSDATE', 'SYSTEM_USER', 'TAN', 'TIME_FORMAT', 'TIME_TO_SEC',\r\n        'TIME', 'TIMEDIFF', 'TIMESTAMP', 'TIMESTAMPADD', 'TIMESTAMPDIFF',\r\n        'TO_BASE64', 'TO_DAYS', 'TO_SECONDS', 'TOUCHES', 'TRIM',\r\n        'TRUNCATE', 'UCASE', 'UNCOMPRESS', 'UNCOMPRESSED_LENGTH', 'UNHEX',\r\n        'UNIX_TIMESTAMP', 'UPDATEXML', 'UPPER', 'USER', 'UTC_DATE',\r\n        'UTC_TIME', 'UTC_TIMESTAMP', 'UUID_SHORT', 'UUID', 'VALIDATE_PASSWORD_STRENGTH',\r\n        'VAR_POP', 'VAR_SAMP', 'VARIANCE', 'VERSION', 'WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS',\r\n        'WEEK', 'WEEKDAY', 'WEEKOFYEAR', 'WEIGHT_STRING', 'WITHIN',\r\n        'X', 'Y', 'YEAR', 'YEARWEEK'\r\n    ];\r\n\r\n    var reserved_words = [\r\n        'ACCESSIBLE', 'ADD', 'ALL', 'ALTER', 'ANALYZE',\r\n        'AND', 'AS', 'ASC', 'ASENSITIVE', 'BEFORE',\r\n        'BETWEEN', 'BIGINT', 'BINARY', 'BLOB', 'BOTH',\r\n        'BY', 'CALL', 'CASCADE', 'CASE', 'CHANGE',\r\n        'CHAR', 'CHARACTER', 'CHECK', 'COLLATE', 'COLUMN',\r\n        'CONDITION', 'CONSTRAINT', 'CONTINUE', 'CONVERT', 'CREATE',\r\n        'CROSS', 'CURRENT_DATE', 'CURRENT_TIME', 'CURRENT_TIMESTAMP', 'CURRENT_USER',\r\n        'CURSOR', 'DATABASE', 'DATABASES', 'DAY_HOUR', 'DAY_MICROSECOND',\r\n        'DAY_MINUTE', 'DAY_SECOND', 'DEC', 'DECIMAL', 'DECLARE',\r\n        'DEFAULT', 'DELAYED', 'DELETE', 'DESC', 'DESCRIBE',\r\n        'DETERMINISTIC', 'DISTINCT', 'DISTINCTROW', 'DIV', 'DOUBLE',\r\n        'DROP', 'DUAL', 'DUPLICATE', 'EACH', 'ELSE',\r\n        'ELSEIF', 'ENCLOSED', 'ESCAPED', 'EXISTS', 'EXIT',\r\n        'EXPLAIN', 'FALSE', 'FETCH', 'FLOAT', 'FLOAT4',\r\n        'FLOAT8', 'FOR', 'FORCE', 'FOREIGN',\r\n        'FULLTEXT', 'GET', 'GRANT', 'GROUP BY', 'GROUP', 'HAVING',\r\n        'HIGH_PRIORITY', 'HOUR_MICROSECOND', 'HOUR_MINUTE', 'HOUR_SECOND', 'IF',\r\n        'IGNORE', 'IN', 'INDEX', 'INFILE', 'INNER',\r\n        'INOUT', 'INSENSITIVE', 'INSERT INTO', 'INSERT', 'INT', 'INT1',\r\n        'INT2', 'INT3', 'INT4', 'INT8', 'INTEGER',\r\n        'INTERVAL', 'INTO', 'IO_AFTER_GTIDS', 'IO_BEFORE_GTIDS', 'IS',\r\n        'ITERATE', 'JOIN', 'KEY UPDATE', 'KEY', 'KEYS', 'KILL',\r\n        'LEADING', 'LEAVE', 'LEFT', 'LIKE', 'LIMIT',\r\n        'LINEAR', 'LINES', 'LOAD', 'LOCALTIME', 'LOCALTIMESTAMP',\r\n        'LOCK', 'LONG', 'LONGBLOB', 'LONGTEXT', 'LOOP',\r\n        'LOW_PRIORITY', 'MASTER_BIND', 'MASTER_SSL_VERIFY_SERVER_CERT', 'MATCH', 'MAXVALUE',\r\n        'MEDIUMBLOB', 'MEDIUMINT', 'MEDIUMTEXT', 'MIDDLEINT', 'MINUTE_MICROSECOND',\r\n        'MINUTE_SECOND', 'MOD', 'MODIFIES', 'NATURAL', 'NOT',\r\n        'NO_WRITE_TO_BINLOG', 'NULL', 'NUMERIC', 'ON DUPLICATE KEY UPDATE', 'ON', 'OPTIMIZE',\r\n        'OPTION', 'OPTIONALLY', 'OR', 'ORDER BY', 'ORDER', 'OUT',\r\n        'OUTER', 'OUTFILE', 'PARTITION', 'PRECISION', 'PRIMARY',\r\n        'PROCEDURE', 'PURGE', 'RANGE', 'READ', 'READS',\r\n        'READ_WRITE', 'REAL', 'REFERENCES', 'REGEXP', 'RELEASE',\r\n        'RENAME', 'REPEAT', 'REPLACE', 'REQUIRE', 'RESIGNAL',\r\n        'RESTRICT', 'RETURN', 'REVOKE', 'RIGHT', 'RLIKE',\r\n        'SCHEMA', 'SCHEMAS', 'SECOND_MICROSECOND', 'SELECT', 'SENSITIVE',\r\n        'SEPARATOR', 'SET', 'SHOW', 'SIGNAL', 'SMALLINT',\r\n        'SPATIAL', 'SPECIFIC', 'SQL', 'SQLEXCEPTION', 'SQLSTATE',\r\n        'SQLWARNING', 'SQL_BIG_RESULT', 'SQL_CALC_FOUND_ROWS', 'SQL_SMALL_RESULT', 'SSL',\r\n        'STARTING', 'STRAIGHT_JOIN', 'TABLE', 'TERMINATED', 'THEN',\r\n        'TINYBLOB', 'TINYINT', 'TINYTEXT', 'TO', 'TRAILING',\r\n        'TRIGGER', 'TRUE', 'UNDO', 'UNION', 'UNIQUE',\r\n        'UNLOCK', 'UNSIGNED', 'UPDATE', 'USAGE', 'USE',\r\n        'USING', 'UTC_DATE', 'UTC_TIME', 'UTC_TIMESTAMP', 'VALUES',\r\n        'VARBINARY', 'VARCHAR', 'VARCHARACTER', 'VARYING', 'WHEN',\r\n        'WHERE', 'WHILE', 'WITH', 'WRITE', 'XOR',\r\n        'YEAR_MONTH', 'ZEROFILL', 'BEGIN', 'END'\r\n    ];\r\n\r\n    var detect_keyword = [\r\n        'INSERT', 'INTO', 'UPDATE', 'FROM', 'JOIN',\r\n        'TABLE', 'PROCEDURE', 'FUNCTION', 'VIEW', 'TRIGGER',\r\n        'EVENT'\r\n    ];\r\n\r\n    var not_select_queries = [\r\n        \"UPDATE\", \"CREATE\", \"DELETE\", \"INSERT\", \"ALTER\", \"DROP\"\r\n    ];\r\n\r\n    var data_types = [\r\n        'tinyint', 'int', 'varchar', 'float', 'double',\r\n        'timestamp', 'bit', 'bigint', 'mediumint', 'date',\r\n        'time', 'datetime', 'year', 'date', 'enum',\r\n        'set', 'tinyblob', 'mediumblob', 'longblob', 'blob',\r\n        'varchar', 'char', 'geometr'\r\n    ];\r\n\r\n    //var strs = \"\";\r\n    //Ext.Array.each(data_types, function(name, idx) {\r\n    //\r\n    //    strs += \"'\" + name + \"', \";\r\n    //\r\n    //    if ((idx + 1) % 5 === 0 && idx > 0) {\r\n    //\r\n    //        strs += \"\\n\";\r\n    //    }\r\n    //});\r\n    //\r\n    //console.log(strs);\r\n\r\n    var regexpLimit = \"LIMIT\\\\s*[0-9]+(\\\\s*,\\\\s*[0-9]+)?\";\r\n\r\n    return {\r\n        singleton         : true,\r\n        constructor       : function(config) {\r\n\r\n\r\n            this.callParent(arguments);\r\n        },\r\n        getQuery          : function(query) {\r\n\r\n            var args = Ext.Array.slice(arguments, 1);\r\n            args.unshift(queries[query]);\r\n\r\n            return Ext.String.format.apply(this, args);\r\n        },\r\n        getDataTypes      : function() {\r\n\r\n            return data_types;\r\n        },\r\n        getDataTypesToJSON: function() {\r\n\r\n            var json = [];\r\n\r\n            Ext.Array.each(data_types, function(type, idx) {\r\n\r\n                json.push([type, type]);\r\n            });\r\n\r\n            return json;\r\n        },\r\n\r\n        getDetectKeywords: function() {\r\n\r\n            return detect_keyword;\r\n        },\r\n\r\n        getNotSelectQueries: function() {\r\n\r\n            return not_select_queries;\r\n        },\r\n\r\n        getFunctions: function() {\r\n\r\n            return functions;\r\n        },\r\n\r\n        getReservedWords: function() {\r\n\r\n            return reserved_words;\r\n        },\r\n\r\n        getJoins: function() {\r\n\r\n            return joins;\r\n        },\r\n\r\n        getRegexpLimit: function() {\r\n\r\n            return regexpLimit;\r\n        }\r\n    }\r\n})\r\n;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/dbms/mysql.js\n// module id = 4\n// module chunks = 0","Ext.define('Planche.lib.QuickCommand', {\r\n    constructor: function() {\r\n\r\n        this.init();\r\n    },\r\n\r\n    init : function(){\r\n\r\n        this.commands = [];\r\n    },\r\n\r\n    append: function(command) {\r\n\r\n        this.commands.push(command);\r\n    },\r\n\r\n    get: function() {\r\n\r\n        return this.commands;\r\n    }\r\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/lib/QuickCommand.js\n// module id = 5\n// module chunks = 0","Ext.define('Planche.lib.SchemaUtil', {\n    singleton            : true,\n    alternateClassName   : ['Planche.SchemaUtil'],\n    exportAllSchemaToHTML: function(db, cmp, updateMethod) {\n\n        var app = Planche.getApplication(),\n            api = app.getAPIS(),\n            queries = {\n                'Table Information'    : api.getQuery('SHOW_ALL_TABLE_STATUS', db),\n                'View Information'     : api.getQuery('SHOW_VIEWS', db),\n                'Procedure Information': api.getQuery('SHOW_PROCEDURES', db),\n                'Function Information' : api.getQuery('SHOW_FUNCTIONS', db),\n                'Trigger Information'  : api.getQuery('SHOW_TRIGGERS', db),\n                'Event Information'    : api.getQuery('SHOW_EVENTS', db),\n                'Create Database DDL'  : api.getQuery('SHOW_DATABASE_DDL', db)\n            },\n            keys = Ext.Object.getKeys(queries),\n            html = [],\n            tunneling;\n\n        cmp['setLoading'](true);\n\n        (tunneling = Ext.Function.bind(function() {\n\n            var key = keys.shift();\n            if (key) {\n\n                app.tunneling({\n                    db     : db,\n                    query  : queries[key],\n                    success: function(config, response) {\n\n                        html.push('<h3>' + key + '</h3>');\n                        if (key == 'Create Database DDL') {\n\n                            html.push('<div class=\"info\">' + response.records[0][1].replace(/\\n/gi, '<br/>') + '</div>');\n                        }\n                        else if (key.match(/^Table Schema/)) {\n\n                            html.push('<div class=\"info\">' + response.records[0][1].replace(/\\n/gi, '<br/>') + '</div>');\n                        }\n                        else {\n\n                            if (key == 'Table Information') {\n\n                                response.records.map(function(row, idx) {\n\n                                    queries['Table Schema - ' + row[0]] = api.getQuery('TABLE_CREATE_INFO', db, row[0]);\n                                    keys.unshift('Table Schema - ' + row[0]);\n\n                                    queries['Table Indexes - ' + row[0]] = api.getQuery('INDEX_KEYS_INFO', db, row[0]);\n                                    keys.unshift('Table Indexes - ' + row[0]);\n\n                                    queries['Table Fields - ' + row[0]] = api.getQuery('SHOW_COLUMNS', db, row[0]);\n                                    keys.unshift('Table Fields - ' + row[0]);\n                                });\n                            }\n\n                            html.push(Planche.SchemaUtil.generateRecordToHTML(response));\n                        }\n                        tunneling();\n                    },\n                    failure: function(config, response) {\n\n                        html.push('<h3>' + key + '</h3>');\n                        html.push(app.generateQueryErrorMsg(config.query, response.message));\n                        tunneling();\n                    }\n                });\n            }\n            else {\n\n                cmp[updateMethod](html.join(\"\"));\n                cmp['setLoading'](false);\n            }\n\n        }, this))();\n    },\n\n    exportRootInfoToHTML: function(db, nodeName, cmp, updateMethod) {\n\n        var app = Planche.getApplication(),\n            api = app.getAPIS(),\n            queries = {\n                'Show Databases': api.getQuery('SHOW_DATABASES')\n            },\n            keys = Ext.Object.getKeys(queries),\n            html = [],\n            tunneling;\n\n        cmp['setLoading'](true);\n\n        (tunneling = Ext.Function.bind(function() {\n\n            var key = keys.shift();\n            if (key) {\n\n                app.tunneling({\n                    db     : db,\n                    query  : queries[key],\n                    success: function(config, response) {\n\n                        html.push('<h3>' + key + '</h3>');\n                        html.push(Planche.SchemaUtil.generateRecordToHTML(response));\n                        tunneling();\n                    },\n                    failure: function(config, response) {\n\n                        html.push('<h3>' + key + '</h3>');\n                        html.push(app.generateQueryErrorMsg(config.query, response.message));\n                        tunneling();\n                    }\n                });\n            }\n            else {\n\n                cmp[updateMethod](html.join(\"\"));\n                cmp['setLoading'](false);\n            }\n\n        }, this))();\n    },\n\n    exportDatabaseInfoToHTML: function(db, nodeName, cmp, updateMethod) {\n\n        var app = Planche.getApplication(),\n            api = app.getAPIS(),\n            queries = {\n                'Table Information'    : api.getQuery('SHOW_ALL_TABLE_STATUS', db),\n                'View Information'     : api.getQuery('SHOW_VIEWS', db),\n                'Procedure Information': api.getQuery('SHOW_PROCEDURES', db),\n                'Function Information' : api.getQuery('SHOW_FUNCTIONS', db),\n                'Trigger Information'  : api.getQuery('SHOW_TRIGGERS', db),\n                'Event Information'    : api.getQuery('SHOW_EVENTS', db),\n                'Create Database DDL'  : api.getQuery('SHOW_DATABASE_DDL', db)\n            },\n            keys = Ext.Object.getKeys(queries),\n            html = [],\n            tunneling;\n\n        cmp['setLoading'](true);\n\n        (tunneling = Ext.Function.bind(function() {\n\n            var key = keys.shift();\n            if (key) {\n\n                app.tunneling({\n                    db     : db,\n                    query  : queries[key],\n                    success: function(config, response) {\n\n                        html.push('<h3>' + key + '</h3>');\n                        if (key == 'Create Database DDL') {\n\n                            html.push('<div class=\"info\">' + response.records[0][1].replace(/\\n/gi, '<br/>') + '</div>');\n                        }\n                        else {\n\n                            html.push(Planche.SchemaUtil.generateRecordToHTML(response));\n                        }\n                        tunneling();\n                    },\n                    failure: function(config, response) {\n\n                        html.push('<h3>' + key + '</h3>');\n                        html.push(app.generateQueryErrorMsg(config.query, response.message));\n                        tunneling();\n                    }\n                });\n            }\n            else {\n\n                cmp[updateMethod](html.join(\"\"));\n                cmp['setLoading'](false);\n            }\n\n        }, this))();\n    },\n\n    exportTablesInfoToHTML: function(db, nodeName, cmp, updateMethod) {\n\n        var app = Planche.getApplication(),\n            api = app.getAPIS(),\n            queries = {\n                'Show Table Status': api.getQuery('SHOW_ALL_TABLE_STATUS', db)\n            },\n            keys = Ext.Object.getKeys(queries),\n            html = [],\n            tunneling;\n\n        cmp['setLoading'](true);\n\n        (tunneling = Ext.Function.bind(function() {\n\n            var key = keys.shift();\n            if (key) {\n\n                app.tunneling({\n                    db     : db,\n                    query  : queries[key],\n                    success: function(config, response) {\n\n                        html.push('<h3>' + key + '</h3>');\n                        html.push(Planche.SchemaUtil.generateRecordToHTML(response));\n                        tunneling();\n                    },\n                    failure: function(config, response) {\n\n                        html.push('<h3>' + key + '</h3>');\n                        html.push(app.generateQueryErrorMsg(config.query, response.message));\n                        tunneling();\n                    }\n                });\n            }\n            else {\n\n                cmp[updateMethod](html.join(\"\"));\n                cmp['setLoading'](false);\n            }\n\n        }, this))();\n    },\n\n    exportTableInfoToHTML: function(db, table, cmp, updateMethod) {\n\n        var app = Planche.getApplication(),\n            api = app.getAPIS(),\n            queries = {\n                'Show Table Fields' : api.getQuery('SHOW_FULL_FIELDS', db, table),\n                'Show Table Indexes': api.getQuery('TABLE_KEYS_INFO', db, table),\n                'Create Table DDL'  : api.getQuery('TABLE_CREATE_INFO', db, table)\n            },\n            keys = Ext.Object.getKeys(queries),\n            html = [],\n            tunneling;\n\n        cmp['setLoading'](true);\n        (tunneling = Ext.Function.bind(function() {\n\n            var key = keys.shift();\n            if (key) {\n\n                app.tunneling({\n                    db     : db,\n                    query  : queries[key],\n                    success: function(config, response) {\n\n                        html.push('<h3>' + key + '</h3>');\n\n                        if (key == 'Create Table DDL') {\n\n                            if (response.records.length == 0) {\n\n                                html.push(app.generateQueryErrorMsg(config.query, 'Empty'));\n                            }\n                            else {\n\n                                html.push('<div class=\"info\">' + response.records[0][1].replace(/\\n/gi, '<br/>') + '</div>');\n                            }\n                        }\n                        else {\n\n                            html.push(Planche.SchemaUtil.generateRecordToHTML(response));\n                        }\n\n                        tunneling();\n                    },\n                    failure: function(config, response) {\n\n                        html.push('<h3>' + key + '</h3>');\n                        html.push(app.generateQueryErrorMsg(config.query, response.message));\n                        tunneling();\n                    }\n                });\n            }\n            else {\n\n                cmp[updateMethod](html.join(\"\"));\n                cmp['setLoading'](false);\n            }\n\n        }, this))();\n    },\n\n    exportColumnsInfoToHTML: function(db, table, cmp, updateMethod) {\n\n        var app = Planche.getApplication(),\n            api = app.getAPIS(),\n            queries = {\n                'Show Table Fields': api.getQuery('SHOW_FULL_FIELDS', db, table)\n            },\n            keys = Ext.Object.getKeys(queries),\n            html = [],\n            tunneling;\n\n        cmp['setLoading'](true);\n\n        (tunneling = Ext.Function.bind(function() {\n\n            var key = keys.shift();\n            if (key) {\n\n                app.tunneling({\n                    db     : db,\n                    query  : queries[key],\n                    success: function(config, response) {\n\n                        html.push('<h3>' + key + '</h3>');\n                        html.push(Planche.SchemaUtil.generateRecordToHTML(response));\n                        tunneling();\n                    },\n                    failure: function(config, response) {\n\n                        html.push('<h3>' + key + '</h3>');\n                        html.push(app.generateQueryErrorMsg(config.query, response.message));\n                        tunneling();\n                    }\n                });\n            }\n            else {\n\n                cmp[updateMethod](html.join(\"\"));\n                cmp['setLoading'](false);\n            }\n\n        }, this))();\n    },\n\n    exportIndexesInfoToHTML: function(db, table, cmp, updateMethod) {\n\n        var app = Planche.getApplication(),\n            api = app.getAPIS(),\n            queries = {\n                'Show Table Indexes': api.getQuery('TABLE_KEYS_INFO', db, table)\n            },\n            keys = Ext.Object.getKeys(queries),\n            html = [],\n            tunneling;\n\n        cmp['setLoading'](true);\n\n        (tunneling = Ext.Function.bind(function() {\n\n            var key = keys.shift();\n            if (key) {\n\n                app.tunneling({\n                    db     : db,\n                    query  : queries[key],\n                    success: function(config, response) {\n\n                        html.push('<h3>' + key + '</h3>');\n                        html.push(Planche.SchemaUtil.generateRecordToHTML(response));\n                        tunneling();\n                    },\n                    failure: function(config, response) {\n\n                        html.push('<h3>' + key + '</h3>');\n                        html.push(app.generateQueryErrorMsg(config.query, response.message));\n                        tunneling();\n                    }\n                });\n            }\n            else {\n\n                cmp[updateMethod](html.join(\"\"));\n                cmp['setLoading'](false);\n            }\n\n        }, this))();\n    },\n\n    generateRecordToHTML: function(record) {\n\n        var html = '';\n        html += '<table class=\"info\" width=\"100%\">';\n        html += '<tr>';\n        Ext.Array.each(record.fields, function(col, cidx) {\n\n            html += '<th>' + col.name + '</th>';\n        });\n        html += '</tr>';\n\n        if (record.records.length === 0) {\n\n            html += '<tr>';\n            html += '<td colspan=\"' + record.fields.length + '\">There\\'s no data to display</td>';\n            html += '</tr>';\n            html += '</table>';\n            return html;\n        }\n\n        Ext.Array.each(record.records, function(row, ridx) {\n\n            html += '<tr>';\n            Ext.Array.each(record.fields, function(col, cidx) {\n\n                html += '<td>' + row[cidx] + '</td>';\n            });\n            html += '</tr>';\n        });\n        html += '</table>';\n        return html;\n    }\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/lib/SchemaUtil.js\n// module id = 6\n// module chunks = 0","Ext.define('Planche.lib.QueryParser', {\r\n    constructor: function(engine) {\r\n\r\n        this.engine = engine;\r\n\r\n        this.type = Planche.lib.QueryTokenType.get();\r\n\r\n        this.defaultLimit = 100;\r\n        this.openComments = ['#', '-- ', '/*'];\r\n        this.closeComments = ['\\n', '\\n', '*/'];\r\n        this.boundaries = [\r\n            '`', '~', '!', '@', '#', '$', '%', '^', '&', '*', '()', '(', ')', '+', '-',\r\n            '=', '\\\\', '[', ']', '{', '}', ';', ':', '<', '>', ',', '.', '/', '?'\r\n        ];\r\n        this.comparison = ['=', '<=', '>=', '!=', '<>', '<', '>'];\r\n\r\n        var boundaries = this.addSlashes(this.boundaries).join(\"|\");\r\n\r\n        this.regexpWhiteSpace = new RegExp('^\\\\s+', 'g');\r\n        this.regexpTrim = new RegExp('(^\\\\s*)|(\\\\s*$)', 'gi');\r\n        this.regexpNotSelectQueries = new RegExp('^(' + this.engine.getNotSelectQueries().join(\"|\") + ')', \"gi\");\r\n        this.regexpBoundaries = new RegExp('^(' + boundaries + ')', \"g\");\r\n        this.regexpSplit = new RegExp('(' + boundaries + '|$|\\\\s)', \"g\");\r\n        this.regexpJoin = new RegExp('^(' + this.engine.getJoins().join(\"|\") + ')', \"gi\");\r\n        this.regexpLimit = new RegExp('^' + this.engine.getRegexpLimit(), \"gi\");\r\n\r\n        this.regexpDelimiter = new RegExp('^;', 'g');\r\n        this.regexpFunctions = new RegExp('^([a-zA-Z0-9_$.]+)\\\\(', \"gi\");\r\n        this.regexpReservedWords = new RegExp('^(' + this.engine.getReservedWords().join(\"|\") + ')($|\\\\s|' + boundaries + ')', \"i\");\r\n        this.regexpComparison = new RegExp('^(' + this.addSlashes(this.comparison).join(\"|\") + ')', \"g\");\r\n        this.regexpFunctions = new RegExp('^([a-zA-Z0-9_$.]+)\\\\(', \"gi\");\r\n\r\n        this.regexpBackTickQuotedString = /^\\`(?:[^\\`\\\\]|\\\\.)*\\`/;\r\n        this.regexpQuotedString = /^(\\'(?:[^\\'\\\\]|\\\\.)*\\'|\\\"(?:[^\\\"\\\\]|\\\\.)*\\\")/;\r\n\r\n        this.regexpReference = /(^[`]?[\\w.]+[`]?\\.[`]?[\\w.]+[`]?)|(^[`]?[\\w.]+[`]?)/;\r\n        this.regexpNumber = /^[0-9]+/;\r\n\r\n        this.regexpAlgorithm = /^ALGORITHM(\\s+)?=(\\s+)?[a-zA-Z]+/gi;\r\n        this.regexpDefiner = /^DEFINER(\\s+)?=(\\s+)?([`\\'\\\"]?)(.+?)\\3@?([`\\'\\\"]?)(.+?)\\5/gi;\r\n\r\n        this.space = ' ';\r\n        this.newln = '\\n';\r\n        this.tab = '\\t';\r\n    },\r\n\r\n    parse: function(string, delimiter) {\r\n\r\n        if (delimiter) {\r\n\r\n            this.regexpDelimiter = new RegExp(\"^\" + this.addSlashes(delimiter), 'g');\r\n        }\r\n\r\n        var tokens, queries, i;\r\n\r\n        tokens = this.tokenize(string);\r\n        queries = this.splitQuery(tokens);\r\n        queries = this.parseQuery(queries);\r\n\r\n        for (i in queries) {\r\n\r\n            queries[i] = Ext.create('Planche.lib.Query', queries[i]);\r\n        }\r\n\r\n        return queries;\r\n    },\r\n\r\n    tokenize: function(string) {\r\n\r\n        var len = string.length;\r\n        var tokens = [], token;\r\n        this.detect = false;\r\n\r\n        while (len) {\r\n\r\n            token = this.getNextToken(string);\r\n            string = string.substring(token.value.length);\r\n\r\n            //break infinity loop\r\n            if (len == string.length) {\r\n\r\n                break;\r\n            }\r\n            else {\r\n\r\n                len = string.length;\r\n            }\r\n\r\n            tokens.push(token);\r\n        }\r\n\r\n        return tokens;\r\n    },\r\n\r\n    getNextToken : function(string) {\r\n\r\n        var token = {}, matches;\r\n\r\n        if (matches = string.match(this.regexpWhiteSpace)) {\r\n\r\n            token.type = this.type.SPACE;\r\n            token.value = matches[0];\r\n            return token;\r\n        }\r\n\r\n        var cmts = this.openComments, cmt, i, inCmt = -1, pos;\r\n        for (i in cmts) {\r\n\r\n            cmt = cmts[i];\r\n\r\n            if (string.substring(0, cmt.length) == cmt) {\r\n\r\n                inCmt = i;\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (inCmt > -1) {\r\n\r\n            token.type = this.type.COMMENT;\r\n            pos = string.indexOf(this.closeComments[inCmt]);\r\n            if (pos > -1) {\r\n\r\n                token.value = string.substring(0, pos + this.closeComments[inCmt].length);\r\n            }\r\n            else {\r\n\r\n                token.value = string.substring(0);\r\n            }\r\n\r\n            return token;\r\n        }\r\n\r\n        if (matches = string.match(this.regexpDelimiter)) {\r\n\r\n            token.type = this.type.QUERY_END;\r\n            token.value = matches[0];\r\n            return token;\r\n        }\r\n\r\n        if (matches = string.match(this.regexpAlgorithm)) {\r\n\r\n            token.type = this.type.ALGORITHM;\r\n            token.value = matches[0];\r\n            return token;\r\n        }\r\n\r\n        if (matches = string.match(this.regexpDefiner)) {\r\n\r\n            token.type = this.type.DEFINER;\r\n            token.value = matches[0];\r\n            return token;\r\n        }\r\n\r\n        if (matches = string.match(this.regexpComparison)) {\r\n\r\n            token.type = this.type.COMPARISON;\r\n            token.value = matches[0];\r\n            return token;\r\n        }\r\n\r\n        if (matches = string.match(this.regexpJoin)) {\r\n\r\n            this.detect = true;\r\n\r\n            token.type = this.type.JOIN;\r\n            token.value = matches[0];\r\n            return token;\r\n        }\r\n\r\n        if (matches = string.match(this.regexpFunctions)) {\r\n\r\n            token.type = this.type.FUNCTION;\r\n\r\n            var value = matches[0];\r\n\r\n            string = string.substring(value.length);\r\n\r\n            var len          = string.length,\r\n                funcDepth    = 1,\r\n                funcToken    = {},\r\n                funcPos,\r\n                me           = this,\r\n                getNextToken = function(string) {\r\n\r\n                    // console.log(string);\r\n\r\n                    if (m = string.match(me.regexpWhiteSpace)) {\r\n\r\n                        return m[0];\r\n                    }\r\n\r\n                    if (m = string.match(me.regexpFunctions)) {\r\n\r\n                        funcDepth++;\r\n                        return m[0];\r\n                    }\r\n\r\n                    if (m = string.match(me.regexpQuotedString)) {\r\n\r\n                        return m[0];\r\n                    }\r\n\r\n                    if (m = string.match(me.regexpBoundaries)) {\r\n\r\n                        if (m[0] == '(') {\r\n\r\n                            funcDepth++;\r\n                        }\r\n                        else if (m[0] == ')') {\r\n\r\n                            funcDepth--;\r\n                        }\r\n\r\n                        return m[0];\r\n                    }\r\n\r\n                    if (funcPos = string.search(me.regexpSplit)) {\r\n\r\n                        if (m = string.match(me.regexpNumber)) {\r\n\r\n                            return string.substring(0, funcPos);\r\n                        }\r\n                        else {\r\n\r\n                            return string.substring(0, funcPos);\r\n                        }\r\n                    }\r\n                    else {\r\n\r\n                        return string;\r\n                    }\r\n                };\r\n\r\n            while (len) {\r\n\r\n                var funcToken = getNextToken(string);\r\n\r\n                value += funcToken;\r\n\r\n                string = string.substring(funcToken.length);\r\n\r\n                //break infinity loop\r\n                if (len == string.length) {\r\n\r\n                    break;\r\n                }\r\n                else {\r\n\r\n                    len = string.length;\r\n                }\r\n\r\n                if (funcDepth === 0) {\r\n\r\n                    break;\r\n                }\r\n            }\r\n\r\n\r\n            token.value = value;\r\n            return token;\r\n        }\r\n\r\n        if (matches = string.match(this.regexpLimit)) {\r\n\r\n            token.type = this.type.LIMIT;\r\n            token.value = matches[0];\r\n\r\n            return token;\r\n        }\r\n\r\n        if (matches = string.match(/^DELIMITER\\s?([^\\s]+)/i)) {\r\n\r\n            token.type = this.type.DELIMITER;\r\n            token.value = matches[0];\r\n\r\n            this.regexpDelimiter = new RegExp(\"^\" + this.addSlashes(matches[1]), 'g');\r\n\r\n            return token;\r\n        }\r\n\r\n        if (matches = string.match(this.regexpReservedWords)) {\r\n\r\n            this.detect = false;\r\n\r\n            var upper = matches[1].toUpperCase();\r\n\r\n            if (this.engine.getDetectKeywords().indexOf(upper) > -1) {\r\n\r\n                this.detect = upper;\r\n            }\r\n\r\n            token.type = this.type.RESERVED_WORD;\r\n            token.value = matches[1];\r\n            return token;\r\n        }\r\n\r\n        if (this.detect) {\r\n\r\n            if (matches = string.match(this.regexpReference)) {\r\n\r\n                token.type = this.type[this.detect] || this.type.TABLE;\r\n                token.value = matches[0];\r\n\r\n                //console.log(matches);\r\n                this.detect = false;\r\n\r\n                return token;\r\n            }\r\n        }\r\n\r\n        if (matches = string.match(this.regexpReference)) {\r\n\r\n            token.type = this.type.REFERENCE;\r\n            token.value = matches[0];\r\n\r\n            return token;\r\n        }\r\n\r\n        if (matches = string.match(this.regexpBackTickQuotedString)) {\r\n\r\n            token.type = this.type.BACKTICK_QUOTED_STRING;\r\n            token.value = matches[0];\r\n            return token;\r\n        }\r\n\r\n        if (matches = string.match(this.regexpQuotedString)) {\r\n\r\n            token.type = this.type.QUOTED_STRING;\r\n            token.value = matches[0];\r\n            return token;\r\n        }\r\n\r\n        if (matches = string.match(this.regexpBoundaries)) {\r\n\r\n            token.type = this.type.BOUNDARY;\r\n            token.value = matches[0];\r\n            return token;\r\n        }\r\n\r\n        if (pos = string.search(this.regexpSplit)) {\r\n\r\n            var value = string.substring(0, pos);\r\n\r\n            if (matches = string.match(this.regexpNumber)) {\r\n\r\n                token.type = this.type.NUMBER;\r\n                token.value = value;\r\n                return token;\r\n            }\r\n            else {\r\n\r\n                token.type = this.type.STRING;\r\n                token.value = value;\r\n                return token;\r\n            }\r\n        }\r\n        else {\r\n\r\n            var value = string;\r\n        }\r\n\r\n        token.type = this.type.STRING;\r\n        token.value = value;\r\n\r\n        return token;\r\n    },\r\n    addSlashes   : function(arr) {\r\n\r\n        if (typeof arr == 'string') {\r\n\r\n            return Ext.Array.map(arr.split(''), function(item, idx) {\r\n                return item.replace(/./g, '\\\\$&');\r\n            }).join('');\r\n        }\r\n        else {\r\n\r\n            return Ext.Array.map(arr, function(item, idx) {\r\n                return item.replace(/./g, '\\\\$&');\r\n            });\r\n        }\r\n    },\r\n    setLineCursor: function(tokens) {\r\n\r\n        var i, j, token, type, word, line = 0, cursor = 0;\r\n\r\n        for (i = 0 ; i < tokens.length ; i++) {\r\n\r\n            token = tokens[i];\r\n            type = token.type;\r\n            word = token.value;\r\n\r\n            token.sline = [line, cursor];\r\n\r\n            if (type == this.type.SPACE || type == this.type.LIMIT) {\r\n\r\n                for (j = 0 ; j < word.length ; j++) {\r\n\r\n                    chr = word[j];\r\n                    if (chr == this.newln) {\r\n\r\n                        line++;\r\n                        cursor = 0;\r\n                    }\r\n                    else {\r\n\r\n                        cursor++;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n\r\n                cursor += word.length;\r\n            }\r\n\r\n            token.eline = [line, cursor];\r\n        }\r\n\r\n        return tokens;\r\n    },\r\n\r\n    splitQuery: function(tokens) {\r\n\r\n        var queries = [], tmpTokens = [], raw = '', token, delimiter = false, sline = [0, 0], eline = [0, 0];\r\n\r\n        tokens = this.setLineCursor(tokens);\r\n        level = 1;\r\n\r\n        while (tokens.length) {\r\n\r\n            token = tokens.shift();\r\n\r\n            if (token.type == this.type.DELIMITER) {\r\n\r\n                if (tmpTokens.length > 0 && Ext.String.trim(raw)) {\r\n\r\n                    queries.push({raw: raw, sline: sline, eline: eline, tokens: tmpTokens, delimiter: false});\r\n                }\r\n\r\n                queries.push({\r\n                    raw      : token.value,\r\n                    sline    : token.sline,\r\n                    eline    : token.eline,\r\n                    tokens   : [token],\r\n                    delimiter: true\r\n                });\r\n\r\n                sline = token.eline;\r\n                tmpTokens = [];\r\n                raw = '';\r\n                continue;\r\n            }\r\n\r\n            if (token.type == this.type.QUERY_END) {\r\n\r\n                tmpTokens.push(token);\r\n\r\n                queries.push({raw: raw, sline: sline, eline: token.eline, tokens: tmpTokens, delimiter: false});\r\n\r\n                sline = token.eline;\r\n                tmpTokens = [];\r\n                raw = '';\r\n                continue;\r\n            }\r\n\r\n            tmpTokens.push(token);\r\n            raw += token.value;\r\n            eline = token.eline;\r\n        }\r\n\r\n        if (raw.replace(/\\s/g, \"\")) {\r\n\r\n            queries.push({raw: raw, sline: sline, eline: eline, tokens: tmpTokens});\r\n        }\r\n\r\n        return queries;\r\n    },\r\n\r\n    parseQuery: function(queries) {\r\n\r\n        var i, j, tokens, token, query, level, hasLimit,\r\n            value, type, matches, isSelectQuery, sql = '';\r\n\r\n        for (i in queries) {\r\n\r\n            level = 1;\r\n            hasLimit = false;\r\n            query = queries[i];\r\n\r\n            if (!query) return;\r\n\r\n            query.start = 0;\r\n            query.end = this.defaultLimit;\r\n\r\n            isSelectQuery = null;\r\n            sql = '';\r\n\r\n            for (j = 0 ; j < query.tokens.length ; j++) {\r\n\r\n                token = query.tokens[j];\r\n                value = token.value;\r\n                type = token.type;\r\n\r\n                if (type == this.type.DELIMITER) {\r\n\r\n                    isSelectQuery = null;\r\n                    sql += value;\r\n                    continue;\r\n                }\r\n\r\n                if (type == this.type.BOUNDARY) {\r\n\r\n                    if (value == \"(\") {\r\n\r\n                        level++;\r\n                    }\r\n\r\n                    if (value == \")\") {\r\n\r\n                        level--;\r\n                    }\r\n                    sql += value;\r\n                    continue;\r\n                }\r\n\r\n                if (isSelectQuery == null) {\r\n\r\n                    if (value.match(this.regexpNotSelectQueries)) {\r\n\r\n                        isSelectQuery = false;\r\n                    }\r\n                    else if (value.match(/^SELECT/gi)) {\r\n\r\n                        isSelectQuery = true;\r\n                    }\r\n\r\n                    query.isSelectQuery = isSelectQuery;\r\n\r\n                    sql += value;\r\n                    continue;\r\n                }\r\n\r\n                if (isSelectQuery === true && level == 1 && type == this.type.LIMIT) {\r\n\r\n                    hasLimit = true;\r\n                    matches = value.replace(/\\s+/g, '').match(/[0-9]+/g);\r\n                    if (matches.length == 2) {\r\n\r\n                        query.start = parseInt(matches[0], 10);\r\n                        query.end = parseInt(matches[1], 10);\r\n                    }\r\n                    else {\r\n\r\n                        query.start = 0;\r\n                        query.end = parseInt(matches[0], 10);\r\n                    }\r\n                }\r\n                else {\r\n\r\n                    if (type != this.type.QUERY_END) {\r\n\r\n                        sql += value;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (isSelectQuery === true && hasLimit === false) {\r\n\r\n                hasLimit = true;\r\n                query.start = 0;\r\n                query.end = this.defaultLimit;\r\n            }\r\n\r\n            query.hasLimit = hasLimit;\r\n            query.sql = sql;\r\n        }\r\n\r\n        return queries;\r\n    }\r\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/lib/QueryParser.js\n// module id = 7\n// module chunks = 0","Ext.define('Planche.lib.QueryTokenType', function() {\r\n\r\n    var type = {\r\n        STRING                : 0,\r\n        COMMENT               : 1,\r\n        SPACE                 : 2,\r\n        TOP_LEVEL             : 3,\r\n        JOIN                  : 4,\r\n        CONDITIONS            : 5,\r\n        FUNCTION              : 6,\r\n        BOUNDARY              : 7,\r\n        QUOTED_STRING         : 8,\r\n        DELIMITER             : 9,\r\n        QUERY_END             : 10,\r\n        LIMIT                 : 11,\r\n        COMPARISON            : 12,\r\n        RESERVED_WORD         : 13,\r\n        KEYWORD               : 14,\r\n        TABLE                 : 15,\r\n        NUMBER                : 16,\r\n        ALGORITHM             : 17,\r\n        DEFINER               : 18,\r\n        BACKTICK_QUOTED_STRING: 19,\r\n        PROCEDURE             : 20,\r\n        TRIGGER               : 21,\r\n        EVENT                 : 22,\r\n        FUNCTION              : 23,\r\n        VIEW                  : 24,\r\n        REFERENCE             : 25\r\n    };\r\n\r\n    return {\r\n        singleton  : true,\r\n        constructor: function(config) {\r\n\r\n            this.callParent(arguments);\r\n        },\r\n        get        : function() {\r\n\r\n            return type;\r\n        }\r\n    };\r\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/lib/QueryTokenType.js\n// module id = 8\n// module chunks = 0","Ext.define('Planche.lib.QueryAlignment', function() {\r\n\r\n    var type;\r\n\r\n    var independent_newline = [\r\n            'SELECT', 'WHERE', 'SET', 'ORDER BY', 'GROUP BY', 'VALUES',\r\n            'HAVING', 'BEGIN', 'END', 'INSERT INTO', 'INSERT', 'UPDATE', 'DELETE FROM', 'DELETE', 'DROP TABLE', 'CREATE TABLE', 'ALTER TABLE',\r\n            'NATURAL JOIN', 'INNER JOIN', 'LFET INNER JOIN', 'RIGHT INNER JOIN', 'LEFT OUTER JOIN',\r\n            'LEFT JOIN', 'RIGHT OUTER JOIN', 'RIGHT JOIN', 'CROSS JOIN', 'JOIN', 'FROM', 'ON DUPLICATE KEY UPDATE'\r\n        ],\r\n        independent_inline = [\r\n            'AND', 'OR', 'XOR', 'END', ','\r\n        ];\r\n\r\n    return {\r\n        requires : [\r\n            'Planche.lib.QueryTokenType'\r\n        ],\r\n        singleton  : true,\r\n        constructor: function(config) {\r\n\r\n            this.callParent(arguments);\r\n\r\n            type = Planche.lib.QueryTokenType.get();\r\n        },\r\n\r\n        equalLastChar: function(str, ch) {\r\n\r\n            return str.slice(str.length - 1) === ch;\r\n        },\r\n\r\n        alignment: function(query) {\r\n\r\n            var tokens = [];\r\n            Ext.Array.each(query.getTokens(), function(token, idx) {\r\n\r\n                //first remove spaces and new lines, whitespaces\r\n                if (token.type == type.SPACE) {\r\n\r\n                    return;\r\n                }\r\n\r\n                tokens.push(token);\r\n            });\r\n\r\n            var me = this,\r\n                tmpStr = '',\r\n                indentLevel = 1,\r\n                prevToken = {\r\n                    value: null,\r\n                    type : null\r\n                },\r\n                countColumn = 0;\r\n\r\n            Ext.Array.each(tokens, function(token, idx) {\r\n\r\n                var tokenVal = token.value,\r\n                    tokenValUCase = tokenVal.toUpperCase(),\r\n                    tokenType = token.type,\r\n                    nextToken = tokens[idx + 1] || {value: null, type: null},\r\n                    nextTokenType = nextToken.type,\r\n                    nextTokenVal = nextToken.value,\r\n                    prevTokenType = prevToken.type,\r\n                    prevTokenVal = prevToken.value;\r\n\r\n\r\n                //if (tokenType === type.JOIN) {\r\n                //\r\n                //    tmpStr += (me.equalLastChar(tmpStr, '\\n') ? '' : '\\n') + (new Array(indentLevel).join(\"\\t\"));\r\n                //\r\n                //    if (nextToken.type === type.TABLE) {\r\n                //\r\n                //        tmpStr += tokenValUCase + \" \";\r\n                //        prevToken = token;\r\n                //        return;\r\n                //    }\r\n                //\r\n                //    tmpStr += tokenValUCase + \"\\n\" + (new Array(indentLevel).join(\"\\t\"));\r\n                //    prevToken = token;\r\n                //    return;\r\n                //}\r\n                //\r\n\r\n                if(independent_newline.indexOf(tokenValUCase) > -1){\r\n\r\n                    if(indentLevel > 1 && prevTokenVal != '(') {\r\n\r\n                        indentLevel--;\r\n                    }\r\n\r\n                    tmpStr += '\\n'+(new Array(indentLevel).join(\"\\t\")) + tokenValUCase + '\\n';\r\n\r\n                    indentLevel++;\r\n\r\n                    tmpStr += (new Array(indentLevel).join(\"\\t\"));\r\n\r\n                    prevToken = token;\r\n\r\n                    return;\r\n                }\r\n\r\n                if(independent_inline.indexOf(tokenValUCase) > -1){\r\n\r\n                    tmpStr += '\\n'+(new Array(indentLevel).join(\"\\t\")) + tokenValUCase + (tokenValUCase == ',' ? '' : ' ');\r\n                    prevToken = token;\r\n                    return;\r\n                }\r\n\r\n                if (tokenType === type.RESERVED_WORD) {\r\n\r\n                    tmpStr += tokenValUCase + \" \";\r\n                    prevToken = token;\r\n                    return;\r\n                }\r\n\r\n                if (tokenType == type.QUOTED_STRING || tokenType == type.BACKTICK_QUOTED_STRING) {\r\n\r\n                    if (countColumn === -1) {\r\n\r\n                        countColumn = 0;\r\n                    }\r\n\r\n                    if (countColumn > -1) {\r\n\r\n                        countColumn++;\r\n                    }\r\n\r\n                    tmpStr += tokenVal;\r\n                    prevToken = token;\r\n\r\n                    return;\r\n                }\r\n\r\n                if (tokenType === type.BOUNDARY) {\r\n\r\n                    if (tokenVal != ',') {\r\n\r\n                        countColumn = -1;\r\n                    }\r\n\r\n                    if (tokenVal == '(') {\r\n\r\n                        if (tokens[idx + 2]) {\r\n\r\n                            if (tokens[idx + 2].value == ')') {\r\n\r\n                                tmpStr += tokenVal;\r\n                                prevToken = token;\r\n                                return;\r\n                            }\r\n                        }\r\n\r\n                        indentLevel++;\r\n                        tmpStr += tokenVal + \"\\n\" + (new Array(indentLevel).join(\"\\t\"));\r\n                        prevToken = token;\r\n                        return;\r\n                    }\r\n\r\n                    if (tokenVal == ')') {\r\n\r\n                        if (tokens[idx - 2]) {\r\n\r\n                            if (tokens[idx - 2].value == '(') {\r\n\r\n                                tmpStr += tokenVal + \" \";\r\n                                prevToken = token;\r\n                                return;\r\n                            }\r\n                        }\r\n\r\n                        if(indentLevel > 1) {\r\n\r\n                            indentLevel--;\r\n                        }\r\n\r\n                        tmpStr += \"\\n\" + (new Array(indentLevel).join(\"\\t\"));\r\n\r\n                        if (nextTokenVal == ',') {\r\n\r\n                            tmpStr += tokenVal;\r\n                            prevToken = token;\r\n                            return;\r\n                        }\r\n\r\n                        tmpStr += tokenVal + \" \";\r\n                        prevToken = token;\r\n                        return;\r\n                    }\r\n\r\n                    if (tokenVal == ',') {\r\n\r\n                        if (prevTokenVal == \")\") {\r\n\r\n                            tmpStr += tokenVal + \"\\n\" + (new Array(indentLevel).join(\"\\t\"));\r\n                            prevToken = token;\r\n                            return;\r\n                        }\r\n\r\n                        if (countColumn % 5 == 0 && countColumn > 0) {\r\n\r\n                            //if (countColumn % 5 == 0){\r\n                            //\r\n                            //    ((2 - 1) * 5) + 1\r\n                            //}\r\n\r\n                            tmpStr += tokenVal + \"\\n\" + (new Array(indentLevel).join(\"\\t\"));\r\n                            prevToken = token;\r\n                            return;\r\n                        }\r\n\r\n                        tmpStr += tokenVal + \" \";\r\n                        prevToken = token;\r\n                        return;\r\n                    }\r\n\r\n                    if (nextTokenType === type.STRING) {\r\n\r\n                        tmpStr += tokenVal;\r\n                        prevToken = token;\r\n                        return;\r\n                    }\r\n\r\n                    tmpStr += tokenVal + \" \";\r\n                    prevToken = token;\r\n                    return;\r\n                }\r\n\r\n                if (tokenType === type.FUNCTION) {\r\n\r\n                    if (nextTokenType === type.RESERVED_WORD) {\r\n\r\n                        tmpStr += tokenValUCase + \"\\n\" + (new Array(indentLevel).join(\"\\t\"));\r\n                        prevToken = token;\r\n                        return;\r\n                    }\r\n\r\n                    tmpStr += tokenValUCase + \" \";\r\n                    prevToken = token;\r\n                    return;\r\n                }\r\n\r\n                if (tokenType == type.COMMENT) {\r\n\r\n                    tmpStr += (me.equalLastChar(tmpStr, '\\n') ? '' : '\\n') + (new Array(indentLevel).join(\"\\t\"));\r\n\r\n                    tmpStr += tokenVal;\r\n\r\n                    if (tokenVal.slice(tokenVal.length - 2) == \"*/\") {\r\n\r\n                        tmpStr += \"\\n\" + (new Array(indentLevel).join(\"\\t\"));\r\n                    }\r\n\r\n                    prevToken = token;\r\n                    return;\r\n                }\r\n\r\n                if (tokenType == type.DELIMITER) {\r\n\r\n                    tmpStr += tokenVal;\r\n                    tmpStr += '\\n\\n';\r\n                    prevToken = token;\r\n                    return;\r\n                }\r\n\r\n                if (nextTokenVal === \".\") {\r\n\r\n                    tmpStr += tokenVal;\r\n                    prevToken = token;\r\n                    return;\r\n                }\r\n\r\n                tmpStr += tokenVal + \" \";\r\n                prevToken = token;\r\n            });\r\n\r\n            return tmpStr;\r\n        }\r\n    };\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/lib/QueryAlignment.js\n// module id = 9\n// module chunks = 0","Ext.define('Planche.lib.Query', {\r\n\tconstructor : function (query) {\r\n\r\n\t\tExt.apply(this, query);\r\n\r\n\t\tthis.orderColumn = '';\r\n\t\tthis.orderDirection = '';\r\n\t},\r\n\r\n\tgetPrevRecordSetSQL : function () {\r\n\r\n\t\tthis.start -= this.end;\r\n\r\n\t\tif(this.start < 0) this.start = 0;\r\n\t\t\r\n\t\treturn this.getSQL();\r\n\t},\r\n\r\n\tgetNextRecordSetSQL : function () {\r\n\r\n\t\tthis.start += this.end;\r\n\r\n\t\treturn this.getSQL();\r\n\t},\r\n\r\n\tgetPrevRecordSQL : function () {\r\n\r\n\t\tthis.start--;\r\n\r\n\t\tif(this.start < 0) this.start = 0;\r\n\t\t\r\n\t\treturn this.getSQL();\r\n\t},\r\n\r\n\tgetNextRecordSQL : function () {\r\n\r\n\t\tthis.start++;\r\n\r\n\t\treturn this.getSQL();\r\n\t},\r\n\r\n\tgetSQL : function () {\r\n\t\t\r\n\t\tif(this.isSelectQuery == true) {\r\n\r\n\t\t\tvar sql = this.sql;\r\n\r\n\t\t\tif(this.orderColumn && this.orderDirection) {\r\n\r\n\t\t\t\tsql += ' ORDER BY ' + this.orderColumn + ' ' + this.orderDirection;\r\n\t\t\t}\r\n\r\n\t\t\tsql += ' LIMIT ' + this.start + \", \" + this.end;\r\n\r\n\t\t\treturn sql;\r\n\t\t}\r\n\t\telse {\r\n\r\n\t\t\treturn this.raw;\r\n\t\t}\r\n\t},\r\n\r\n\tgetRawSQL : function () {\r\n\r\n\t\treturn this.raw;\r\n\t},\r\n\r\n\tgetTokens : function () {\r\n\r\n\t\treturn this.tokens;\r\n\t},\r\n\r\n\tisSelectQuery : function () {\r\n\r\n\t\treturn this.selectQuery;\r\n\t},\r\n\r\n\tisDelimiter : function () {\r\n\r\n\t\treturn this.delimiter;\r\n\t},\r\n\r\n\thasNext : function () {\r\n\r\n\t\treturn this.raw.length > this.end ? true : false;\r\n\t},\r\n\r\n\tsetRecords : function (records) {\r\n\r\n\t\tExt.apply(this, {\r\n\t\t\trecords : records\r\n\t\t});\r\n\t},\r\n\r\n\tsetOrderBy : function (column, direction) {\r\n\r\n\t\tthis.orderColumn = column;\r\n\t\tthis.orderDirection = direction;\r\n\t},\r\n\r\n\tisSelectedQuery : function (line, cursor) {\r\n\r\n\t\tvar linecursor = parseFloat(line + \".\" + cursor);\r\n\r\n\t\tif(this.sline <= linecursor && linecursor >= this.eline) {\r\n\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\telse {\r\n\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/lib/Query.js\n// module id = 10\n// module chunks = 0","Ext.define('Planche.lib.DBUtil', {\r\n    singleton         : true,\r\n    alternateClassName: ['Planche.DBUtil'],\r\n    getAssocArray     : function(fields, records, upper_case_key) {\r\n\r\n        upper_case_key = upper_case_key || false;\r\n\r\n        if (upper_case_key) {\r\n\r\n            Ext.Array.each(fields, function(field, fidx) {\r\n\r\n                fields[fidx].name = field.name.toUpperCase();\r\n            });\r\n        }\r\n\r\n        var tmp = [];\r\n        Ext.Array.each(records, function(record, ridx) {\r\n\r\n            var row = {};\r\n            Ext.Array.each(fields, function(field, fidx) {\r\n\r\n                row[field.name] = record[fidx];\r\n            });\r\n\r\n            tmp.push(row);\r\n        });\r\n\r\n        return tmp;\r\n    },\r\n\r\n    escapeString : function (str) {\r\n\r\n        //https://gist.github.com/zirosas/9479236\r\n        return str.replace(/[\\0\\x08\\x09\\x1a\\n\\r\"'\\\\\\%]/g, function (char) {\r\n            switch (char) {\r\n                case \"\\0\":\r\n                    return \"\\\\0\";\r\n                case \"\\x08\":\r\n                    return \"\\\\b\";\r\n                case \"\\x09\":\r\n                    return \"\\\\t\";\r\n                case \"\\x1a\":\r\n                    return \"\\\\z\";\r\n                case \"\\n\":\r\n                    return \"\\\\n\";\r\n                case \"\\r\":\r\n                    return \"\\\\r\";\r\n                case \"\\\"\":\r\n                case \"'\":\r\n                case \"\\\\\":\r\n                case \"%\":\r\n                    return \"\\\\\"+char; // prepends a backslash to backslash, percent,\r\n                                      // and double/single quotes\r\n            }\r\n        });\r\n    }\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/lib/DBUtil.js\n// module id = 11\n// module chunks = 0","Ext.define('Planche.lib.Base64', {\r\n    singleton         : true,\r\n    alternateClassName: ['Planche.Base64'],\r\n    _keyStr           : \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\",\r\n    encode            : function(e) {\r\n        var t = \"\";\r\n        var n, r, i, s, o, u, a;\r\n        var f = 0;\r\n        e = this._utf8_encode(e);\r\n        while (f < e.length) {\r\n            n = e.charCodeAt(f++);\r\n            r = e.charCodeAt(f++);\r\n            i = e.charCodeAt(f++);\r\n            s = n >> 2;\r\n            o = (n & 3) << 4 | r >> 4;\r\n            u = (r & 15) << 2 | i >> 6;\r\n            a = i & 63;\r\n            if (isNaN(r)) {u = a = 64} else if (isNaN(i)) {a = 64}\r\n            t = t + this._keyStr.charAt(s) + this._keyStr.charAt(o) + this._keyStr.charAt(u) + this._keyStr.charAt(a)\r\n        }\r\n        return t\r\n    },\r\n    decode            : function(e) {\r\n        var t = \"\";\r\n        var n, r, i;\r\n        var s, o, u, a;\r\n        var f = 0;\r\n        e = e.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\r\n        while (f < e.length) {\r\n            s = this._keyStr.indexOf(e.charAt(f++));\r\n            o = this._keyStr.indexOf(e.charAt(f++));\r\n            u = this._keyStr.indexOf(e.charAt(f++));\r\n            a = this._keyStr.indexOf(e.charAt(f++));\r\n            n = s << 2 | o >> 4;\r\n            r = (o & 15) << 4 | u >> 2;\r\n            i = (u & 3) << 6 | a;\r\n            t = t + String.fromCharCode(n);\r\n            if (u != 64) {t = t + String.fromCharCode(r)}\r\n            if (a != 64) {t = t + String.fromCharCode(i)}\r\n        }\r\n        t = this._utf8_decode(t);\r\n        return t\r\n    },\r\n    _utf8_encode      : function(e) {\r\n        e = e.replace(/\\r\\n/g, \"\\n\");\r\n        var t = \"\";\r\n        for (var n = 0 ; n < e.length ; n++) {\r\n            var r = e.charCodeAt(n);\r\n            if (r < 128) {t += String.fromCharCode(r)} else if (r > 127 && r < 2048) {\r\n                t += String.fromCharCode(r >> 6 | 192);\r\n                t += String.fromCharCode(r & 63 | 128)\r\n            } else {\r\n                t += String.fromCharCode(r >> 12 | 224);\r\n                t += String.fromCharCode(r >> 6 & 63 | 128);\r\n                t += String.fromCharCode(r & 63 | 128)\r\n            }\r\n        }\r\n        return t\r\n    },\r\n    _utf8_decode      : function(e) {\r\n        var t = \"\";\r\n        var n = 0;\r\n        var r = c1 = c2 = 0;\r\n        while (n < e.length) {\r\n            r = e.charCodeAt(n);\r\n            if (r < 128) {\r\n                t += String.fromCharCode(r);\r\n                n++\r\n            } else if (r > 191 && r < 224) {\r\n                c2 = e.charCodeAt(n + 1);\r\n                t += String.fromCharCode((r & 31) << 6 | c2 & 63);\r\n                n += 2\r\n            } else {\r\n                c2 = e.charCodeAt(n + 1);\r\n                c3 = e.charCodeAt(n + 2);\r\n                t += String.fromCharCode((r & 15) << 12 | (c2 & 63) << 6 | c3 & 63);\r\n                n += 3\r\n            }\r\n        }\r\n        return t\r\n    }\r\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/lib/Base64.js\n// module id = 12\n// module chunks = 0","Ext.define('Planche.store.DatabaseSchemaTree', {\n    extend       : 'Ext.data.TreeStore',\n    root         : {\n        type    : 'database',\n        text    : '',\n        icon    : 'resources/images/icon_database.png',\n        leaf    : false,\n        expanded: true,\n        children: [{\n            type: 'tables',\n            text: 'Tables',\n            leaf: false\n        }, {\n            type: 'views',\n            text: 'Views',\n            leaf: false\n        }, {\n            type: 'procedures',\n            text: 'Procedures',\n            leaf: false\n        }, {\n            type: 'functions',\n            text: 'Functions',\n            leaf: false\n        }, {\n            type: 'triggers',\n            text: 'Triggers',\n            leaf: false\n        }, {\n            type: 'events',\n            text: 'Events',\n            leaf: false\n        }]\n    },\n    initComponent: function() {\n\n        this.callParent(arguments);\n    }\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/store/DatabaseSchemaTree.js\n// module id = 13\n// module chunks = 0","Ext.define('Planche.store.GrantSchemaTree', {\n    extend: 'Ext.data.TreeStore',\n    root  : {\n        type    : 'global',\n        path    : 'global',\n        text    : 'Global Privileges',\n        expanded: true\n    }\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/store/GrantSchemaTree.js\n// module id = 14\n// module chunks = 0","Ext.define('Planche.view.user.GrantPrivList', {\n    extend       : 'Ext.grid.Panel',\n    alias        : 'widget.grant-priv-list',\n    emptyText    : 'There\\'s no data to display',\n    initComponent: function() {\n\n        var list = this;\n\n        this.selModel = Ext.create('Ext.selection.CheckboxModel', {\n            mode         : 'multi'\n        });\n\n        this.columns = [\n            {text: 'Privileges', dataIndex: 'cmd', flex: 1, sortable: false, menuDisabled: true}\n        ];\n\n        this.store = Ext.create('Ext.data.Store', {\n            fields: ['priv', 'cmd'],\n            data  : []\n        });\n\n        this.callParent(arguments);\n\n    }\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/user/GrantPrivList.js\n// module id = 15\n// module chunks = 0","Ext.define('Planche.view.database.DownloadToCSVTargetList', {\n    extend       : 'Ext.grid.Panel',\n    alias        : 'widget.download-to-csv-target-list',\n    config       : {\n        application: null\n    },\n    initComponent: function() {\n\n        this.selModel = Ext.create('Ext.selection.CheckboxModel', {\n            mode: 'multi'\n        });\n\n        this.columns = [\n            Ext.create('Ext.grid.RowNumberer'),\n            {\n                text     : 'Table',\n                dataIndex: 'Name',\n                flex     : 1,\n                renderer : function(value, p, record) {\n\n                    return Ext.String.format('<img src=\\'resources/images/icon_table.png\\'> {0}', record.raw.Name);\n                }\n            }, {\n                text     : 'Comment',\n                dataIndex: 'Comment',\n                width    : 200\n            }];\n\n        this.store = Ext.create('Ext.data.Store', {\n            fields: ['Name', 'Comment'],\n            data  : []\n        });\n\n        this.callParent(arguments);\n    }\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/database/DownloadToCSVTargetList.js\n// module id = 16\n// module chunks = 0","Ext.define('Planche.view.database.CopyDatabaseTargetList', {\n    extend       : 'Ext.grid.Panel',\n    alias        : 'widget.copy-database-target-list',\n    config       : {\n        application: null\n    },\n    initComponent: function() {\n\n        var app = this.getApplication();\n\n        this.columns = [{\n            text     : 'Connection',\n            dataIndex: 'connection'\n        }, {\n            text     : 'Database',\n            dataIndex: 'database',\n            flex     : 1,\n            renderer : function(value, p, record) {\n\n                return Ext.String.format('<img src=\\'resources/images/icon_database.png\\'> {0}', record.raw.database);\n            }\n        }];\n\n        this.store = Ext.create('Ext.data.Store', {\n            fields: ['connection', 'database'],\n            data  : []\n        });\n\n        this.callParent(arguments);\n    }\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/database/CopyDatabaseTargetList.js\n// module id = 17\n// module chunks = 0","Ext.define('Planche.lib.Window', {\r\n    extend       : 'Ext.window.Window',\r\n    config       : {\r\n        buttons: []\r\n    },\r\n    initComponent: function() {\r\n\r\n        this.callParent(arguments);\r\n\r\n        if (typeof this.buttons === 'undefined' || this.buttons === null) {\r\n\r\n            this.buttons = [];\r\n        }\r\n\r\n        if (this.closable) {\r\n\r\n            this.buttons.push({\r\n                text   : '닫기',\r\n                handler: function(button, event) {\r\n\r\n                    var win = button.up(\"window\");\r\n                    win.destroy();\r\n                }\r\n            });\r\n        }\r\n    },\r\n    stateful     : true,\r\n    layout       : 'fit',\r\n    bodyStyle    : \"background-color:#FFFFFF\",\r\n    tools        : [{\r\n        type   : 'maximize',\r\n        handler: function(event, toolEl, owner, tool) {\r\n\r\n            owner.up(\"window\").toggleMaximize();\r\n        }\r\n    }, {\r\n        hidden : true,\r\n        type   : 'restore',\r\n        handler: function(event, toolEl, owner, tool) {\r\n\r\n            var win = owner.up(\"window\");\r\n\r\n            var state = win.getState();\r\n\r\n            win.setPosition(state.pos[0], state.pos[1]);\r\n\r\n            win.toggleMaximize();\r\n        }\r\n    }],\r\n    width        : 900,\r\n    height       : 800,\r\n    overflowY    : 'auto',\r\n    autoScroll   : true,\r\n    plain        : true,\r\n    fixed        : true,\r\n    shadow       : false,\r\n    autoShow     : true,\r\n    constrain    : true,\r\n    modal        : true\r\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/lib/Window.js\n// module id = 18\n// module chunks = 0","Ext.define('Planche.view.layout.Menu', {\n    extend  : 'Ext.toolbar.Toolbar',\n    xtype   : 'planche-menu',\n    defaults: {\n        xtype: 'splitbutton',\n        split: false\n    },\n    items   : (function() {\n\n        var menus = ['Connection'];\n\n        if(Planche.platform == 'planche-wordpress' || Planche.platform == 'planche-desktop') {\n\n            // menus.push('Bookmark')\n        }\n\n        menus.push(\n            'Query', 'Edit', 'Database', 'Table', 'Export', 'Tools', 'Help'\n        );\n\n        var tmp = [];\n        Ext.Array.each(menus, function(name, idx) {\n\n            tmp.push({text: name, menu: Ext.create('Ext.menu.Menu')});\n        });\n\n        return tmp;\n    })()\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/layout/Menu.js\n// module id = 19\n// module chunks = 0","Ext.define('Planche.view.Main', {\n    extend : 'Ext.container.Container',\n    xtype  : 'app-main',\n    style  : {\"background\": \"#E0E0E0\"},\n    padding: 5,\n    layout : {\n        type: 'vbox'\n    },\n\n    /**\n     * Planche Main View\n     *\n     * @class Planche.view.Main\n     * @constructor\n     */\n    initComponent: function() {\n\n        this.items = [\n            this.initTopMenu(),\n            this.initToolBar(),\n            this.initConnectTabPanel(),\n            this.initFooter(),\n            this.initContextMenu()\n        ];\n\n        this.callParent(arguments);\n    },\n\n    /**\n     * initialize top menu\n     *\n     * @method initTopMenu\n     */\n    initTopMenu: function() {\n\n        return {\n            xtype   : 'planche-menu',\n            id      : 'top-menu',\n            width   : '100%',\n            height  : 30,\n            margin  : '0px 0px 2px 0px'\n        };\n    },\n\n    /**\n     * initialize tool-bar\n     *\n     * @method initToolBar\n     */\n    initToolBar: function() {\n\n        return {\n            xtype  : 'planche-toolbar',\n            id     : 'planche-toolbar',\n            padding: 3,\n            margin : '0px 0px 1px 0px'\n        };\n    },\n\n    /**\n     * initialize connnect tab panel\n     *\n     * @method initConnectTabPanel\n     */\n    initConnectTabPanel: function() {\n\n        //메인탭에 커넥션별 탭을 구성한다.\n        return {\n            id      : 'connect-tab-panel',\n            xtype   : 'tabpanel',\n            flex    : 1,\n            width   : '100%',\n            height  : '100%',\n            border  : false,\n            margin  : '0px 0px 5px 0px',\n            stateful: true\n        };\n    },\n\n    /**\n     * initialize context menu\n     *\n     * @method initContextMenu\n     */\n    initContextMenu: function() {\n\n        return {\n            xtype   : 'menu',\n            id      : 'schema-context-menu',\n            defaults: {\n                scope: this\n            },\n            items   : []\n        };\n    },\n\n    /**\n     * initialize footer\n     *\n     * @method initFooter\n     */\n    initFooter: function() {\n\n        return {\n            xtype   : 'container',\n            layout  : 'hbox',\n            id      : 'planche-footer',\n            defaults: {\n                scope: this\n            },\n            items   : [{\n                xtype : 'progressbar',\n                id    : 'footer-task-progressbar',\n                width : 200,\n                height: 20\n            }, {\n                xtype  : 'component',\n                width : '100%',\n                border: 1,\n                text   : 'Loading tasks',\n                margin : '0px 0px 0px 5px',\n                padding: '3px 0px 0px 0px',\n                html   : '<div id=\"footer-task-message\">Task status</div>',\n                style  : {\n                    color: '#629632'\n                }\n            }]\n        };\n    }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/Main.js\n// module id = 20\n// module chunks = 0","/**\n * Planche viewport\n *\n * @class Planche.view.Viewport\n */\nExt.define('Planche.view.Viewport', {\n    extend: 'Ext.container.Viewport',\n    requires:[\n        'Ext.layout.container.Fit',\n        'Planche.view.Main'\n    ],\n\n    layout: {\n        type: 'fit'\n    },\n\n    items: [{\n        xtype: 'app-main'\n    }]\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/Viewport.js\n// module id = 21\n// module chunks = 0","Ext.define('Planche.view.layout.ConnectTab', {\n    extend  : 'Ext.panel.Panel',\n    alias   : 'widget.connect-tab',\n    layout  : 'border',\n    border  : false,\n    closable: true,\n    width   : '100%',\n    height  : 30,\n    style   : {\"background\": \"#E0E0E0\"},\n    padding : '5px 0px 0px 0px',\n    items   : [{\n        xtype: 'schema-tree'\n    }, {\n\n        xtype: 'query-tab-panel'\n    }],\n    config  : {\n        hostName    : 'localhost',\n        tunnelingURL: 'http://',\n        host        : '',\n        user        : '',\n        pass        : '',\n        db          : '',\n        charset     : 'utf8',\n        port        : 3306,\n        DBMS        : 'mysql',\n        APIS        : Planche.dbms.mysql,\n        requestType : 'ajax',\n        quickCommand: null\n    }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/layout/ConnectTab.js\n// module id = 22\n// module chunks = 0","Ext.define('Planche.view.user.UserAdd', {\n    extend       : 'Planche.lib.Window',\n    alias        : 'widget.user-add',\n    stateful     : true,\n    title        : 'User Add',\n    layout       : 'vbox',\n    bodyStyle    : \"background-color:#FFFFFF\",\n    width        : 500,\n    height       : 500,\n    overflowY    : 'auto',\n    autoScroll   : true,\n    modal        : true,\n    plain        : true,\n    fixed        : true,\n    shadow       : false,\n    autoShow     : true,\n    constrain    : true,\n    config       : {\n        user: '',\n        host: ''\n    },\n    items        : [{\n        xtype   : 'fieldset',\n        title   : 'User Information',\n        layout  : 'anchor',\n        defaults: {\n            xtype : \"textfield\",\n            anchor: '100%'\n        },\n        flex    : 1,\n        width   : '100%',\n        items   : [{\n            id        : 'user-add-user-name',\n            fieldLabel: 'Username',\n            value     : ''\n        }, {\n            id        : 'user-add-host',\n            fieldLabel: 'Host',\n            value     : ''\n        }, {\n            id        : 'user-add-password',\n            fieldLabel: 'Password',\n            inputType : 'password',\n            value     : ''\n        }, {\n            id        : 'user-add-retype-password',\n            fieldLabel: 'ReType Password',\n            inputType : 'password',\n            value     : ''\n        }]\n    }, {\n        xtype   : 'fieldset',\n        title   : 'Operation Restrictions',\n        layout  : 'anchor',\n        defaults: {\n            xtype    : \"spinnerfield\",\n            anchor   : '100%',\n            value    : 0,\n            minValue : 0,\n            increment: 10\n        },\n        flex    : 1,\n        width   : '100%',\n        items   : [{\n            id        : 'user-add-max-questions',\n            fieldLabel: 'Max number of queries per hour'\n        }, {\n            id        : 'user-add-max-updates',\n            fieldLabel: 'Max number of updates per hour'\n        }, {\n            id        : 'user-add-max-connections',\n            fieldLabel: 'Max number of connections per hour'\n        }, {\n            id        : 'user-add-max-user-connections',\n            fieldLabel: 'Max number of user connections'\n        }]\n    }],\n    buttons      : [{\n        id  : 'user-add-save-user',\n        text: 'Save User'\n    }, {\n        id  : 'user-add-close',\n        text: 'Close'\n    }],\n    initComponent: function () {\n\n        this.callParent(arguments);\n    }\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/user/UserAdd.js\n// module id = 23\n// module chunks = 0","Ext.define('Planche.view.user.GrantUserList', {\n    extend       : 'Ext.grid.Panel',\n    alias        : 'widget.grant-user-list',\n    config       : {\n        application: null\n    },\n    initComponent: function() {\n\n        var app = this.getApplication();\n\n        this.columns = [{\n            text        : 'User',\n            dataIndex   : 'User',\n            flex        : 1,\n            sortable    : false,\n            menuDisabled: true,\n            renderer    : function(value, p, record) {\n\n                return Ext.String.format('<img src=\\'resources/images/icon_user.png\\'> {0}', value + '@' + record.raw.Host);\n            }\n        }, {\n            text : 'Edit', xtype: 'actioncolumn', width: 50, sortable: false, menuDisabled: true, align: 'center',\n            items: [{\n                icon   : 'resources/images/icon_edit.png',\n                tooltip: 'Edit User'\n            }]\n        }, {\n            text : 'Delete', xtype: 'actioncolumn', width: 50, sortable: false, menuDisabled: true, align: 'center',\n            items: [{\n                icon   : 'resources/images/icon_delete.gif',\n                tooltip: 'Delete User'\n            }]\n        }];\n\n        this.store = Ext.create('Ext.data.Store', {\n            fields: ['User', 'Host'],\n            data  : []\n        });\n\n        this.callParent(arguments);\n    }\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/user/GrantUserList.js\n// module id = 24\n// module chunks = 0","Ext.define('Planche.view.user.GrantSchemaTree', {\n    extend       : 'Ext.tree.Panel',\n    alias        : 'widget.grant-schema-tree',\n    initComponent: function () {\n\n        this.store = Ext.create('Planche.store.GrantSchemaTree');\n\n        this.callParent(arguments);\n    }\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/user/GrantSchemaTree.js\n// module id = 25\n// module chunks = 0","Ext.define('Planche.view.user.Grant', {\n    extend       : 'Planche.lib.Window',\n    alias        : 'widget.grant',\n    stateful     : true,\n    title        : 'User Manager',\n    layout       : 'border',\n    bodyStyle    : \"background-color:#FFFFFF\",\n    width        : 900,\n    height       : 500,\n    overflowY    : 'auto',\n    autoScroll   : true,\n    modal        : true,\n    plain        : true,\n    fixed        : true,\n    shadow       : false,\n    autoShow     : true,\n    constrain    : true,\n    config       : {\n        application: null\n    },\n    tbar         : [\n        {\n            xtype: 'button',\n            id   : 'grant-add-user',\n            text : 'Add User'\n        }\n    ],\n    buttons      : [{\n        id      : 'grant-save-changes',\n        text    : 'Save Changes'\n    }, {\n        id      : 'grant-cancel-changes',\n        text    : 'Cancel Changes'\n    }, {\n        id  : 'grant-close',\n        text: 'Close'\n    }],\n    initComponent: function() {\n\n        this.items = [{\n            xtype      : 'grant-user-list',\n            id         : 'grant-user-list',\n            region     : 'west',\n            flex       : 1,\n            height     : '100%',\n            split      : true,\n            disabled   : false,\n            application: this.getApplication()\n        }, {\n            xtype   : 'grant-schema-tree',\n            id      : 'grant-schema-tree',\n            region  : 'center',\n            width   : 200,\n            height  : '100%',\n            disabled: true\n        }, {\n            xtype   : 'grant-priv-list',\n            id      : 'grant-priv-list',\n            region  : 'east',\n            height  : '100%',\n            flex    : 1,\n            split   : true,\n            disabled: true\n        }];\n\n        this.callParent(arguments);\n    }\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/user/Grant.js\n// module id = 26\n// module chunks = 0","Ext.define('Planche.view.table.TableInfoTab', {\n    extend       : 'Ext.panel.Panel',\n    alias        : 'widget.table-info-tab',\n    id           : 'table-info-tab',\n    title        : 'Table Information',\n    padding      : '10 10 10 10',\n    autoScroll   : true,\n    config       : {\n        edited     : false,\n        application: null,\n        database   : null,\n        table      : null\n    },\n    initComponent: function() {\n\n        this.callParent(arguments);\n    }\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/table/TableInfoTab.js\n// module id = 27\n// module chunks = 0","Ext.define('Planche.view.table.TableSQLTab', {\n    extend       : 'Ext.container.Container',\n    alias        : 'widget.table-sql-tab',\n    id           : 'table-sql-tab',\n    title        : 'Table SQL',\n    config       : {\n        edited     : false,\n        application: null,\n        database   : null,\n        table      : null\n    },\n    html         : '<textarea></textarea>',\n    initComponent: function() {\n\n        this.callParent(arguments);\n    }\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/table/TableSQLTab.js\n// module id = 28\n// module chunks = 0","Ext.define('Planche.view.table.TableIndexesTab', {\n    extend: 'Ext.grid.Panel',\n    alias : 'widget.table-indexes-tab',\n    id    : 'table-indexes-tab',\n    title : 'Table Indexes',\n    config: {\n        edited: false,\n        application : null,\n        database : null,\n        table : null\n    },\n    selModel : {\n        singleSelect:true\n    },\n    initComponent : function () {\n\n        var app = this.getApplication(),\n            tb = this.getTable();\n\n        this.buttons = [{\n            id  : 'table-indexes-btn-create',\n            text: 'Create Index'\n        },{\n            id  : 'table-indexes-btn-edit',\n            text: 'Edit Index'\n        },{\n            id  : 'table-indexes-btn-delete',\n            text: 'Delete Index'\n        }];\n\n        this.columns = [\n            { text: 'Index Name', dataIndex: 'Key_name', width : 120},\n            { text: 'Columns', dataIndex: 'Column_name', width : 120},\n            { text: 'Index Type', dataIndex: 'Index_type', width : 120},\n            { text: 'Comment', dataIndex: 'Index_comment', flex : 1}\n        ];\n\n        var fields  = [];\n\n        //create grid fields\n        Ext.each(this.columns, function (obj) {\n\n            fields.push(obj.dataIndex);\n        });\n\n        //create store\n        this.store = Ext.create('Ext.data.Store', {\n            fields            : fields,\n            clearRemovedOnLoad: false\n        });\n\n        this.callParent(arguments);\n    }\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/table/TableIndexesTab.js\n// module id = 29\n// module chunks = 0","Ext.define('Planche.view.table.TablePropertiesTab', {\n    extend: 'Ext.panel.Panel',\n    alias : 'widget.table-properties-tab',\n    id    : 'table-properties-tab',\n    title : 'Table Properties',\n    height: '100%',\n    border: false,\n    config: {\n        edited     : false,\n        application: null,\n        database   : null,\n        table      : null,\n        properties : {}\n    },\n    items : [{\n        xtype  : 'form',\n        id     : 'properties-form',\n        layout : {\n            type      : 'table',\n            // The total column count must be specified here\n            columns   : 2,\n            tableAttrs: {\n                style: {\n                    width: '100%'\n                }\n            }\n        },\n        border : false,\n        padding: 10,\n        items  : [{\n            xtype           : 'combobox',\n            id              : 'properties-table-type',\n            name            : 'properties-table-type',\n            fieldLabel      : 'Table Type',\n            displayField    : 'text',\n            emptyText       : 'Default',\n            disableKeyFilter: true,\n            editable        : false,\n            valueField      : 'id',\n            validateBlank   : true,\n            allowBlank      : true,\n            typeAhead       : true,\n            store           : [\n                ['MYISAM', 'MYISAM'],\n                ['MRG_MYISAM', 'MRG_MYISAM'],\n                ['CSV', 'CSV'],\n                ['BLACKHOLE', 'BLACKHOLE'],\n                ['MEMORY', 'MEMORY'],\n                ['FEDERATED', 'FEDERATED'],\n                ['ARCHIVE', 'ARCHIVE'],\n                ['INNODB', 'INNODB'],\n                ['PERFORMANCE_SCHEMA', 'PERFORMANCE_SCHEMA']\n            ]\n        }, {\n            xtype           : 'combobox',\n            id              : 'properties-charset',\n            name            : 'properties-charset',\n            fieldLabel      : 'Charset',\n            displayField    : 'text',\n            emptyText       : 'Default',\n            disableKeyFilter: true,\n            editable        : false,\n            valueField      : 'id',\n            validateBlank   : true,\n            allowBlank      : true,\n            typeAhead       : true,\n            store           : {\n                type  : 'array',\n                fields: ['id', 'text'],\n                data  : [],\n                proxy : {\n                    type: 'memory'\n                }\n            }\n        }, {\n            xtype           : 'combobox',\n            id              : 'properties-collation',\n            name            : 'properties-collation',\n            fieldLabel      : 'Collation',\n            displayField    : 'text',\n            emptyText       : 'Default',\n            disableKeyFilter: true,\n            editable        : false,\n            valueField      : 'id',\n            validateBlank   : true,\n            allowBlank      : true,\n            typeAhead       : true,\n            store           : {\n                type  : 'array',\n                fields: ['id', 'text'],\n                data  : [],\n                proxy : {\n                    type: 'memory'\n                }\n            }\n        }, {\n            xtype           : 'combobox',\n            id              : 'properties-checksum',\n            name            : 'properties-checksum',\n            fieldLabel      : 'Check Sum',\n            displayField    : 'text',\n            emptyText       : 'Default',\n            disableKeyFilter: true,\n            editable        : false,\n            valueField      : 'id',\n            validateBlank   : true,\n            allowBlank      : true,\n            typeAhead       : true,\n            store           : [\n                [0, 0],\n                [1, 1]\n            ]\n        }, {\n            xtype           : 'combobox',\n            id              : 'properties-delay-key-write',\n            name            : 'properties-delay-key-write',\n            fieldLabel      : 'Delay Key Write',\n            displayField    : 'text',\n            emptyText       : 'Default',\n            disableKeyFilter: true,\n            editable        : false,\n            valueField      : 'id',\n            validateBlank   : true,\n            allowBlank      : true,\n            typeAhead       : true,\n            store           : [\n                [0, 0],\n                [1, 1]\n            ]\n        }, {\n            xtype           : 'combobox',\n            id              : 'properties-row-format',\n            name            : 'properties-row-format',\n            fieldLabel      : 'Row Format',\n            displayField    : 'text',\n            emptyText       : 'Default',\n            disableKeyFilter: true,\n            editable        : false,\n            valueField      : 'id',\n            validateBlank   : true,\n            allowBlank      : true,\n            typeAhead       : true,\n            store           : [\n                ['compressed', 'compressed'],\n                ['dynamic', 'dynamic'],\n                ['fixed', 'fixed']\n            ]\n        }, {\n            xtype     : 'textfield',\n            fieldLabel: 'Auto Incr.',\n            id        : 'properties-auto-incr',\n            name      : 'properties-auto-incr',\n            allowBlank: true\n        }, {\n            xtype     : 'textfield',\n            fieldLabel: 'Avg Row Len.',\n            id        : 'properties-avg-row-len',\n            name      : 'properties-avg-row-len',\n            allowBlank: true\n        }, {\n            xtype     : 'textfield',\n            fieldLabel: 'Minimum Row',\n            id        : 'properties-minimum-row',\n            name      : 'properties-minimum-row',\n            allowBlank: true\n        }, {\n            xtype     : 'textfield',\n            fieldLabel: 'Maximum Row',\n            id        : 'properties-maximum-row',\n            name      : 'properties-maximum-row',\n            allowBlank: true\n        }, {\n            xtype     : 'textfield',\n            fieldLabel: 'Comment',\n            id        : 'properties-comment',\n            name      : 'properties-comment',\n            allowBlank: true\n        }]\n    }],\n\n    initComponent: function() {\n\n        var app = this.getApplication(),\n            tb = this.getTable();\n\n        this.tbar = {\n            id        : 'properties-schema-name',\n            xtype     : 'textfield',\n            width     : '100%',\n            allowBlank: false,\n            emptyText : 'Enter new table name..',\n            disabled  : tb ? true : false,\n            value     : tb\n        };\n\n        this.buttons = [{\n            id  : 'table-properties-btn-create',\n            text: tb ? 'Alter' : 'Create'\n        }];\n\n        this.callParent(arguments);\n    }\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/table/TablePropertiesTab.js\n// module id = 30\n// module chunks = 0","Ext.define('Planche.view.table.TableSchemaTab', {\n    extend       : 'Ext.grid.Panel',\n    alias        : 'widget.table-schema-tab',\n    id           : 'table-schema-tab',\n    border       : false,\n    title        : 'Table Schema',\n    selModel     : {\n        selType: 'cellmodel'\n    },\n    config       : {\n        edited     : false,\n        application: null,\n        database   : null,\n        table      : null\n    },\n    columnLines  : true,\n    width        : '100%',\n    flex         : 1,\n    initComponent: function() {\n\n        var app = this.getApplication(),\n            tb = this.getTable();\n\n        this.addPlugin(Ext.create('Ext.grid.plugin.CellEditing', {\n            clicksToEdit: 2\n        }));\n\n        this.tbar = {\n            id        : 'table-schema-name',\n            xtype     : 'textfield',\n            width     : '100%',\n            allowBlank: false,\n            emptyText : 'Enter new table name..',\n            disabled  : tb ? true : false,\n            value     : tb\n        };\n\n        this.buttons = [{\n            id  : 'table-schema-btn-create',\n            text: tb ? 'Alter' : 'Create'\n        }, {\n            id  : 'table-schema-btn-insert',\n            text: 'Insert'\n        }, {\n            id  : 'table-schema-btn-delete',\n            text: 'Delete'\n        }];\n\n        this.columns = [\n            {\n                text: 'Field Name', dataIndex: 'field', width: 120, editor: {\n                xtype: 'textfield'\n            }\n            },\n            {\n                text: 'Datatype', dataIndex: 'type', width: 120, editor: {\n                xtype: 'combobox',\n                store: app.getAPIS().getDataTypesToJSON()\n            }\n            },\n            {\n                text: 'Length', dataIndex: 'len', width: 60, editor: {\n                xtype: 'textfield'\n            }\n            },\n            {\n                text: 'Default', dataIndex: 'default', width: 100, editor: {\n                xtype: 'textfield'\n            }\n            },\n            {text: 'PK', xtype: 'checkcolumn', dataIndex: 'pk', width: 60},\n            {text: 'Not Null', xtype: 'checkcolumn', dataIndex: 'not_null', width: 60},\n            {text: 'Unsigned', xtype: 'checkcolumn', dataIndex: 'unsigned', width: 60},\n            {text: 'Auto Incr', xtype: 'checkcolumn', dataIndex: 'auto_incr', width: 60},\n            {text: 'Zerofill', xtype: 'checkcolumn', dataIndex: 'zerofill', width: 60},\n            {\n                text: 'Comment', dataIndex: 'comment', flex: 1, editor: {\n                xtype: 'textfield'\n            }\n            }\n        ];\n\n        var fields = [];\n\n        //create grid fields\n        Ext.each(this.columns, function(obj) {\n\n            fields.push(obj.dataIndex);\n        });\n\n        //create store\n        this.store = Ext.create('Ext.data.Store', {\n            fields            : fields,\n            clearRemovedOnLoad: false\n        });\n\n        this.callParent(arguments);\n    }\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/table/TableSchemaTab.js\n// module id = 31\n// module chunks = 0","Ext.define('Planche.view.table.EditSchemaWindow', {\n    extend  : 'Planche.lib.Window',\n    stateful  : true,\n    layout    : 'fit',\n    bodyStyle :\"background-color:#FFFFFF\",\n    width     : 1000,\n    height    : 500,\n    overflowY : 'auto',\n    autoScroll: true,\n    border    : false,\n    modal     : true,\n    plain     : true,\n    fixed     : true,\n    shadow    : false,\n    autoShow  : true,\n    constrain : true,\n    buttons   : [{\n        id     : 'edit-schema-btn-close',\n        text   : 'Close'\n    }]\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/table/EditSchemaWindow.js\n// module id = 32\n// module chunks = 0","Ext.define('Planche.view.table.EditIndexWindow', {\n    extend    : 'Planche.lib.Window',\n    id        : 'edit-index-window',\n    stateful  : true,\n    bodyStyle : \"background-color:#FFFFFF\",\n    width     : 1000,\n    height    : 500,\n    overflowY : 'auto',\n    autoScroll: true,\n    border    : false,\n    modal     : true,\n    plain     : true,\n    fixed     : true,\n    shadow    : false,\n    autoShow  : true,\n    constrain : true,\n    config    : {\n        database : null,\n        table    : null,\n        indexName: null\n    },\n    items     : [{\n        xtype     : 'grid',\n        border    : false,\n        selModel  : {\n            selType: 'cellmodel'\n        },\n        plugins   : [{\n            ptype      : 'cellediting',\n            clickToEdit: 2\n        }],\n        viewConfig: {\n            emptyText: 'There are no columns to show in this view.'\n        },\n        id        : 'edit-index-grid',\n        columns   : [\n            {text: 'Field Name', dataIndex: 'field', width: 120},\n            {text: 'Datatype', dataIndex: 'type', width: 120},\n            {text: 'Comment', dataIndex: 'comment', flex: 1},\n            {text: 'Use Column', xtype: 'checkcolumn', width: 100, dataIndex: 'use'},\n            {\n                text: 'Length', width: 100, dataIndex: 'length', editor: {\n                    xtype: 'textfield'\n                }\n            },\n            {\n                text: 'Sort', dataIndex: 'sort', width: 100, editor: {\n                    xtype: 'combobox',\n                    store: ['ASC', 'DESC']\n                }\n            }\n        ],\n        store     : Ext.create('Ext.data.Store', {\n            fields            : [\n                'field', 'type', 'comment', 'use',\n                'length', 'sort'\n            ],\n            clearRemovedOnLoad: false\n        }),\n        tbar      : {\n            id        : 'edit-index-name',\n            xtype     : 'textfield',\n            width     : '100%',\n            allowBlank: false,\n            required : true,\n            emptyText : 'Enter index name'\n        },\n        fbar      : [{\n            flex      : 1,\n            xtype     : 'radiogroup',\n            fieldLabel: 'Index Options',\n            id        : 'edit-index-option',\n            defaults  : {\n                xtype: 'radiofield'\n            },\n            items     : [{\n                boxLabel  : 'No Option',\n                name      : 'edit-index-option',\n                inputValue: '',\n                checked   : true\n            }, {\n                boxLabel  : 'Unique',\n                name      : 'edit-index-option',\n                inputValue: 'UNIQUE'\n            }, {\n                boxLabel  : 'Fulltext',\n                name      : 'edit-index-option',\n                inputValue: 'FULLTEXT'\n            }]\n        },{\n            flex      : 1,\n            xtype     : 'radiogroup',\n            fieldLabel: 'Using',\n            id        : 'edit-index-using',\n            defaults  : {\n                xtype: 'radiofield'\n            },\n            items     : [{\n                boxLabel  : 'BTree',\n                name      : 'edit-index-using',\n                checked   : true,\n                inputValue: 'BTREE'\n            }, {\n                boxLabel  : 'Hash',\n                name      : 'edit-index-using',\n                inputValue: 'HASH'\n            }]\n        }]\n    }],\n    buttons   : [{\n        id  : 'edit-index-btn-save',\n        text: 'Save'\n    }, {\n        id  : 'edit-index-btn-close',\n        text: 'Close'\n    }]\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/table/EditIndexWindow.js\n// module id = 33\n// module chunks = 0","Ext.define('Planche.view.layout.Toolbar', {\n    extend  : 'Ext.toolbar.Toolbar',\n    xtype   : 'planche-toolbar',\n    width   : '100%',\n    defaults: {\n        xtype       : 'button',\n        allowDepress: false,\n        scale       : 'medium',\n        tooltipType : 'title',\n        scope       : this,\n        disabled    : true\n    },\n    items   : [\n        {\n            icon    : 'resources/images/new_database.png',\n            tooltip : 'Create a new connection(ALT+N)',\n            id      : 'toolbar-new-connect',\n            disabled: false\n        },\n        {\n            icon   : 'resources/images/new_query.png',\n            tooltip: 'New query editor(ALT+T)',\n            id     : 'toolbar-query-editor'\n        },\n        {\n            icon   : 'resources/images/icon_play24x24.png',\n            tooltip: 'Query Execution(F9)',\n            id     : 'toolbar-query-exec'\n        },\n        {\n            icon   : 'resources/images/icon_stop24x24.png',\n            tooltip: 'Stop Operations(ALT+S)',\n            id     : 'toolbar-stop-operation'\n        },\n        {\n            icon   : 'resources/images/icon_user24x24.png',\n            tooltip: 'User Manager(ALT+U)',\n            id     : 'toolbar-user-manager'\n        },\n        '-',\n        {\n            icon: 'resources/images/icon_quick_command24x24.png',\n            text: 'Quick Cmd',\n            cls : 'btn',\n            id  : 'toolbar-quick-command'\n        },\n        '-',\n        {\n            icon: 'resources/images/icon_proc24x24.png',\n            text: 'Procs',\n            cls : 'btn',\n            id  : 'toolbar-show-procs'\n        },\n        {\n            icon: 'resources/images/icon_vars24x24.png',\n            text: 'Vars',\n            cls : 'btn',\n            id  : 'toolbar-show-vars'\n        },\n        {\n            icon  : 'resources/images/icon_status24x24.png',\n            text  : 'Status',\n            id    : 'toolbar-show-status',\n            cls   : 'btn',\n            margin: '0px 6px 0px 0px'\n        },\n        '-',\n        {\n            icon  : 'resources/images/icon_flush24x24.png',\n            text  : 'Flush',\n            id    : 'toolbar-flush',\n            cls   : 'btn',\n            margin: '0px 6px 0px 0px'\n        },\n        '-',\n        {\n            icon  : 'resources/images/icon_sql.png',\n            text  : 'Tokenize',\n            id    : 'toolbar-tokenize',\n            cls   : 'btn',\n            margin: '0px 2px 0px 3px'\n        },\n        '-',\n        {\n            icon   : 'resources/images/icon_fullscreen24x24.png',\n            text   : 'FullScreen',\n            id     : 'toolbar-fullscreen',\n            cls    : 'btn',\n            margin : '0px 2px 0px 3px'\n        }\n    ]\n\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/layout/Toolbar.js\n// module id = 34\n// module chunks = 0","Ext.define('Planche.view.layout.QueryTabPanel', {\n    extend  : 'Ext.tab.Panel',\n    alias   : 'widget.query-tab-panel',\n    flex    : 1,\n    region  : 'center',\n    width   : '100%',\n    height  : '100%',\n    border  : false,\n    items : [{\n    \txtype : 'query-tab',\n    \ttitle : 'Query'\n    }]\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/layout/QueryTabPanel.js\n// module id = 35\n// module chunks = 0","Ext.define('Planche.view.layout.ResultTabPanel', {\n    extend  : 'Ext.tab.Panel',\n    xtype   : 'result-tab-panel',\n\tlayout  : 'fit',\n\tregion\t: 'south',\n\tsplit\t: true,\n\tborder\t: true,\n\twidth\t: '100%',\n\theight\t: 300,\n    items : [{\n    \txtype : 'message-tab'\n    },{\n    \txtype : 'table-data-tab'\n    },{\n    \txtype : 'info-tab'\n    },{\n    \txtype : 'history-tab'\n    }]\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/layout/ResultTabPanel.js\n// module id = 36\n// module chunks = 0","Ext.define('Planche.view.layout.QueryEditor', {\n\textend\t\t: 'Ext.Component',\n\txtype\t\t: 'query-editor',\n\tregion\t\t: 'center',\n\theader\t\t: false,\n\tborder\t\t: true,\n\twidth\t\t: '100%',\n\tflex\t\t: 1,\n\tbodyPadding\t: 5,\n\thtml\t\t: '<textarea></textarea>'\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/layout/QueryEditor.js\n// module id = 37\n// module chunks = 0","Ext.define('Planche.view.layout.HistoryTab', {\n\textend\t\t: 'Ext.Component',\n\txtype\t\t: 'history-tab',\n\ticon\t\t: 'resources/images/icon_history.png',\n\ttitle\t\t: 'History',\n\tsplit\t\t: true,\n\tborder\t\t: false,\n\tautoScroll\t: true,\n\tflex\t\t: 1,\n\thtml\t\t: '<textarea></textarea>'\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/layout/HistoryTab.js\n// module id = 38\n// module chunks = 0","Ext.define('Planche.view.layout.InfoTab', {\n    extend: 'Ext.container.Container',\n    xtype : 'info-tab',\n\ticon    : 'resources/images/icon_info.png',\n\ttitle   : 'Info',\n\tsplit\t: true,\n\tborder\t: false,\n\tflex\t: 1,\n\tpadding : '10 10 10 10',\n\tautoScroll: true\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/layout/InfoTab.js\n// module id = 39\n// module chunks = 0","Ext.define('Planche.view.layout.TableDataTab', {\n    extend: 'Ext.container.Container',\n    xtype : 'table-data-tab',\n    layout: 'fit',\n    split : true,\n    icon  : 'resources/images/icon_table.png',\n    title : 'Table Data',\n    border: false,\n    frame : false,\n    flex  : 1\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/layout/TableDataTab.js\n// module id = 40\n// module chunks = 0","Ext.define('Planche.view.layout.MessageTab', {\n\textend\t\t: 'Ext.container.Container',\n\txtype\t\t: 'message-tab',\n\ticon\t\t: 'resources/images/icon_message.png',\n\ttitle\t\t: 'Messages',\n\tsplit\t\t: true,\n\tborder\t\t: false,\n\tautoScroll\t: true,\n\tpadding\t\t: '10 10 10 10',\n\tflex\t\t: 1\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/layout/MessageTab.js\n// module id = 41\n// module chunks = 0","Ext.define('Planche.view.layout.QueryTab', {\n    extend: 'Ext.container.Container',\n    xtype : 'query-tab',\n    layout: 'border',\n    icon  : 'resources/images/icon_document_add.png',\n    border: false,\n    width : '100%',\n    flex  : 1,\n    items : [{\n        xtype : 'query-editor'\n    },{\n        xtype : 'result-tab-panel'\n    }]\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/layout/QueryTab.js\n// module id = 42\n// module chunks = 0","Ext.define('Planche.view.layout.SchemaTree', {\n    extend       : 'Ext.tree.Panel',\n    alias        : 'widget.schema-tree',\n    config : {\n        database : null\n    },\n    initComponent: function() {\n\n        this.store = Ext.create('Planche.store.SchemaTree');\n        this.callParent(arguments);\n    },\n    width        : 200,\n    height       : '100%',\n    region       : 'west',\n    split        : true\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/layout/SchemaTree.js\n// module id = 43\n// module chunks = 0","Ext.define('Planche.store.SchemaTree', {\n    extend: 'Ext.data.TreeStore',\n    root: {\n        type : 'root',\n        text : 'root@',\n        expanded: true\n    },\n    initComponent : function(){\n\n        this.callParent(arguments);\n    }\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/store/SchemaTree.js\n// module id = 44\n// module chunks = 0","Ext.define('Planche.view.database.DownloadToCSV', {\n    extend       : 'Planche.lib.Window',\n    id           : 'download-to-csv-window',\n    title        : 'Download To CSV',\n    stateful     : true,\n    bodyStyle    : \"background-color:#FFFFFF\",\n    width        : 600,\n    height       : 500,\n    border       : false,\n    modal        : true,\n    plain        : true,\n    fixed        : true,\n    shadow       : false,\n    autoShow     : true,\n    constrain    : true,\n    config       : {\n        database   : null,\n        application: null\n    },\n    initComponent: function() {\n\n        var app = this.getApplication();\n\n        this.items = [{\n            xtype: 'download-to-csv-target-list',\n            title: 'Select to export target',\n            id   : 'download-to-csv-target-list'\n        }];\n\n        this.callParent(arguments);\n    },\n    buttons      : [{\n        id  : 'download-to-csv-btn-export',\n        text: 'Export'\n    }, {\n        id  : 'download-to-csv-btn-close',\n        text: 'Close'\n    }]\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/database/DownloadToCSV.js\n// module id = 45\n// module chunks = 0","Ext.define('Planche.view.database.SchemaToHTML', {\n    extend       : 'Planche.lib.Window',\n    id           : 'schema-to-html-window',\n    title        : 'Schema to HTML',\n    stateful     : true,\n    bodyStyle    : \"background-color:#FFFFFF\",\n    width        : 1000,\n    height       : 500,\n    border       : false,\n    modal        : true,\n    plain        : true,\n    fixed        : true,\n    shadow       : false,\n    autoShow     : true,\n    constrain    : true,\n    config       : {\n        database   : null,\n        application: null\n    },\n    initComponent: function() {\n\n        var app = this.getApplication();\n\n        this.items = [{\n            xtype     : 'panel',\n            id        : 'schema-to-html',\n            layout    : 'fit',\n            padding   : '10 10 10 10',\n            autoScroll: true,\n            border    : false\n        }];\n\n        this.callParent(arguments);\n    },\n    buttons      : [{\n        id  : 'schema-to-html-btn-close',\n        text: 'Close'\n    }]\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/database/SchemaToHTML.js\n// module id = 46\n// module chunks = 0","Ext.define('Planche.view.database.DatabaseSchemaTree', {\n    extend       : 'Ext.tree.Panel',\n    alias        : 'widget.database-schema-tree',\n    config       : {\n        database: null\n    },\n    rootVisible  : true,\n    width        : 200,\n    height       : '100%',\n    initComponent: function() {\n\n        this.store = Ext.create('Planche.store.DatabaseSchemaTree');\n        this.callParent(arguments);\n    }\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/database/DatabaseSchemaTree.js\n// module id = 47\n// module chunks = 0","Ext.define('Planche.view.database.CopyDatabaseWindow', {\n    extend       : 'Planche.lib.Window',\n    id           : 'copy-database-window',\n    title        : 'Copy table(s) to other database',\n    stateful     : true,\n    bodyStyle    : \"background-color:#FFFFFF\",\n    width        : 1000,\n    height       : 500,\n    overflowY    : 'auto',\n    autoScroll   : true,\n    border       : false,\n    modal        : true,\n    plain        : true,\n    fixed        : true,\n    shadow       : false,\n    autoShow     : true,\n    constrain    : true,\n    config       : {\n        database   : null,\n        application: null\n    },\n    initComponent: function() {\n\n        var app = this.getApplication();\n\n        this.items = [{\n            xtype : 'panel',\n            layout: 'border',\n            items : [{\n                xtype   : 'database-schema-tree',\n                title   : 'Source',\n                region  : 'west',\n                width   : 300,\n                split   : true,\n                id      : 'copy-database-source-tree',\n                database: this.getDatabase()\n            }, {\n                xtype : 'copy-database-target-list',\n                title : 'Target',\n                region: 'center',\n                id    : 'copy-database-target-grid'\n            }, {\n                xtype : 'form',\n                title : 'Option',\n                layout: 'vbox',\n                region: 'east',\n                width : 300,\n                split : true,\n                id    : 'copy-database-option-form',\n                items : [{\n                    xtype   : 'radiogroup',\n                    margin  : '5 0 0 5',\n                    id      : 'copy-database-option-1',\n                    layout  : 'vbox',\n                    defaults: {\n                        xtype: 'radiofield'\n                    },\n                    items   : [{\n                        boxLabel  : 'Structure & Data',\n                        name      : 'copy-database-option-1',\n                        inputValue: 1,\n                        checked   : true\n                    }, {\n                        boxLabel  : 'Structure Only',\n                        name      : 'copy-database-option-1',\n                        inputValue: 2\n                    }]\n                }, {\n                    xtype   : 'checkbox',\n                    margin  : '0 0 0 8',\n                    id      : 'copy-database-option-2',\n                    name    : 'copy-database-option-2',\n                    boxLabel: 'Drop if exists in target',\n                    value   : 1,\n                    checked : true\n                }, {\n                    xtype   : 'checkbox',\n                    margin  : '0 0 0 8',\n                    id      : 'copy-database-option-3',\n                    name    : 'copy-database-option-3',\n                    boxLabel: 'Use bulk INSERT(Only Post Method Ajax)',\n                    value   : 1,\n                    checked : true\n                }]\n            }]\n        }];\n\n        this.callParent(arguments);\n    },\n    buttons      : [{\n        id  : 'copy-database-btn-copy',\n        text: 'Copy'\n    }, {\n        id  : 'copy-database-btn-close',\n        text: 'Close'\n    }]\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/database/CopyDatabaseWindow.js\n// module id = 48\n// module chunks = 0","Ext.define('Planche.lib.SchemaTree', {\n    extend: 'Ext.app.Controller',\n    config: {\n        databasesChildren: [{\n            type: 'tables',\n            text: 'Tables',\n            leaf: false\n        }, {\n            type: 'views',\n            text: 'Views',\n            leaf: false\n        }, {\n            type: 'procedures',\n            text: 'Procedures',\n            leaf: false\n        }, {\n            type: 'functions',\n            text: 'Functions',\n            leaf: false\n        }, {\n            type: 'triggers',\n            text: 'Triggers',\n            leaf: false\n        }, {\n            type: 'events',\n            text: 'Events',\n            leaf: false\n        }],\n        tablesChildren   : [{\n            type: 'columns',\n            text: 'Columns',\n            leaf: false\n        }, {\n            type: 'indexes',\n            text: 'Indexes',\n            leaf: false\n        }],\n        rootType         : 'root',\n        tables           : {}\n    },\n\n    constructor: function(config) {\n\n        this.callParent(arguments);\n    },\n\n    selectNode: function(tree, node, index, eOpts) {\n\n        var app = this.getApplication();\n\n        if (node.raw.type == 'table' || node.raw.type == 'view') {\n\n            if (app.getActiveTableDataTab().isVisible()) {\n\n                var db = app.getSelectedDatabase(),\n                    table = app.getSelectedNode();\n\n                if (app.openMode == 'select') {\n\n                    app.openTable(db, table);\n                }\n                else {\n\n                    app.countTable(db, table);\n                }\n            }\n        }\n    },\n\n    expandTree: function(node, nodeConfig) {\n\n        if (node.childNodes.length > 0) { return; }\n        this.loadTree(node, nodeConfig);\n    },\n\n    loadTree: function(node, nodeConfig) {\n\n        //var loadFunc = this['load' + (node.raw.type == this.getRootType() ? 'Databases' : node.data.text.replace(/\\s/gi, ''))];\n        var loadFunc = this['load' + (node.raw.type == this.getRootType() ? 'Databases' : node.raw.type.substring(0, 1).toUpperCase() + node.raw.type.substring(1))];\n\n        if (loadFunc) {\n\n            node.removeAll();\n            Ext.Function.bind(loadFunc, this)(node, nodeConfig);\n        }\n    },\n\n    reloadTree: function(node, nodeConfig) {\n\n        this.loadTree(node, nodeConfig);\n    },\n\n    loadDatabases: function(node, nodeConfig) {\n\n        var app = this.application,\n            me = this,\n            tree = node.getOwnerTree(),\n            tab = tree.up('connect-tab');\n\n        nodeConfig = nodeConfig || {};\n\n        tree.setLoading(true);\n\n        app.tunneling({\n            connection: tab,\n            query     : app.getAPIS().getQuery('SHOW_DATABASE'),\n            success   : function(config, response) {\n\n                var children = [];\n                Ext.Array.each(response.records, function(row, idx) {\n\n                    children.push(Ext.apply({\n                        type    : 'database',\n                        path    : ['database', row[0]].join(\"`\"),\n                        text    : row[0],\n                        icon    : 'resources/images/icon_database.png',\n                        leaf    : false,\n                        children: (function(){\n\n                            var subNode = Ext.clone(me.getDatabasesChildren());\n                            Ext.Array.each(subNode, function(child){\n\n                                child.path = [child.type, row[0], child.text].join(\"`\");\n                            });\n\n                            return subNode;\n                        })()\n                    }, nodeConfig));\n                });\n\n                if (children.length == 0) {\n\n                    tree.setLoading(false);\n                    return;\n                }\n\n                node.appendChild(children);\n                tree.setLoading(false);\n            },\n            failure   : function(config, response) {\n\n                Ext.Msg.alert('Error', response.message);\n                tree.setLoading(false);\n            }\n        });\n    },\n\n    loadTables: function(node, nodeConfig) {\n\n        var app = this.application,\n            me = this,\n            db = app.getParentNode(node, 'database'),\n            tree = node.getOwnerTree();\n\n        nodeConfig = nodeConfig || {};\n\n        tree.setLoading(true);\n\n        app.tunneling({\n            db     : db,\n            query  : app.getAPIS().getQuery('SHOW_ALL_TABLE_STATUS', db),\n            success: function(config, response) {\n\n                var children = [];\n                node.removeAll();\n                Ext.Array.each(response.records, function(row, idx) {\n\n                    if (row[1] == 'NULL') { return; }\n\n                    children.push(Ext.apply({\n                        type    : 'table',\n                        path    : ['table', db, row[0]].join(\"`\"),\n                        text    : row[0],\n                        icon    : 'resources/images/icon_table.png',\n                        leaf    : false,\n                        children: (function(){\n\n                            var subNode = Ext.clone(me.getTablesChildren());\n                            Ext.Array.each(subNode, function(child){\n\n                                child.path = [child.type, db, row[0], child.text].join(\"`\");\n                            });\n\n                            return subNode;\n                        })()\n                    }, nodeConfig));\n                });\n\n                if (children.length == 0) {\n\n                    tree.setLoading(false);\n                    return;\n                }\n\n                node.appendChild(children);\n\n                tree.fireEvent('iteminsert', tree, node);\n\n                tree.setLoading(false);\n            },\n            failure: function(config, response) {\n\n                Ext.Msg.alert('Error', response.message);\n                tree.setLoading(false);\n            }\n        });\n    },\n\n    loadViews: function(node, nodeConfig) {\n\n        var app = this.application,\n            db = app.getParentNode(node, 'database'),\n            tree = node.getOwnerTree();\n\n        nodeConfig = nodeConfig || {};\n\n        tree.setLoading(true);\n\n        app.tunneling({\n            db     : db,\n            query  : app.getAPIS().getQuery('SHOW_VIEWS', db),\n            success: function(config, response) {\n\n                var children = [];\n                node.removeAll();\n                Ext.Array.each(response.records, function(row, idx) {\n\n                    children.push(Ext.apply({\n                        type: 'view',\n                        path: ['view', db, row[0]].join(\"`\"),\n                        text: row[0],\n                        leaf: true\n                    }, nodeConfig));\n                });\n\n                if (children.length == 0) {\n\n                    tree.setLoading(false);\n                    return;\n                }\n\n                node.appendChild(children);\n                tree.setLoading(false);\n            },\n            failure: function(config, response) {\n\n                Ext.Msg.alert('Error', response.message);\n                tree.setLoading(false);\n            }\n        });\n    },\n\n    loadProcedures: function(node, nodeConfig) {\n\n        var app = this.application,\n            db = app.getParentNode(node, 'database'),\n            tree = node.getOwnerTree();\n\n        nodeConfig = nodeConfig || {};\n\n        tree.setLoading(true);\n\n        app.tunneling({\n            db     : db,\n            query  : app.getAPIS().getQuery('SHOW_PROCEDURES', db),\n            success: function(config, response) {\n\n                var children = [];\n                node.removeAll();\n                Ext.Array.each(response.records, function(row, idx) {\n\n                    children.push(Ext.apply({\n                        type: 'procedure',\n                        path: ['procedure', db, row[1]].join(\"`\"),\n                        text: row[1],\n                        leaf: true\n                    }, nodeConfig));\n                });\n\n                if (children.length == 0) {\n\n                    tree.setLoading(false);\n                    return;\n\n                }\n\n                node.appendChild(children);\n                tree.setLoading(false);\n            },\n            failure: function(config, response) {\n\n                Ext.Msg.alert('Error', response.message);\n                tree.setLoading(false);\n            }\n        });\n    },\n\n    loadFunctions: function(node, nodeConfig) {\n\n        var app = this.application,\n            db = app.getParentNode(node, 'database'),\n            tree = node.getOwnerTree();\n\n        nodeConfig = nodeConfig || {};\n\n        tree.setLoading(true);\n\n        app.tunneling({\n            db     : db,\n            query  : app.getAPIS().getQuery('SHOW_FUNCTIONS', db),\n            success: function(config, response) {\n\n                var children = [];\n                node.removeAll();\n                Ext.Array.each(response.records, function(row, idx) {\n\n                    children.push(Ext.apply({\n                        type: 'function',\n                        path: ['function', db, row[1]].join(\"`\"),\n                        text: row[1],\n                        leaf: true\n                    }, nodeConfig));\n                });\n\n                if (children.length == 0) {\n\n                    tree.setLoading(false);\n                    return;\n                }\n\n                node.appendChild(children);\n                tree.setLoading(false);\n            },\n            failure: function(config, response) {\n\n                Ext.Msg.alert('Error', response.message);\n                tree.setLoading(false);\n            }\n        });\n    },\n\n    loadTriggers: function(node, nodeConfig) {\n\n        var app = this.application,\n            db = app.getParentNode(node, 'database'),\n            tree = node.getOwnerTree();\n\n        nodeConfig = nodeConfig || {};\n\n        tree.setLoading(true);\n\n        app.tunneling({\n            db     : db,\n            query  : app.getAPIS().getQuery('SHOW_TRIGGERS', db),\n            success: function(config, response) {\n\n                var children = [];\n                node.removeAll();\n                Ext.Array.each(response.records, function(row, idx) {\n\n                    children.push(Ext.apply({\n                        type: 'trigger',\n                        path: ['trigger', db, row[0]].join(\"`\"),\n                        text: row[0],\n                        leaf: true\n                    }, nodeConfig));\n                });\n\n                if (children.length == 0) {\n\n                    tree.setLoading(false);\n                    return;\n                }\n                node.appendChild(children);\n                tree.setLoading(false);\n            },\n            failure: function(config, response) {\n\n                Ext.Msg.alert('Error', response.message);\n                tree.setLoading(false);\n            }\n        });\n    },\n\n    loadEvents: function(node, nodeConfig) {\n\n        var app = this.application,\n            db = app.getParentNode(node, 'database'),\n            tree = node.getOwnerTree();\n\n        nodeConfig = nodeConfig || {};\n\n        tree.setLoading(true);\n\n        app.tunneling({\n            db     : db,\n            query  : app.getAPIS().getQuery('SHOW_EVENTS', db),\n            success: function(config, response) {\n\n                var children = [];\n                node.removeAll();\n                Ext.Array.each(response.records, function(row, idx) {\n\n                    children.push(Ext.apply({\n                        type: 'event',\n                        path: ['event', db, row[0]].join(\"`\"),\n                        text: row[0],\n                        leaf: true\n                    }, nodeConfig));\n                });\n\n                if (children.length == 0) {\n\n                    tree.setLoading(false);\n                    return;\n                }\n                node.appendChild(children);\n                tree.setLoading(false);\n            },\n            failure: function(config, response) {\n\n                Ext.Msg.alert('Error', response.message);\n                tree.setLoading(false);\n            }\n        });\n    },\n\n    loadColumns: function(node, nodeConfig) {\n\n        var app = this.application,\n            db = app.getParentNode(node),\n            tb = app.getParentNode(node, 'table'),\n            tree = node.getOwnerTree();\n\n        nodeConfig = nodeConfig || {};\n\n        tree.setLoading(true);\n\n        app.tunneling({\n            db     : db,\n            query  : app.getAPIS().getQuery('SHOW_FULL_FIELDS', db, tb),\n            success: function(config, response) {\n\n                var children = [];\n                node.removeAll();\n                Ext.Array.each(response.records, function(row, idx) {\n\n                    children.push(Ext.apply({\n                        type: 'column',\n                        path: ['column', db, tb, row[0]].join(\"`\"),\n                        name: row[0],\n                        text: row[0] + ' ' + row[1] + (row[8] ? ' [ ' + row[8] + ' ] ' : ''),\n                        icon: 'resources/images/icon_' + (row[4] == 'PRI' ? 'primary' : 'column') + '.png',\n                        leaf: true,\n                        qtip: row[8]\n                    }, nodeConfig));\n                });\n\n                if (children.length == 0) {\n\n                    tree.setLoading(false);\n                    return;\n                }\n                node.appendChild(children);\n                tree.setLoading(false);\n            },\n            failure: function(config, response) {\n\n                Ext.Msg.alert('Error', response.message);\n                tree.setLoading(false);\n            }\n        });\n    },\n\n    loadIndexes: function(node, nodeConfig) {\n\n        var app = this.application,\n            db = app.getParentNode(node),\n            tb = app.getParentNode(node, 'table'),\n            tree = node.getOwnerTree();\n\n        nodeConfig = nodeConfig || {};\n\n        tree.setLoading(true);\n\n        app.tunneling({\n            db     : db,\n            query  : app.getAPIS().getQuery('SHOW_INDEXES', db, tb),\n            success: function(config, response) {\n\n                var children = [];\n                node.removeAll();\n                var groups = {};\n                Ext.Array.each(response.records, function(row, idx) {\n\n                    groups[row[2]] = groups[row[2]] || [];\n                    groups[row[2]].push('\\'' + row[4] + '\\'');\n                });\n\n                Ext.Object.each(groups, function(name, columns) {\n\n                    children.push(Ext.apply({\n                        type: 'index',\n                        path: ['index', db, tb, name].join(\"`\"),\n                        text: name + ' (' + columns.join(',') + ')',\n                        icon: 'resources/images/icon_table.png',\n                        leaf: true\n                    }, nodeConfig));\n                });\n\n                if (children.length == 0) {\n\n                    tree.setLoading(false);\n                    return;\n                }\n\n                node.appendChild(children);\n                tree.setLoading(false);\n            },\n            failure: function(config, response) {\n\n                Ext.Msg.alert('Error', response.message);\n                tree.setLoading(false);\n            }\n        });\n    }\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/lib/SchemaTree.js\n// module id = 49\n// module chunks = 0","Ext.define('Planche.controller.user.Grant', {\r\n    extend: 'Planche.lib.SchemaTree',\r\n    views : [\r\n        'Planche.view.user.Grant',\r\n        'Planche.view.user.GrantSchemaTree',\r\n        'Planche.view.user.GrantUserList'\r\n    ],\r\n    init  : function() {\r\n\r\n        this.callParent(arguments);\r\n\r\n        this.setDatabasesChildren([{\r\n            type: 'tables',\r\n            text: 'Tables',\r\n            leaf: false\r\n        }, {\r\n            type: 'views',\r\n            text: 'Views',\r\n            leaf: false\r\n        }, {\r\n            type: 'procedures',\r\n            text: 'Procedures',\r\n            leaf: false\r\n        }, {\r\n            type: 'functions',\r\n            text: 'Functions',\r\n            leaf: false\r\n        }]);\r\n\r\n        this.setTablesChildren([{\r\n            text: 'Columns',\r\n            leaf: false\r\n        }]);\r\n\r\n        var app = this.getApplication(),\r\n            me  = this;\r\n\r\n        this.control({\r\n            'grant'                                  : {\r\n                boxready: this.initGrant\r\n            },\r\n            '#grant-add-user'                        : {\r\n                click: this.addUser\r\n            },\r\n            '#grant-save-changes'                    : {\r\n                click: this.saveChanges\r\n            },\r\n            '#grant-cancel-changes'                  : {\r\n                click: this.cancelChanges\r\n            },\r\n            '#grant-close'                           : {\r\n                click: this.close\r\n            },\r\n            'grant-priv-list'                        : {\r\n                selectionchange: this.selectPrivList\r\n            },\r\n            'grant-user-list'                        : {\r\n                select: this.selectUserList\r\n            },\r\n            'grant-user-list gridcolumn[text=Edit]'  : {\r\n                click: this.editUser\r\n            },\r\n            'grant-user-list gridcolumn[text=Delete]': {\r\n                click: this.deleteUser\r\n            },\r\n            'grant-schema-tree'                      : {\r\n                beforeitemexpand: this.expandTree,\r\n                reloadTree      : this.reloadTree,\r\n                expandTree      : this.expandTree,\r\n                select          : this.selectSchemaTree\r\n            }\r\n        });\r\n\r\n        app.on('after_save_user', function() {\r\n\r\n            me.initUserList();\r\n        });\r\n    },\r\n\r\n    initWindow: function(result) {\r\n\r\n        Ext.create('Planche.view.user.Grant', {\r\n            application: this.getApplication()\r\n        });\r\n    },\r\n\r\n    initGrant: function() {\r\n\r\n        var tree = this.getSchemaTree(),\r\n            node = tree.getRootNode();\r\n\r\n        this.setRootType('global');\r\n\r\n        this.initUserList();\r\n        this.loadTree(node);\r\n    },\r\n\r\n    initUserList: function() {\r\n\r\n        var app      = this.getApplication(),\r\n            userList = this.getUserList();\r\n\r\n        userList.setLoading(true);\r\n        userList.selModel.deselectAll();\r\n\r\n        app.tunneling({\r\n            query  : app.getAPIS().getQuery('SELECT_ALL_USER'),\r\n            success: function(config, response) {\r\n\r\n                var records = Planche.DBUtil.getAssocArray(response.fields, response.records);\r\n                userList.store.loadData(records);\r\n                userList.setLoading(false);\r\n            }\r\n        });\r\n    },\r\n\r\n    initSchemaTree: function() {\r\n\r\n        var tree = this.getSchemaTree();\r\n\r\n        tree.selModel.deselectAll();\r\n        tree.selModel.select(0, true);\r\n    },\r\n\r\n    initPrivList: function() {\r\n\r\n        var privList = this.getPrivList();\r\n        privList.store.removeAll(true);\r\n    },\r\n\r\n    addUser: function() {\r\n\r\n        this.getApplication().openWindow('user.UserAdd');\r\n    },\r\n\r\n    editUser: function(grid, rowIndex, colIndex, item, e, record) {\r\n\r\n        this.getApplication().openWindow('user.UserAdd', record.data.User, record.data.Host);\r\n    },\r\n\r\n    deleteUser: function(grid, rowIndex, colIndex, item, e, record) {\r\n\r\n        var app = this.getApplication(),\r\n            me  = this;\r\n\r\n        Ext.Msg.confirm('confirm', 'Do you really want to delete the user?', function(res) {\r\n\r\n            if (res == \"no\") {\r\n\r\n                return;\r\n            }\r\n\r\n            app.tunneling({\r\n                query  : app.getAPIS().getQuery('DELETE_USER', record.data.User, record.data.Host),\r\n                success: function() {\r\n\r\n                    me.initUserList();\r\n                }\r\n            });\r\n        });\r\n    },\r\n\r\n    getSelectedUser: function() {\r\n\r\n        var selUser = this.getUserListSelection()[0];\r\n\r\n        if (!selUser) {\r\n\r\n            return false;\r\n        }\r\n\r\n        return selUser;\r\n    },\r\n\r\n    saveChanges: function(btn) {\r\n\r\n        var win        = btn.up('window'),\r\n            app        = this.getApplication(),\r\n            api        = app.getAPIS(),\r\n            me         = this,\r\n            user       = this.getSelectedUser(),\r\n            tunnelings = [],\r\n            messages   = [],\r\n            newPrivs   = user.get('priv'),\r\n            oldPrivs   = user.get('old_priv');\r\n\r\n        if (!user) {\r\n\r\n            Ext.Msg.Alert('No selected user');\r\n            return;\r\n        }\r\n\r\n        Ext.Object.each(newPrivs, function(path, newPriv) {\r\n\r\n            var oldPriv = oldPrivs[path] || [];\r\n\r\n            if (Ext.Array.equals(oldPriv, newPriv)) {\r\n\r\n                return;\r\n            }\r\n\r\n            var on         = \"\",\r\n                option     = \"\",\r\n                path       = path.split(\"`\"),\r\n                type       = path[0],\r\n                func       = 'get' + type.charAt(0).toUpperCase() + type.slice(1) + 'PrivItems',\r\n                cmds       = this[func](),\r\n                grantPriv  = [],\r\n                revokePriv = [];\r\n\r\n            Ext.Array.each(newPriv, function(val, idx) {\r\n\r\n                if (oldPriv.indexOf(val) > -1) {\r\n\r\n                    return;\r\n                }\r\n\r\n                if(!cmds[val]){\r\n\r\n                    return;\r\n                }\r\n\r\n                grantPriv.push(cmds[val]);\r\n\r\n                if (val == 'GRANT') {\r\n\r\n                    option = \"WITH \" + cmds[val];\r\n                    return;\r\n                }\r\n            });\r\n\r\n\r\n            Ext.Array.each(oldPriv, function(val, idx) {\r\n\r\n                if (newPriv.indexOf(val) > -1) {\r\n\r\n                    return;\r\n                }\r\n\r\n                if(!cmds[val]){\r\n\r\n                    return;\r\n                }\r\n\r\n                revokePriv.push(cmds[val]);\r\n            });\r\n\r\n            switch (type.toLowerCase()) {\r\n\r\n                case \"global\" :\r\n\r\n                    on = \"*.*\";\r\n                    grantPriv = grantPriv.join(\",\");\r\n                    revokePriv = revokePriv.join(\",\");\r\n                    break;\r\n                case \"database\" :\r\n\r\n                    on = \"`\" + path[1] + \"`.*\";\r\n                    grantPriv = grantPriv.join(\",\");\r\n                    revokePriv = revokePriv.join(\",\");\r\n                    break;\r\n\r\n                case \"table\" :\r\n\r\n                    on = \"`\" + path[1] + \"`.`\" + path[2] + \"`\";\r\n                    grantPriv = grantPriv.join(\",\");\r\n                    revokePriv = revokePriv.join(\",\");\r\n                    break;\r\n\r\n                case \"view\" :\r\n\r\n                    on = \"`\" + path[1] + \"`.`\" + path[2] + \"`\";\r\n                    grantPriv = grantPriv.join(\",\");\r\n                    revokePriv = revokePriv.join(\",\");\r\n                    break;\r\n\r\n                case \"column\" :\r\n\r\n                    on = \"`\" + path[1] + \"`.`\" + path[2] + \"`\";\r\n                    grantPriv = grantPriv.length > 0 ? (path[2] + \"(\" + grantPriv.join(\"),\" + path[2] + \"(\") + \")\") : \"\";\r\n                    revokePriv = revokePriv.length > 0 ? (path[2] + \"(\" + revokePriv.join(\"),\" + path[2] + \"(\") + \")\") : \"\";\r\n                    break;\r\n\r\n                case \"procedure\" :\r\n\r\n                    on = \"PROCEDURE `\" + path[1] + \"`.`\" + path[2] + \"`\";\r\n                    grantPriv = grantPriv.join(\",\");\r\n                    revokePriv = revokePriv.join(\",\");\r\n                    break;\r\n\r\n                case \"function\" :\r\n\r\n                    on = \"FUNCTION `\" + path[1] + \"`.`\" + path[2] + \"`\";\r\n                    grantPriv = grantPriv.join(\",\");\r\n                    revokePriv = revokePriv.join(\",\");\r\n                    break;\r\n            }\r\n\r\n            if (grantPriv) {\r\n\r\n                tunnelings.push({\r\n                    query  : api.getQuery('GRANT', grantPriv, user.get('User'), user.get('Host'), on, option),\r\n                    failure: function(config, response) {\r\n\r\n                        messages.push(app.generateError(config.query, response.message));\r\n                    }\r\n                });\r\n            }\r\n\r\n            if (revokePriv) {\r\n\r\n                tunnelings.push({\r\n                    query  : api.getQuery('REVOKE', revokePriv, user.get('User'), user.get('Host'), on, option),\r\n                    failure: function(config, response) {\r\n\r\n                        messages.push(app.generateError(config.query, response.message));\r\n                    }\r\n                });\r\n            }\r\n\r\n\r\n        }, this);\r\n\r\n        if (tunnelings.length == 0) {\r\n\r\n            Ext.Msg.alert('info', 'Grants has no changes');\r\n            return;\r\n        }\r\n\r\n        app.tunnelings(tunnelings, {\r\n            start  : function() {\r\n\r\n                win.setDisabled(true);\r\n            },\r\n            success: function() {\r\n\r\n                me.initPrivList();\r\n                me.initSchemaTree();\r\n\r\n                Ext.Msg.alert('info', 'Successfully apply the permissions.');\r\n                win.setDisabled(false);\r\n            },\r\n            failure: function() {\r\n\r\n                app.openMessage(messages);\r\n                win.setDisabled(false);\r\n            }\r\n        });\r\n    },\r\n\r\n    cancelChanges: function(btn) {\r\n\r\n        this.initPrivList();\r\n        this.initSchemaTree();\r\n        this.initUserList();\r\n    },\r\n\r\n    close: function(btn) {\r\n\r\n        btn.up(\"window\").destroy();\r\n    },\r\n\r\n    selectUserList: function() {\r\n\r\n        var me       = this,\r\n            app      = me.getApplication(),\r\n            api      = app.getAPIS(),\r\n            tree     = this.getSchemaTree(),\r\n            user     = this.getSelectedUser(),\r\n            userList = this.getUserList(),\r\n            privList = this.getPrivList(),\r\n            viewList = {};\r\n\r\n        if (user.get('old_priv') && user.get('priv')) {\r\n\r\n            me.initPrivList();\r\n            me.initSchemaTree();\r\n            return;\r\n        }\r\n\r\n        userList.setLoading(true);\r\n        tree.setDisabled(true);\r\n        privList.setDisabled(true);\r\n\r\n        var settings   = {},\r\n            messages   = [],\r\n            tunnelings = [{\r\n                query  : api.getQuery('USER_PRIV', user.get('User'), user.get('Host')),\r\n                success: function(config, response) {\r\n\r\n                    var records = Planche.DBUtil.getAssocArray(response.fields, response.records, true)[0],\r\n                        path    = 'global';\r\n                    settings[path] = settings[path] || [];\r\n                    Ext.Object.each(records, function(key, val) {\r\n\r\n                        if (val != 'Y') {\r\n\r\n                            return;\r\n                        }\r\n\r\n                        if (key.indexOf('_PRIV') == -1) {\r\n\r\n                            return;\r\n                        }\r\n\r\n                        settings[path].push(key.toUpperCase());\r\n                    });\r\n                },\r\n                failure: function(config, response) {\r\n\r\n                    messages.push(app.generateError(config.query, response.message));\r\n                }\r\n            }, {\r\n                query  : api.getQuery('USER_DATABASE_PRIV', user.get('User'), user.get('Host')),\r\n                success: function(config, response) {\r\n\r\n                    var records = Planche.DBUtil.getAssocArray(response.fields, response.records, true),\r\n                        path    = '';\r\n                    Ext.Array.each(records, function(row) {\r\n\r\n                        path = ['database', row.DB].join(\"`\");\r\n                        settings[path] = settings[path] || [];\r\n\r\n                        Ext.Object.each(row, function(key, val) {\r\n\r\n                            if (val != 'Y') {\r\n\r\n                                return;\r\n                            }\r\n\r\n                            if (key.indexOf('_PRIV') == -1) {\r\n\r\n                                return;\r\n                            }\r\n\r\n                            settings[path].push(key.toUpperCase());\r\n                        });\r\n                    });\r\n                },\r\n                failure: function(config, response) {\r\n\r\n                    messages.push(app.generateError(config.query, response.message));\r\n                }\r\n            }, {\r\n                query  : api.getQuery('USER_TABLE_PRIV', user.get('User'), user.get('Host')),\r\n                success: function(config, response) {\r\n\r\n                    var records = Planche.DBUtil.getAssocArray(response.fields, response.records, true),\r\n                        path    = '',\r\n                        type    = '';\r\n                    Ext.Array.each(records, function(row) {\r\n\r\n                        if (!row.TABLE_PRIV) {\r\n\r\n                            return;\r\n                        }\r\n\r\n                        type = viewList[row.DB].indexOf(row.TABLE_NAME) > -1 ? 'view' : 'table';\r\n\r\n                        path = [type, row.DB, row.TABLE_NAME].join(\"`\");\r\n                        settings[path] = settings[path] || [];\r\n                        settings[path] = row.TABLE_PRIV.toUpperCase().split(\",\");\r\n                    });\r\n                },\r\n                failure: function(config, response) {\r\n\r\n                    messages.push(app.generateError(config.query, response.message));\r\n                }\r\n            }, {\r\n                query  : api.getQuery('USER_COLUMN_PRIV', user.get('User'), user.get('Host')),\r\n                success: function(config, response) {\r\n\r\n                    var records = Planche.DBUtil.getAssocArray(response.fields, response.records, true),\r\n                        path    = '';\r\n                    Ext.Array.each(records, function(row) {\r\n\r\n                        if (!row.COLUMN_PRIV) {\r\n\r\n                            return;\r\n                        }\r\n\r\n                        path = ['column', row.DB, row.TABLE_NAME, row.COLUMN_NAME].join(\"`\");\r\n                        settings[path] = settings[path] || [];\r\n                        settings[path] = row.COLUMN_PRIV.toUpperCase().split(\",\");\r\n                    });\r\n                },\r\n                failure: function(config, response) {\r\n\r\n                    messages.push(app.generateError(config.query, response.message));\r\n                }\r\n            }, {\r\n                query  : api.getQuery('USER_PROC_PRIV', user.get('User'), user.get('Host')),\r\n                success: function(config, response) {\r\n\r\n                    var records = Planche.DBUtil.getAssocArray(response.fields, response.records, true),\r\n                        path    = '';\r\n                    Ext.Array.each(records, function(row) {\r\n\r\n                        if (!row.PROC_PRIV) {\r\n\r\n                            return;\r\n                        }\r\n\r\n                        path = [row.ROUTINE_TYPE, row.DB, row.ROUTINE_NAME].join(\"`\").toLowerCase();\r\n                        settings[path] = settings[path] || [];\r\n                        settings[path] = row.PROC_PRIV.toUpperCase().split(\",\");\r\n                    });\r\n                },\r\n                failure: function(config, response) {\r\n\r\n                    messages.push(app.generateError(config.query, response.message));\r\n                }\r\n            }];\r\n\r\n        app.tunneling({\r\n            query  : api.getQuery('SHOW_DATABASES'),\r\n            success: function(config, response) {\r\n\r\n                var records        = Planche.DBUtil.getAssocArray(response.fields, response.records, true),\r\n                    viewTunnelings = [];\r\n\r\n                Ext.Array.each(records, function(row) {\r\n\r\n                    var db = row.DATABASE;\r\n\r\n                    viewList[db] = viewList[db] || [];\r\n\r\n                    viewTunnelings.push({\r\n                        query  : api.getQuery('SHOW_DATABASE_VIEWS', db),\r\n                        success: function(config, response) {\r\n\r\n                            Ext.Array.each(response.records, function(row2) {\r\n\r\n                                viewList[db].push(row2[0]);\r\n                            });\r\n                        },\r\n                        failure: function(config, response) {\r\n\r\n                            messages.push(app.generateError(config.query, response.message));\r\n                        }\r\n                    });\r\n                });\r\n\r\n                app.tunnelings(viewTunnelings, {\r\n                    start  : function() {\r\n\r\n                        userList.setLoading(true);\r\n                        tree.setDisabled(true);\r\n                    },\r\n                    success: function() {\r\n\r\n                        app.tunnelings(tunnelings, {\r\n                            success: function() {\r\n\r\n                                user.set('old_priv', Ext.clone(settings));\r\n                                user.set('priv', Ext.clone(settings));\r\n\r\n                                me.initPrivList();\r\n                                me.initSchemaTree();\r\n\r\n                                userList.setLoading(false);\r\n                                tree.setDisabled(false);\r\n                            },\r\n                            failure: function() {\r\n\r\n                                app.openMessage(messages);\r\n\r\n                                userList.setLoading(false);\r\n                                tree.setDisabled(false);\r\n                            }\r\n                        });\r\n                    },\r\n                    failure: function() {\r\n\r\n                        app.openMessage(messages);\r\n\r\n                        userList.setLoading(false);\r\n                        tree.setDisabled(false);\r\n                    }\r\n                })\r\n            },\r\n            failure: function(config, response) {\r\n\r\n                messages.push(app.generateError(config.query, response.message));\r\n            }\r\n        });\r\n    },\r\n\r\n    selectPrivList: function() {\r\n\r\n        var user          = this.getSelectedUser(),\r\n            selTree       = this.getSchemaTreeSelection(),\r\n            privList      = this.getPrivList(),\r\n            selectedPrivs = privList.selModel.getSelection().map(function(model) {\r\n\r\n                return model.get('priv');\r\n            }),\r\n\r\n            settings      = user.get('priv');\r\n\r\n        settings[selTree[0].raw.path] = selectedPrivs;\r\n\r\n        user.set('priv', settings);\r\n\r\n        this.getSaveChangeBtn().setDisabled(false);\r\n    },\r\n\r\n    selectSchemaTree: function(tree, record, index) {\r\n\r\n        var me       = this,\r\n            privList = this.getPrivList(),\r\n            user     = this.getSelectedUser(),\r\n            type     = record.raw.type,\r\n            path     = record.raw.path,\r\n            records  = [];\r\n\r\n        privList.setDisabled(true);\r\n\r\n        if (!type) {\r\n\r\n            privList.store.loadData(records);\r\n            privList.setDisabled(false);\r\n            return;\r\n        }\r\n\r\n        var func = 'get' + type.charAt(0).toUpperCase() + type.slice(1) + 'PrivItems';\r\n        Ext.Object.each(me[func](), function(priv, cmd) {\r\n\r\n            records.push({\r\n                priv: priv,\r\n                cmd : cmd\r\n            });\r\n        });\r\n\r\n        try {\r\n\r\n            priv = user.get('priv')[path] || [];\r\n        }\r\n        catch (e) {\r\n\r\n            priv = [];\r\n        }\r\n\r\n\r\n        privList.store.loadData(records);\r\n\r\n        var selModel = privList.selModel;\r\n\r\n        Ext.Array.each(records, function(row, idx) {\r\n\r\n            if (priv.indexOf(row.priv) > -1) {\r\n\r\n                selModel.select(idx, true);\r\n            }\r\n        });\r\n\r\n        privList.store.sync();\r\n\r\n        if (user) {\r\n\r\n            privList.setDisabled(false);\r\n        }\r\n    },\r\n\r\n    getUserList: function() {\r\n\r\n        return Ext.getCmp('grant-user-list');\r\n    },\r\n\r\n    getUserListSelection: function() {\r\n\r\n        return this.getUserList().selModel.getSelection();\r\n    },\r\n\r\n    getSchemaTree: function() {\r\n\r\n        return Ext.getCmp('grant-schema-tree');\r\n    },\r\n\r\n    getSchemaTreeSelection: function() {\r\n\r\n        return this.getSchemaTree().selModel.getSelection();\r\n    },\r\n\r\n    getPrivList: function() {\r\n\r\n        return Ext.getCmp('grant-priv-list');\r\n    },\r\n\r\n    getPrivListSelection: function() {\r\n\r\n        return this.getPrivList().selModel.getSelection();\r\n    },\r\n\r\n    getSaveChangeBtn: function() {\r\n\r\n        return Ext.getCmp('grant-save-changes');\r\n    },\r\n\r\n    getCancelChangeBtn: function() {\r\n\r\n        return Ext.getCmp('grant-cancel-changes');\r\n    },\r\n\r\n\r\n    getGlobalPrivItems: function() {\r\n\r\n        return {\r\n            'SELECT_PRIV'           : 'SELECT',\r\n            'INSERT_PRIV'           : 'INSERT',\r\n            'UPDATE_PRIV'           : 'UPDATE',\r\n            'DELETE_PRIV'           : 'DELETE',\r\n            'CREATE_PRIV'           : 'CREATE',\r\n            'DROP_PRIV'             : 'DROP',\r\n            'RELOAD_PRIV'           : 'RELOAD',\r\n            'SHUTDOWN_PRIV'         : 'SHUTDOWN',\r\n            'PROCESS_PRIV'          : 'PROCESS',\r\n            'FILE_PRIV'             : 'FILE',\r\n            'GRANT_PRIV'            : 'GRANT OPTION',\r\n            'REFERENCES_PRIV'       : 'REFERENCES',\r\n            'INDEX_PRIV'            : 'INDEX',\r\n            'ALTER_PRIV'            : 'ALTER',\r\n            'SHOW_DB_PRIV'          : 'SHOW DATABASES',\r\n            'SUPER_PRIV'            : 'SUPER',\r\n            'CREATE_TMP_TABLE_PRIV' : 'CREATE TEMPORARY TABLES',\r\n            'LOCK_TABLES_PRIV'      : 'LOCK TABLES',\r\n            'EXECUTE_PRIV'          : 'EXECUTE',\r\n            'REPL_SLAVE_PRIV'       : 'REPLICATION SLAVE',\r\n            'REPL_CLIENT_PRIV'      : 'REPLICATION CLIENT',\r\n            'CREATE_VIEW_PRIV'      : 'CREATE VIEW',\r\n            'SHOW_VIEW_PRIV'        : 'SHOW VIEW',\r\n            'CREATE_ROUTINE_PRIV'   : 'CREATE ROUTINE',\r\n            'ALTER_ROUTINE_PRIV'    : 'ALTER ROUTINE',\r\n            'CREATE_USER_PRIV'      : 'CREATE USER',\r\n            'EVENT_PRIV'            : 'EVENT',\r\n            'TRIGGER_PRIV'          : 'TRIGGER',\r\n            'CREATE_TABLESPACE_PRIV': 'CREATE TABLESPACE'\r\n        };\r\n    },\r\n\r\n    getDatabasePrivItems: function() {\r\n\r\n        return {\r\n            'SELECT_PRIV'          : 'SELECT',\r\n            'INSERT_PRIV'          : 'INSERT',\r\n            'UPDATE_PRIV'          : 'UPDATE',\r\n            'DELETE_PRIV'          : 'DELETE',\r\n            'CREATE_PRIV'          : 'CREATE',\r\n            'DROP_PRIV'            : 'DROP',\r\n            'GRANT_PRIV'           : 'GRANT OPTION',\r\n            'REFERENCES_PRIV'      : 'REFERENCES',\r\n            'INDEX_PRIV'           : 'INDEX',\r\n            'ALTER_PRIV'           : 'ALTER',\r\n            'CREATE_TMP_TABLE_PRIV': 'CREATE TEMPORARY TABLES',\r\n            'LOCK_TABLES_PRIV'     : 'LOCK TABLES',\r\n            'CREATE_VIEW_PRIV'     : 'CREATE VIEW',\r\n            'SHOW_VIEW_PRIV'       : 'SHOW VIEW',\r\n            'CREATE_ROUTINE_PRIV'  : 'CREATE ROUTINE',\r\n            'ALTER_ROUTINE_PRIV'   : 'ALTER ROUTINE',\r\n            'EXECUTE_PRIV'         : 'EXECUTE',\r\n            'EVENT_PRIV'           : 'EVENT',\r\n            'TRIGGER_PRIV'         : 'TRIGGER'\r\n        };\r\n    },\r\n\r\n    getTablePrivItems: function() {\r\n\r\n        return {\r\n            'ALTER'      : 'ALTER',\r\n            'CREATE'     : 'CREATE',\r\n            'CREATE VIEW': 'CREATE VIEW',\r\n            'DELETE'     : 'DELETE',\r\n            'DROP'       : 'DROP',\r\n            'GRANT'      : 'GRANT OPTION',\r\n            'INDEX'      : 'INDEX',\r\n            'INSERT'     : 'INSERT',\r\n            'REFERENCES' : 'REFERENCES',\r\n            'SELECT'     : 'SELECT',\r\n            'SHOW_VIEW'  : 'SHOW VIEW',\r\n            'TRIGGER'    : 'TRIGGER',\r\n            'UPDATE'     : 'UPDATE'\r\n        };\r\n    },\r\n\r\n    getColumnPrivItems: function() {\r\n\r\n        return {\r\n            'INSERT'    : 'INSERT',\r\n            'REFERENCES': 'REFERENCES',\r\n            'SELECT'    : 'SELECT',\r\n            'UPDATE'    : 'UPDATE'\r\n        };\r\n    },\r\n\r\n    getViewPrivItems: function() {\r\n\r\n        return {\r\n            'ALTER'      : 'ALTER',\r\n            'CREATE'     : 'CREATE',\r\n            'CREATE VIEW': 'CREATE VIEW',\r\n            'DELETE'     : 'DELETE',\r\n            'DROP'       : 'DROP',\r\n            'GRANT'      : 'GRANT OPTION',\r\n            'INDEX'      : 'INDEX',\r\n            'INSERT'     : 'INSERT',\r\n            'REFERENCES' : 'REFERENCES',\r\n            'SELECT'     : 'SELECT',\r\n            'SHOW VIEW'  : 'SHOW VIEW',\r\n            'TRIGGER'    : 'TRIGGER',\r\n            'UPDATE'     : 'UPDATE'\r\n        };\r\n    },\r\n\r\n    getProcedurePrivItems: function() {\r\n\r\n        return {\r\n            'ALTER ROUTINE': 'ALTER ROUTINE',\r\n            'EXECUTE'      : 'EXECUTE',\r\n            'GRANT'        : 'GRANT OPTION'\r\n        };\r\n    },\r\n\r\n    getFunctionPrivItems: function() {\r\n\r\n        return {\r\n            'ALTER ROUTINE': 'ALTER ROUTINE',\r\n            'EXECUTE'      : 'EXECUTE',\r\n            'GRANT'        : 'GRANT OPTION'\r\n        };\r\n    }\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/controller/user/Grant.js\n// module id = 50\n// module chunks = 0","Ext.define('Planche.controller.layout.SchemaTree', {\n    extend: 'Planche.lib.SchemaTree',\n    views : [\n        'Planche.view.layout.SchemaTree'\n    ],\n    stores: [\n        'Planche.store.SchemaTree'\n    ],\n    init  : function() {\n\n        var app = this.getApplication(),\n            me = this;\n\n        this.control({\n            'schema-tree': {\n                select          : function(tree, node, index, eOpts) {\n\n                    app.setSelectedNode(node);\n                    app.setSelectedTree(node.getOwnerTree());\n\n                    this.selectNode(tree, node, index, eOpts);\n                },\n                beforeitemexpand: this.expandTree,\n                show            : this.showTree,\n                reloadTree      : this.reloadTree,\n                expandTree      : this.expandTree,\n                boxready        : function(tree) {\n\n                    var node = tree.getRootNode(),\n                        tab = tree.up('connect-tab'),\n                        task = new Ext.util.DelayedTask();\n\n                    task.delay(100, function() {\n\n                        node.set('text', tab.getUser() + '@' + tab.getHost());\n\n                        app.setSelectedTree(tree);\n\n                        tree.getSelectionModel().select(node);\n\n                        me.loadTree(node);\n\n                    }, this);\n                }\n            },\n            'connect-tab': {\n                show  : this.showTree,\n                select: this.showTree\n            }\n        });\n    },\n\n    showTree: function(tab) {\n\n        var tree = tab.down('schema-tree'),\n            app = this.getApplication(),\n            selected = tree.getSelectionModel().getSelection();\n\n        app.setSelectedTree(tree);\n\n        if(selected.length == 0){\n\n            return;\n        }\n\n        app.setSelectedNode(selected[0]);\n    }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/controller/layout/SchemaTree.js\n// module id = 51\n// module chunks = 0","Ext.define('Planche.controller.database.CopyDatabaseWindow', {\r\n    extend: 'Planche.lib.SchemaTree',\r\n    views : [\r\n        'Planche.view.database.CopyDatabaseWindow',\r\n        'Planche.view.database.DatabaseSchemaTree'\r\n    ],\r\n    config: {\r\n        tablesChildren: []\r\n    },\r\n    init  : function() {\r\n\r\n        this.initCopy();\r\n\r\n        var app = this.getApplication();\r\n\r\n        this.control({\r\n            '#copy-database-source-tree': {\r\n                beforeitemexpand: function(node) {\r\n\r\n                    var selType = app.getSelectedNode(true).raw.type;\r\n\r\n                    this.expandTree(node, {\r\n                        checked: selType === 'database'\r\n                    });\r\n                },\r\n                show            : app.setSelectedTree,\r\n                reloadTree      : function(node) {\r\n\r\n                    var selType = app.getSelectedNode(true).raw.type;\r\n\r\n                    this.reloadTree(node, {\r\n                        checked: selType === 'database'\r\n                    });\r\n                },\r\n                expandTree      : function(node) {\r\n\r\n                    var selType = app.getSelectedNode(true).raw.type;\r\n\r\n                    this.expandTree(node, {\r\n                        checked: selType === 'database'\r\n                    });\r\n                },\r\n                iteminsert : function(node){\r\n\r\n                    var selNode = app.getSelectedNode(true);\r\n                    Ext.Array.each(node.childNodes, function(child, idx){\r\n\r\n                        if(child.raw.text == selNode.raw.text || selNode.raw.type == 'tables'){\r\n\r\n                            child.set('checked', true);\r\n                            child.save();\r\n                        }\r\n                    });\r\n                },\r\n                boxready        : function(tree) {\r\n\r\n                    var me = this,\r\n                        task = new Ext.util.DelayedTask(),\r\n                        node = tree.getRootNode(),\r\n                        db = app.getSelectedDatabase(),\r\n                        table = app.getSelectedTable();\r\n\r\n                    node.set('text', db);\r\n\r\n                    task.delay(100, function() {\r\n\r\n                        tree.getSelectionModel().select(node);\r\n\r\n                        me.loadTree(node, {\r\n                            checked: false\r\n                        });\r\n\r\n                        Ext.Array.each(node.childNodes, function(child, idx){\r\n\r\n                            var checked = false;\r\n\r\n                            if(!table){\r\n\r\n                                checked = true;\r\n                            }\r\n\r\n                            me.expandTree(child, {\r\n                                checked: checked\r\n                            });\r\n\r\n                            child.expand();\r\n                        });\r\n                    });\r\n                }\r\n            },\r\n            '#copy-database-target-grid': {\r\n                boxready: function(grid) {\r\n\r\n                    var connectTabPanel = app.getConnectTabPanel(),\r\n                        connectTabs = connectTabPanel.query('connect-tab');\r\n\r\n                    if (connectTabs == 0) {\r\n\r\n                        return;\r\n                    }\r\n\r\n                    var record = [];\r\n                    connectTabs.map(function(tab) {\r\n\r\n                        if (tab.id === app.getActiveConnectTab().id) {\r\n\r\n                            return;\r\n                        }\r\n\r\n                        var tree = tab.child('treepanel'),\r\n                            root = tree.getRootNode();\r\n\r\n                        root.childNodes.map(function(node) {\r\n\r\n                            record.push({\r\n                                connection: tab.title,\r\n                                database  : node.data.text,\r\n                                tab       : tab\r\n                            });\r\n                        });\r\n                    });\r\n\r\n\r\n                    grid.store.loadData(record);\r\n                },\r\n\r\n                select : function(view, record){\r\n\r\n                    var reqType = window.location.protocol == 'file:' ? 'jsonp' : record.raw.tab.getRequestType(),\r\n                        isJSONP = reqType === 'jsonp';\r\n\r\n                    Ext.getCmp('copy-database-option-3').setDisabled(isJSONP);\r\n                    Ext.getCmp('copy-database-option-3').setValue(!isJSONP);\r\n                }\r\n            },\r\n            '#copy-database-btn-copy'   : {\r\n                click: this.copy\r\n            },\r\n            '#copy-database-btn-close'  : {\r\n                click: this.close\r\n            }\r\n        });\r\n\r\n        this.callParent(arguments);\r\n    },\r\n\r\n    initWindow: function(type, name) {\r\n\r\n        var app = this.getApplication();\r\n\r\n        Ext.create('Planche.view.database.CopyDatabaseWindow', {\r\n            database   : app.getSelectedDatabase(),\r\n            application: app\r\n        });\r\n    },\r\n\r\n    initCopy: function() {\r\n\r\n        this.messages = [];\r\n        this.queue = [];\r\n        this.tableInfo = {};\r\n        this.selectedSource = [];\r\n        this.selectedTarget = [];\r\n        this.copyPerOnce = 1;\r\n    },\r\n\r\n    copy: function(btn) {\r\n\r\n        this.initCopy();\r\n\r\n        var app = this.getApplication(),\r\n            api = app.getAPIS(),\r\n            me = this,\r\n            source = this.getSelectedSource(),\r\n            target = this.getSelectedTarget();\r\n\r\n        if (!source) {\r\n\r\n            Ext.Msg.alert('info', 'Please select a source');\r\n            return;\r\n        }\r\n\r\n        if (!target) {\r\n\r\n            Ext.Msg.alert('info', 'Please select a target');\r\n            return;\r\n        }\r\n\r\n        btn.setDisabled(true);\r\n\r\n        this.addTableCopyQueue(true);\r\n\r\n        Ext.Object.each(source['view'] || [], function(idx, src) {\r\n\r\n            me.addDropObjectQueue('view', target.db, src);\r\n\r\n            me.addQueue(\r\n                'view-structure',\r\n                source.connection,\r\n                source.db,\r\n                api.getQuery('SHOW_CREATE_VIEW', source.db, src),\r\n                me.addCopyQueue,\r\n                ['view']\r\n            );\r\n        });\r\n\r\n        Ext.Object.each(source['procedure'] || [], function(idx, src) {\r\n\r\n            me.addDropObjectQueue('procedure', target.db, src);\r\n\r\n            me.addQueue(\r\n                'procedure-structure',\r\n                source.connection,\r\n                source.db,\r\n                api.getQuery('SHOW_CREATE_PROCEDURE', source.db, src),\r\n                me.addCopyQueue,\r\n                ['procedure']\r\n            );\r\n        });\r\n\r\n        Ext.Object.each(source['function'] || [], function(idx, src) {\r\n\r\n            me.addDropObjectQueue('function', target.db, src);\r\n\r\n            me.addQueue(\r\n                'function-structure',\r\n                source.connection,\r\n                source.db,\r\n                api.getQuery('SHOW_CREATE_FUNCTION', source.db, src),\r\n                me.addCopyQueue,\r\n                ['function']\r\n            );\r\n        });\r\n\r\n        Ext.Object.each(source['trigger'] || [], function(idx, src) {\r\n\r\n            me.addDropObjectQueue('trigger', target.db, src);\r\n\r\n            me.addQueue(\r\n                'trigger-structure',\r\n                source.connection,\r\n                source.db,\r\n                api.getQuery('SHOW_CREATE_TRIGGER', source.db, src),\r\n                me.addTriggerCopyQueue\r\n            );\r\n        });\r\n\r\n        Ext.Object.each(source['event'] || [], function(idx, src) {\r\n\r\n            me.addDropObjectQueue('event', target.db, src);\r\n\r\n            me.addQueue(\r\n                'event-structure',\r\n                source.connection,\r\n                source.db,\r\n                api.getQuery('SHOW_CREATE_EVENT', source.db, src),\r\n                me.addCopyQueue,\r\n                ['event']\r\n            );\r\n        });\r\n\r\n        this.runQueue();\r\n    },\r\n\r\n    close: function(btn) {\r\n\r\n        btn.up('window').destroy();\r\n    },\r\n\r\n    addTriggerCopyQueue: function(config, response) {\r\n\r\n        var app = this.getApplication(),\r\n            row = Planche.DBUtil.getAssocArray(response.fields, response.records)[0],\r\n            query = row['SQL Original Statement'],\r\n            target = this.getSelectedTarget();\r\n\r\n        this.addQueue(\r\n            'trigger-copy',\r\n            target.connection,\r\n            target.db,\r\n            query\r\n        );\r\n    },\r\n\r\n    addCopyQueue: function(config, response, type) {\r\n\r\n        //queue.type을 작업해줘야합니다.\r\n        var app = this.getApplication(),\r\n            row = Planche.DBUtil.getAssocArray(response.fields, response.records)[0],\r\n            query = row['Create ' + type[0].toUpperCase() + type.slice(1)],\r\n            target = this.getSelectedTarget(),\r\n            form = Ext.getCmp('copy-database-option-form'),\r\n            options = form.getValues();\r\n\r\n        this.addQueue(\r\n            (type + '-copy'),\r\n            target.connection,\r\n            target.db,\r\n            query\r\n        );\r\n\r\n        if (options['copy-database-option-1'] !== 1) {\r\n\r\n            this.addTableCopyQueue();\r\n        }\r\n    },\r\n\r\n    addTableCopyQueue: function(init) {\r\n\r\n        var app = this.getApplication(),\r\n            api = app.getAPIS(),\r\n            me = this,\r\n            target = this.getSelectedTarget(),\r\n            form = Ext.getCmp('copy-database-option-form'),\r\n            options = form.getValues();\r\n\r\n        if (init) {\r\n\r\n            this.selectedSource = this.getSelectedSource();\r\n\r\n            if (options['copy-database-option-3'] === 'on') {\r\n\r\n                this.copyPerOnce = 10000;\r\n            }\r\n            else {\r\n\r\n                this.copyPerOnce = 1;\r\n            }\r\n        }\r\n\r\n        this.selectedSource.table = this.selectedSource.table || [];\r\n\r\n        if (this.selectedSource.table.length == 0) {\r\n\r\n            return;\r\n        }\r\n\r\n        var src = this.selectedSource.table.shift();\r\n\r\n        if (!src) {\r\n\r\n            return;\r\n        }\r\n\r\n        me.addQueue(\r\n            'table-structure',\r\n            this.selectedSource.connection,\r\n            this.selectedSource.db,\r\n            api.getQuery('SHOW_CREATE_TABLE', this.selectedSource.db, src),\r\n            me.addCopyQueue,\r\n            ['table']\r\n        );\r\n\r\n        if (options['copy-database-option-2'] === 'on') {\r\n\r\n            me.addDropObjectQueue('table', target.db, src);\r\n        }\r\n\r\n        if (options['copy-database-option-1'] === 1) {\r\n\r\n            me.addQueue(\r\n                'table-count',\r\n                this.selectedSource.connection,\r\n                this.selectedSource.db,\r\n                api.getQuery('SELECT_COUNT', this.selectedSource.db, src),\r\n                me.addDataSelectQueue,\r\n                [this.selectedSource.connection, this.selectedSource.db, src, true]\r\n            );\r\n        }\r\n    },\r\n\r\n    addDropObjectQueue: function(type, db, obj) {\r\n\r\n        var app = this.getApplication(),\r\n            api = app.getAPIS(),\r\n            target = this.getSelectedTarget();\r\n\r\n        this.addQueue(\r\n            'object-drop',\r\n            target.connection,\r\n            target.db,\r\n            api.getQuery('DROP_' + type.toUpperCase(), db, obj, 'IF EXISTS')\r\n        );\r\n    },\r\n\r\n    addDataSelectQueue: function(config, response, connection, db, table, init) {\r\n\r\n        //queue.type을 작업해줘야합니다.\r\n        var app = this.getApplication(),\r\n            api = app.getAPIS();\r\n\r\n        if (init) {\r\n\r\n            this.tableInfo[table] = this.tableInfo[table] || {};\r\n            var info = this.tableInfo[table],\r\n                row = Planche.DBUtil.getAssocArray(response.fields, response.records)[0];\r\n\r\n            info.cnt = parseInt(row.cnt, 10);\r\n            info.offset = 0;\r\n        }\r\n        else {\r\n\r\n            var info = this.tableInfo[table];\r\n            info.offset += this.copyPerOnce;\r\n        }\r\n\r\n        if (info.cnt == 0) {\r\n\r\n            this.addTableCopyQueue();\r\n            return;\r\n        }\r\n\r\n        if ((info.cnt - info.offset) < 1) {\r\n\r\n            this.addTableCopyQueue();\r\n            return;\r\n        }\r\n\r\n        if (info.offset >= info.cnt) {\r\n\r\n            info.offset = info.cnt;\r\n        }\r\n\r\n        var query = api.getQuery('SELECT_TABLE', db, table, '*', 'LIMIT ' + info.offset + ', ' + this.copyPerOnce);\r\n\r\n        this.addQueue(\r\n            'data-copy',\r\n            connection,\r\n            db,\r\n            query,\r\n            this.addDataInsertQueue,\r\n            [connection, db, table]\r\n        );\r\n    },\r\n\r\n    addDataInsertQueue: function(config, response, connection, db, table) {\r\n\r\n        var app = this.getApplication(),\r\n            api = app.getAPIS(),\r\n            me = this,\r\n            target = this.getSelectedTarget();\r\n\r\n        var fields = [];\r\n        response.fields.map(function(field, idx) {\r\n\r\n            fields.push(\"`\" + field.name + \"`\");\r\n        });\r\n\r\n        if (response.records.length === 0) {\r\n\r\n            return;\r\n        }\r\n\r\n        var values = [];\r\n        response.records.map(function(row, idx) {\r\n\r\n            var value = [];\r\n            for (var field in row) {\r\n\r\n                if (row[field] === null) {\r\n\r\n                    value.push(\"NULL\");\r\n                    continue;\r\n                }\r\n                else if (!row[field]) {\r\n\r\n                    value.push(\"''\");\r\n                    continue;\r\n                }\r\n\r\n                value.push(\"'\" + Ext.String.escape(row[field]) + \"'\");\r\n            }\r\n\r\n            values.push(\"(\" + value.join(\",\") + \")\");\r\n        });\r\n\r\n        var query = api.getQuery('INSERT_TABLE_BULK', target.db, table, fields.join(','), values.join(','));\r\n\r\n        me.addQueue(\r\n            'data-insert',\r\n            target.connection,\r\n            target.db,\r\n            query,\r\n            me.addDataSelectQueue,\r\n            [connection, db, table, false]\r\n        );\r\n    },\r\n\r\n    addQueue: function(type, connection, db, query, callback, params) {\r\n\r\n        callback = callback || function() {\r\n        };\r\n        params = params || [];\r\n\r\n        this.queue.push({\r\n            type      : type,\r\n            connection: connection,\r\n            db        : db,\r\n            query     : query,\r\n            callback  : callback,\r\n            params    : params\r\n        });\r\n    },\r\n\r\n    resetQueue: function() {\r\n\r\n        this.queue = [];\r\n    },\r\n\r\n    getQueue: function() {\r\n\r\n        return this.queue.shift();\r\n    },\r\n\r\n    runQueue: function() {\r\n\r\n        var app = this.getApplication(),\r\n            me = this,\r\n            btnCopy = Ext.getCmp('copy-database-btn-copy');\r\n\r\n        var progress = this.getProgressBox(),\r\n            page = {},\r\n            total = {},\r\n            total_page = {},\r\n            copy_per_page = this.copyPerOnce,\r\n            table = null,\r\n            execute;\r\n\r\n        progress.updateProgress(0, 'Processing...');\r\n        (execute = function() {\r\n\r\n            var queue = me.getQueue();\r\n\r\n            if (queue) {\r\n\r\n                app.tunneling({\r\n                    connection: queue.connection,\r\n                    db        : queue.db,\r\n                    query     : queue.query,\r\n                    type      : 'copy',\r\n                    success   : function(config, response) {\r\n\r\n                        if (queue.type == 'table-count') {\r\n\r\n                            table = queue.params[2];\r\n                            total[table] = parseInt(response.records[0][0], 10);\r\n                            total_page[table] = Math.ceil(total[table] / copy_per_page);\r\n                            page[table] = 1;\r\n                        }\r\n\r\n                        if (queue.type == 'data-insert') {\r\n\r\n                            table = queue.params[2];\r\n                            var num = Math.ceil((page[table] / total_page[table]) * 100),\r\n                                val = num / 100,\r\n                                curCnt = page[table] * copy_per_page;\r\n\r\n                            if (curCnt > total[table]) {\r\n\r\n                                curCnt = total[table];\r\n                            }\r\n\r\n                            progress.setTitle('Copy Table to Different Host - ' + queue.params[1] + '.' + table);\r\n                            progress.updateProgress(val, 'Copies ' + num + '% (' + curCnt + '/' + total[table] + ')');\r\n\r\n                            page[table]++;\r\n                        }\r\n\r\n                        queue.callback.apply(me, [config, response].concat(queue.params));\r\n                        execute();\r\n                    },\r\n                    failure   : function(config, response) {\r\n\r\n                        btnCopy.setDisabled(false);\r\n                        me.messages.push(this.generateError(queue.query, response.message));\r\n\r\n                        progress.updateProgress(1, 'Failed! See the error message');\r\n                        setTimeout(function() {\r\n\r\n                            progress.close();\r\n                        }, 2000);\r\n\r\n                        me.openMessage();\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n\r\n                btnCopy.setDisabled(false);\r\n\r\n                progress.updateProgress(1, 'Successfully completed');\r\n\r\n                app.fireEvent('after_copy_tables');\r\n\r\n                setTimeout(function() {\r\n\r\n                    progress.close();\r\n                }, 2000);\r\n\r\n                if (me.openMessage()) {\r\n\r\n                    return;\r\n                }\r\n            }\r\n\r\n        })();\r\n\r\n    },\r\n\r\n    getProgressBox: function() {\r\n\r\n        return Ext.MessageBox.show({\r\n            title       : 'Copy Table to Different Host',\r\n            progressText: 'Copies...',\r\n            width       : 300,\r\n            progress    : true,\r\n            closable    : false,\r\n            hidden      : true\r\n        });\r\n    },\r\n\r\n    getSelectedTarget: function() {\r\n\r\n        var grid = Ext.getCmp('copy-database-target-grid'),\r\n            selected = grid.getSelectionModel().getSelection();\r\n\r\n        if (selected.length == 0) {\r\n\r\n            return false;\r\n        }\r\n\r\n        var target = selected.shift(),\r\n            db = target.raw.database,\r\n            connection = target.raw.tab;\r\n\r\n        return {\r\n            db        : db,\r\n            connection: connection\r\n        }\r\n    },\r\n\r\n    getSelectedSource: function() {\r\n\r\n        var app = this.getApplication(),\r\n            tree = Ext.getCmp('copy-database-source-tree'),\r\n            selected = tree.getChecked(),\r\n            source = {},\r\n            connection = app.getActiveConnectTab(),\r\n            db = tree.getRootNode().get('text'),\r\n            me = this;\r\n\r\n        if (selected.length == 0) {\r\n\r\n            return false;\r\n        }\r\n\r\n        selected.map(function(node, idx) {\r\n\r\n            var type = node.raw.type;\r\n            source[type] = source[type] || [];\r\n            source[type].push(node.raw.text);\r\n        });\r\n\r\n        source.connection = connection;\r\n        source.db = db;\r\n\r\n        return source;\r\n    },\r\n\r\n    openMessage: function(message) {\r\n\r\n        message = message || '';\r\n\r\n        var app = this.getApplication();\r\n\r\n        app.openMessage(message);\r\n\r\n        if (message) {\r\n\r\n            return true;\r\n        }\r\n\r\n        if (this.messages.length > 0) {\r\n\r\n            app.openMessage(this.messages);\r\n            return true;\r\n        }\r\n        else {\r\n\r\n            return false;\r\n        }\r\n    }\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/controller/database/CopyDatabaseWindow.js\n// module id = 52\n// module chunks = 0","Ext.define('Planche.lib.Menu', {\r\n    extend: 'Ext.app.Controller',\r\n    added : false,\r\n    add : function (topBtn) {\r\n\r\n        this.added = true;\r\n    },\r\n\r\n    show: function(topBtn) {\r\n\r\n        if (!this.added) {\r\n\r\n            this.add(topBtn);\r\n        }\r\n\r\n        Ext.Array.each(topBtn.menu.query('menuitem'), function(menu, idx) {\r\n\r\n            switch (typeof menu.allowDisable) {\r\n\r\n                case 'function':\r\n\r\n                    menu.setDisabled(menu.allowDisable.apply(menu.scope || menu, [topBtn, menu]));\r\n                    break;\r\n\r\n                case 'boolean' :\r\n\r\n                    menu.setDisabled(menu.allowDisable);\r\n                    break;\r\n            }\r\n        });\r\n\r\n        topBtn.menu.showBy(topBtn);\r\n    }\r\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/lib/Menu.js\n// module id = 53\n// module chunks = 0","Ext.define('Planche.controller.menu.bookmark.Planche-Wordpress', {\r\n    extend: 'Planche.lib.Menu',\r\n    alternateClassName: 'Planche.controller.menu.Bookmark',\r\n    add   : function(topBtn) {\r\n\r\n        var app = this.getApplication();\r\n\r\n        topBtn.menu.add([{\r\n            text   : 'Add SQL bookmark',\r\n            handler : function(){\r\n\r\n                alert('coming soon');\r\n            }\r\n        }, {\r\n            text   : 'Load SQL bookmark',\r\n            handler : function(){\r\n\r\n                alert('coming soon');\r\n            }\r\n        }]);\r\n\r\n        this.added = true;\r\n    }\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/controller/menu/bookmark/Planche-Wordpress.js\n// module id = 54\n// module chunks = 0","Ext.define('Planche.controller.menu.Help', {\r\n    extend: 'Planche.lib.Menu',\r\n    add   : function(topBtn) {\r\n\r\n        var app = this.getApplication();\r\n\r\n        //Help Toolbar Setting\r\n        topBtn.menu.add([{\r\n            text   : 'About Planche',\r\n            handler : function(){\r\n\r\n                window.open('https://github.com/plancheproject/planche', 'about');\r\n            }\r\n        }, {\r\n            text   : 'Planche issues',\r\n            handler : function(){\r\n\r\n                window.open('https://github.com/plancheproject/planche/issues', 'issue');\r\n            }\r\n        }]);\r\n\r\n        this.added = true;\r\n    }\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/controller/menu/Help.js\n// module id = 55\n// module chunks = 0","Ext.define('Planche.controller.menu.Tools', {\r\n    extend: 'Planche.lib.Menu',\r\n    add   : function(topBtn) {\r\n\r\n        topBtn.menu.add([{\r\n            text        : 'User Manager',\r\n            scope       : this.application,\r\n            handler     : function() {\r\n\r\n                this.openUserPanel();\r\n            },\r\n            allowDisable: function(topBtn, menu) {\r\n\r\n                if (!this.getActiveConnectTab()) {\r\n\r\n                    return true;\r\n                }\r\n\r\n                return false;\r\n            }\r\n        }, {\r\n            text        : 'Flush',\r\n            scope       : this.application,\r\n            handler     : function() {\r\n\r\n                this.openFlushPanel();\r\n            },\r\n            allowDisable: function(topBtn, menu) {\r\n\r\n                if (!this.getActiveConnectTab()) {\r\n\r\n                    return true;\r\n                }\r\n\r\n                return false;\r\n            }\r\n        }, {\r\n            text        : 'Open Quick Command',\r\n            scope       : this.application,\r\n            handler     : function() {\r\n\r\n                this.openQuickPanel();\r\n            },\r\n            allowDisable: function(topBtn, menu) {\r\n\r\n                if (!this.getActiveConnectTab()) {\r\n\r\n                    return true;\r\n                }\r\n\r\n                return false;\r\n            }\r\n        }, {\r\n            text        : 'Show Process List',\r\n            scope       : this.application,\r\n            handler     : function() {\r\n\r\n                this.openProcessPanel();\r\n            },\r\n            allowDisable: function(topBtn, menu) {\r\n\r\n                if (!this.getActiveConnectTab()) {\r\n\r\n                    return true;\r\n                }\r\n\r\n                return false;\r\n            }\r\n        }, {\r\n            text        : 'Show Variables',\r\n            scope       : this.application,\r\n            handler     : function() {\r\n\r\n                this.openVariablesPanel();\r\n            },\r\n            allowDisable: function(topBtn, menu) {\r\n\r\n                if (!this.getActiveConnectTab()) {\r\n\r\n                    return true;\r\n                }\r\n\r\n                return false;\r\n            }\r\n        }, {\r\n            text        : 'Show Status',\r\n            scope       : this.application,\r\n            handler     : function() {\r\n\r\n                this.openStatusPanel();\r\n            },\r\n            allowDisable: function(topBtn, menu) {\r\n\r\n                if (!this.getActiveConnectTab()) {\r\n\r\n                    return true;\r\n                }\r\n\r\n                return false;\r\n            }\r\n        }]);\r\n\r\n        this.added = true;\r\n    }\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/controller/menu/Tools.js\n// module id = 56\n// module chunks = 0","Ext.define('Planche.controller.menu.Export', {\r\n    extend: 'Planche.lib.Menu',\r\n    add   : function(topBtn) {\r\n\r\n        var app = this.getApplication();\r\n\r\n        topBtn.menu.add([{\r\n            text        : 'Export Database Schema To HTML',\r\n            allowDisable: function() {\r\n\r\n                if (app.getSelectedDatabase()) {\r\n\r\n                    return false;\r\n                }\r\n\r\n                return true;\r\n            },\r\n            handler     : function() {\r\n\r\n                app.openSchemaToHTMLWindow();\r\n            }\r\n        }, '-', {\r\n            text        : 'Download To CSV',\r\n            allowDisable: function() {\r\n\r\n                if (app.getSelectedDatabase()) {\r\n\r\n                    return false;\r\n                }\r\n\r\n                return true;\r\n            },\r\n            handler     : function() {\r\n\r\n                app.openSchemaToCSVWindow();\r\n            }\r\n        }, '-', {\r\n            text    : 'Backup Database As SQL Dump(Not Yet)',\r\n            disabled: true,\r\n            menu    : [{\r\n                text: ''\r\n            }]\r\n        }, {\r\n            text    : 'Import(Not Yet)',\r\n            disabled: true,\r\n            menu    : [{\r\n                text: 'Import External Data'\r\n            }, {\r\n                text: 'Execute SQL Script'\r\n            }]\r\n        }]);\r\n\r\n        this.added = true;\r\n    }\r\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/controller/menu/Export.js\n// module id = 57\n// module chunks = 0","Ext.define('Planche.controller.menu.Table', {\r\n    extend: 'Planche.lib.Menu',\r\n    add   : function(topBtn) {\r\n\r\n        var app = this.getApplication();\r\n\r\n        topBtn.menu.add([{\r\n            text        : 'Paste SQL Statement',\r\n            allowDisable: function(topBtn, menu) {\r\n\r\n                if (app.getSelectedTable()) {\r\n\r\n                    return false;\r\n                }\r\n\r\n                return true;\r\n            },\r\n            menu        : [{\r\n                text: 'INSERT INTO &lt;Table Name&gt;..',\r\n                handler: function() {\r\n\r\n                    var db = app.getSelectedDatabase(),\r\n                        table = app.getSelectedTable();\r\n\r\n                    app.pasteSQLStatement(db, table, 'insert');\r\n                }\r\n            }, {\r\n                text: 'UPDATE &lt;Table Name&gt; SET..',\r\n                handler: function() {\r\n\r\n                    var db = app.getSelectedDatabase(),\r\n                        table = app.getSelectedTable();\r\n\r\n                    app.pasteSQLStatement(db, table, 'update');\r\n                }\r\n            }, {\r\n                text: 'DELETE FROM &lt;Table Name&gt;..',\r\n                handler: function() {\r\n\r\n                    var db = app.getSelectedDatabase(),\r\n                        table = app.getSelectedTable();\r\n\r\n                    app.pasteSQLStatement(db, table, 'delete');\r\n                }\r\n            }, {\r\n                text: 'SELECT &lt;col-1&gt;..&lt;col-n&gt; FROM &lt;Table Name&gt;',\r\n                handler: function() {\r\n\r\n                    var db = app.getSelectedDatabase(),\r\n                        table = app.getSelectedTable();\r\n\r\n                    app.pasteSQLStatement(db, table, 'select');\r\n                }\r\n            }, {\r\n                text   : 'INSERT ... ON DUPLICATE KEY UPDATE',\r\n                handler: function() {\r\n\r\n                    var db = app.getSelectedDatabase(),\r\n                        table = app.getSelectedTable();\r\n\r\n                    app.pasteSQLStatement(db, table, 'duplicate_update');\r\n                }\r\n            }]\r\n        }, {\r\n            text: 'Copy Table To Differnt Host/Database',\r\n            allowDisable: function(topBtn, menu) {\r\n\r\n                if (app.getSelectedTable()) {\r\n\r\n                    return false;\r\n                }\r\n\r\n                return true;\r\n            },\r\n            handler     : function() {\r\n\r\n                var node = app.getSelectedNode(true);\r\n                app.openCopyDatabaseWindow(node);\r\n            }\r\n        }, '-', {\r\n            text: 'Open Table',\r\n            allowDisable: function(topBtn, menu) {\r\n\r\n                if (app.getSelectedTable()) {\r\n\r\n                    return false;\r\n                }\r\n\r\n                return true;\r\n            },\r\n            handler     : function() {\r\n\r\n                var db = app.getSelectedDatabase(),\r\n                    table = app.getSelectedNode();\r\n\r\n                app.openTable(db, table);\r\n            }\r\n        }, {\r\n            text: 'Create Table',\r\n            allowDisable: function(topBtn, menu) {\r\n\r\n                if (app.getSelectedDatabase()) {\r\n\r\n                    return false;\r\n                }\r\n\r\n                return true;\r\n            },\r\n            handler     : function() {\r\n\r\n                var db = app.getSelectedDatabase();\r\n                app.openCreateTableWindow(db);\r\n            }\r\n        }, {\r\n            text: 'Alter Table',\r\n            allowDisable: function(topBtn, menu) {\r\n\r\n                if (app.getSelectedTable()) {\r\n\r\n                    return false;\r\n                }\r\n\r\n                return true;\r\n            },\r\n            handler     : function() {\r\n\r\n                var db = app.getSelectedDatabase(),\r\n                    table = app.getSelectedTable();\r\n\r\n                app.openAlterTableWindow(db, table, 'table-schema-tab');\r\n            }\r\n        }, {\r\n            text: 'Table Properties',\r\n            allowDisable: function(topBtn, menu) {\r\n\r\n                if (app.getSelectedTable()) {\r\n\r\n                    return false;\r\n                }\r\n\r\n                return true;\r\n            },\r\n            handler     : function() {\r\n\r\n                var db = app.getSelectedDatabase(),\r\n                    table = app.getSelectedTable();\r\n\r\n                app.openAlterTableWindow(db, table, 'table-properties-tab');\r\n            }\r\n        }, {\r\n            text: 'Manage Indexes',\r\n            allowDisable: function(topBtn, menu) {\r\n\r\n                if (app.getSelectedTable()) {\r\n\r\n                    return false;\r\n                }\r\n\r\n                return true;\r\n            },\r\n            handler     : function() {\r\n\r\n                var db = app.getSelectedDatabase(),\r\n                    table = app.getSelectedTable();\r\n\r\n                app.openAlterTableWindow(db, table, 'table-indexes-tab');\r\n            }\r\n        }, {\r\n            text: 'View table\\'s sql',\r\n            allowDisable: function(topBtn, menu) {\r\n\r\n                if (app.getSelectedTable()) {\r\n\r\n                    return false;\r\n                }\r\n\r\n                return true;\r\n            },\r\n            handler     : function() {\r\n\r\n                var db = app.getSelectedDatabase(),\r\n                    table = app.getSelectedTable();\r\n\r\n                app.openAlterTableWindow(db, table, 'table-sql-tab');\r\n            }\r\n        }, {\r\n            text: 'View Table information',\r\n            allowDisable: function(topBtn, menu) {\r\n\r\n                if (app.getSelectedTable()) {\r\n\r\n                    return false;\r\n                }\r\n\r\n                return true;\r\n            },\r\n            handler     : function() {\r\n\r\n                var db = app.getSelectedDatabase(),\r\n                    table = app.getSelectedTable();\r\n\r\n                app.openAlterTableWindow(db, table, 'table-info-tab');\r\n            }\r\n        }, {\r\n            text: 'More Table Operations',\r\n            allowDisable: function(topBtn, menu) {\r\n\r\n                if (app.getSelectedTable()) {\r\n\r\n                    return false;\r\n                }\r\n\r\n                return true;\r\n            },\r\n            menu        : [{\r\n                text   : 'Rename Table',\r\n                handler: function() {\r\n\r\n                    var db = app.getSelectedDatabase(),\r\n                        table = app.getSelectedTable();\r\n\r\n                    app.renameTable(db, table);\r\n                }\r\n            }, {\r\n                text   : 'Truncate Table',\r\n                handler: function() {\r\n\r\n                    var db = app.getSelectedDatabase(),\r\n                        table = app.getSelectedTable();\r\n\r\n                    app.truncateTable(db, table, function() {\r\n\r\n                        app.openTable(db, table);\r\n                    });\r\n                }\r\n            }, {\r\n                text   : 'Drop Table From Database',\r\n                handler: function() {\r\n\r\n                    var db = app.getSelectedDatabase(),\r\n                        table = app.getSelectedTable();\r\n\r\n                    app.dropTable(db, table);\r\n                }\r\n            }, {\r\n                text   : 'Reorder Column(s)',\r\n                handler: function() {\r\n\r\n                    var db = app.getSelectedDatabase(),\r\n                        table = app.getSelectedTable(true);\r\n\r\n                    app.openReorderColumns(db, table);\r\n                }\r\n            }, {\r\n                text   : 'Duplicate Table Structure/Data',\r\n                handler: function() {\r\n\r\n                    var db = app.getSelectedDatabase(),\r\n                        table = app.getSelectedTable();\r\n\r\n                    app.duplicateTable(db, table, function(){\r\n\r\n                        var node = app.getSelectedTable(true);\r\n                        app.getSelectedTree().getSelectionModel().select(node.parentNode);\r\n                        app.reloadTree();\r\n                    });\r\n                }\r\n            }, {\r\n                text   : 'View Advanced Properties',\r\n                handler: function() {\r\n\r\n                    var db = app.getSelectedDatabase(),\r\n                        table = app.getSelectedTable();\r\n\r\n                    app.openAdvancedProperties(db, table);\r\n                }\r\n            }, {\r\n                text: 'Change Table To Type',\r\n                menu: [\r\n                    {\r\n\r\n                        text   : 'MYISAM',\r\n                        handler: function(btn) {\r\n\r\n                            app.changeTableToType(app.getSelectedDatabase(), app.getSelectedNode(), btn.text);\r\n                        }\r\n                    },\r\n                    {\r\n\r\n                        text   : 'MRG_MYISAM',\r\n                        handler: function(btn) {\r\n\r\n                            app.changeTableToType(app.getSelectedDatabase(), app.getSelectedNode(), btn.text);\r\n                        }\r\n                    },\r\n                    {\r\n\r\n                        text   : 'CSV',\r\n                        handler: function(btn) {\r\n\r\n                            app.changeTableToType(app.getSelectedDatabase(), app.getSelectedNode(), btn.text);\r\n                        }\r\n                    },\r\n                    {\r\n\r\n                        text   : 'BLACKHOLE',\r\n                        handler: function(btn) {\r\n\r\n                            app.changeTableToType(app.getSelectedDatabase(), app.getSelectedNode(), btn.text);\r\n                        }\r\n                    },\r\n                    {\r\n\r\n                        text   : 'MEMORY',\r\n                        handler: function(btn) {\r\n\r\n                            app.changeTableToType(app.getSelectedDatabase(), app.getSelectedNode(), btn.text);\r\n                        }\r\n                    },\r\n                    {\r\n\r\n                        text   : 'FEDERATED',\r\n                        handler: function(btn) {\r\n\r\n                            app.changeTableToType(app.getSelectedDatabase(), app.getSelectedNode(), btn.text);\r\n                        }\r\n                    },\r\n                    {\r\n\r\n                        text   : 'ARCHIVE',\r\n                        handler: function(btn) {\r\n\r\n                            app.changeTableToType(app.getSelectedDatabase(), app.getSelectedNode(), btn.text);\r\n                        }\r\n                    },\r\n                    {\r\n\r\n                        text   : 'INNODB',\r\n                        handler: function(btn) {\r\n\r\n                            app.changeTableToType(app.getSelectedDatabase(), app.getSelectedNode(), btn.text);\r\n                        }\r\n                    },\r\n                    {\r\n\r\n                        text   : 'PERFORMANCE_SCHEMA',\r\n                        handler: function(btn) {\r\n\r\n                            app.changeTableToType(app.getSelectedDatabase(), app.getSelectedNode(), btn.text);\r\n                        }\r\n                    }\r\n                ]\r\n            }]\r\n        }, '-', {\r\n            text        : 'Create Trigger',\r\n            disabled    : true,\r\n            allowDisable: function() {\r\n\r\n                if (app.getSelectedDatabase()) {\r\n\r\n                    return false;\r\n                }\r\n\r\n                return true;\r\n            },\r\n            handler     : function() {\r\n\r\n                var db = app.getSelectedDatabase();\r\n                app.createTrigger(db);\r\n            }\r\n        }]);\r\n\r\n        this.added = true;\r\n    }\r\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/controller/menu/Table.js\n// module id = 58\n// module chunks = 0","Ext.define('Planche.controller.menu.Edit', {\r\n    extend: 'Planche.lib.Menu',\r\n    add   : function(topBtn) {\r\n\r\n        var app = this.getApplication();\r\n\r\n        topBtn.menu.add([{\r\n            text        : 'Refresh Object Browser',\r\n            scope       : this.application,\r\n            handler     : function() {\r\n\r\n                app.reloadTree();\r\n            },\r\n            allowDisable: function(topBtn, menu) {\r\n\r\n                if (!this.getActiveConnectTab()) {\r\n\r\n                    return true;\r\n                }\r\n\r\n                return false;\r\n            }\r\n        }, {\r\n            text        : 'SQL Formatter',\r\n            scope       : this.application,\r\n            handler     : function() {\r\n\r\n                this.formatQuery();\r\n            },\r\n            allowDisable: function(topBtn, menu) {\r\n\r\n                if (!this.getActiveEditor()) {\r\n\r\n                    return true;\r\n                }\r\n\r\n                return false;\r\n            }\r\n        }, '-', {\r\n            text        : 'Undo',\r\n            scope       : this.application,\r\n            handler     : function() {\r\n\r\n                this.getActiveEditor().undo();\r\n            },\r\n            allowDisable: function() {\r\n\r\n                if (!this.getActiveEditor()) {\r\n\r\n                    return true;\r\n                }\r\n\r\n                if (this.getActiveEditor().historySize().undo < 1) {\r\n\r\n                    return true;\r\n                }\r\n\r\n                return false;\r\n            }\r\n        }, {\r\n            text        : 'Redo',\r\n            scope       : this.application,\r\n            handler     : function() {\r\n\r\n                this.getActiveEditor().redo();\r\n            },\r\n            allowDisable: function() {\r\n\r\n                if (!this.getActiveEditor()) {\r\n\r\n                    return true;\r\n                }\r\n\r\n                if (this.getActiveEditor().historySize().redo < 1) {\r\n\r\n                    return true;\r\n                }\r\n\r\n                return false;\r\n            }\r\n        }\r\n            // '-'\r\n            // ,{\r\n            //     text : 'Cut',\r\n            //     scope : this.application,\r\n            //     handler : function () {\r\n\r\n            //         this.getActiveEditor().cut();\r\n            //     },\r\n            //     allowDisable : function () {\r\n\r\n            //         if(!this.getActiveEditor()) {\r\n\r\n            //             return true;\r\n            //         }\r\n\r\n            //         if(!this.getActiveEditor().somethingSelected()) {\r\n\r\n            //             return true;\r\n            //         }\r\n\r\n            //         return false;\r\n            //     }\r\n            // },{\r\n            //     text : 'Copy',\r\n            //     scope : this.application,\r\n            //     handler : function () {\r\n\r\n            //         this.getActiveEditor().copy();\r\n            //     },\r\n            //     allowDisable : function () {\r\n\r\n            //         if(!this.getActiveEditor()) {\r\n\r\n            //             return true;\r\n            //         }\r\n\r\n            //         if(!this.getActiveEditor().somethingSelected()) {\r\n\r\n            //             return true;\r\n            //         }\r\n\r\n            //         return false;\r\n            //     }\r\n            // },{\r\n            //     text : 'Paste',\r\n            //     scope : this.application,\r\n            //     handler : function () {\r\n\r\n            //         this.getActiveEditor().paste();\r\n            //     },\r\n            //     allowDisable : function () {\r\n\r\n            //         if(!this.getActiveEditor()) {\r\n\r\n            //             return true;\r\n            //         }\r\n\r\n            //         return false;\r\n            //     }\r\n            // },\r\n            // '-'\r\n            // ,{\r\n            //     text : 'Find',\r\n            //     scope : this.application,\r\n            //     handler : function () {\r\n\r\n            //         this.openFindPanel()\r\n            //     },\r\n            //     allowDisable : function () {\r\n\r\n            //         if(!this.getActiveEditor()) {\r\n\r\n            //             return true;\r\n            //         }\r\n\r\n            //         return false;\r\n            //     }\r\n            // },{\r\n            //     text : 'Find Next',\r\n            //     scope : this.application,\r\n            //     handler : function () {\r\n\r\n            //         this.openWindow('command.Find');\r\n            //     },\r\n            //     allowDisable : function () {\r\n\r\n            //         if(!this.getActiveEditor()) {\r\n\r\n            //             return true;\r\n            //         }\r\n\r\n            //         return false;\r\n            //     }\r\n            // },{\r\n            //     text : 'Replace',\r\n            //     scope : this.application,\r\n            //     handler : function () {\r\n\r\n            //         this.openWindow('command.Replace');\r\n            //     },\r\n            //     allowDisable : function () {\r\n\r\n            //         if(!this.getActiveEditor()) {\r\n\r\n            //             return true;\r\n            //         }\r\n\r\n            //         return false;\r\n            //     }\r\n        ]);\r\n\r\n        this.added = true;\r\n    }\r\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/controller/menu/Edit.js\n// module id = 59\n// module chunks = 0","Ext.define('Planche.controller.menu.Database', {\r\n    extend: 'Planche.lib.Menu',\r\n    add   : function(topBtn) {\r\n\r\n        var app = this.getApplication();\r\n\r\n        topBtn.menu.add([{\r\n            text        : 'Copy Database To Different Host/Database',\r\n            handler     : function() {\r\n\r\n                app.openCopyDatabaseWindow();\r\n            },\r\n            allowDisable: function() {\r\n\r\n                if (app.getSelectedDatabase()) {\r\n\r\n                    return false;\r\n                }\r\n\r\n                return true;\r\n            }\r\n        }, {\r\n            text        : 'Create Database',\r\n            handler     : function() {\r\n\r\n                app.createDatabase();\r\n            },\r\n            allowDisable: function() {\r\n\r\n                if (!app.getActiveConnectTab()) {\r\n\r\n                    return true;\r\n                }\r\n\r\n                return false;\r\n            }\r\n        }, {\r\n            text        : 'Alter Database',\r\n            handler     : function() {\r\n\r\n                var db = app.getSelectedDatabase();\r\n                app.alterDatabase(db);\r\n            },\r\n            allowDisable: function() {\r\n\r\n                if (app.getSelectedDatabase()) {\r\n\r\n                    return false;\r\n                }\r\n\r\n                return true;\r\n            }\r\n        }, {\r\n            text        : 'Create',\r\n            allowDisable: function() {\r\n\r\n                var node = app.getSelectedNode(true);\r\n                var db = app.getParentNode(node);\r\n\r\n                if (!db) {\r\n\r\n                    return true;\r\n                }\r\n\r\n                return false;\r\n            },\r\n            menu        : [{\r\n                text   : 'Table',\r\n                handler: function() {\r\n\r\n                    var db = app.getSelectedDatabase();\r\n                    app.openCreateTableWindow(db);\r\n                }\r\n            }, {\r\n                text   : 'View',\r\n                handler: function() {\r\n\r\n                    var db = app.getSelectedDatabase();\r\n                    app.createView(db);\r\n                }\r\n            }, {\r\n                text   : 'Stored Procedure',\r\n                handler: function() {\r\n\r\n                    var db = app.getSelectedDatabase();\r\n                    app.createProcedure(db);\r\n                }\r\n            }, {\r\n                text   : 'Function',\r\n                handler: function() {\r\n\r\n                    var db = app.getSelectedDatabase();\r\n                    app.createFunction(db);\r\n                }\r\n            }, {\r\n                text   : 'Trigger',\r\n                handler: function() {\r\n\r\n                    var db = app.getSelectedDatabase();\r\n                    app.createTrigger(db);\r\n                }\r\n            }, {\r\n                text   : 'Event',\r\n                handler: function() {\r\n\r\n                    var db = app.getSelectedDatabase();\r\n                    app.createEvent(db);\r\n                }\r\n            }]\r\n        }, {\r\n            text        : 'More Database Operations',\r\n            allowDisable: function() {\r\n\r\n                if (app.getSelectedDatabase()) {\r\n\r\n                    return false;\r\n                }\r\n\r\n                return true;\r\n            },\r\n            menu        : [{\r\n                text   : 'Drop Database',\r\n                handler: function() {\r\n\r\n                    var db = app.getSelectedDatabase();\r\n                    app.dropDatabase(db, function() {\r\n\r\n                        var node = app.getSelectedTable(true);\r\n                        app.getSelectedTree().getSelectionModel().select(node.parentNode);\r\n                        node.remove();\r\n                    });\r\n                }\r\n            }, {\r\n                text   : 'Truncate Database',\r\n                handler: function() {\r\n\r\n                    var db = app.getSelectedDatabase();\r\n                    app.truncateDatabase(db, function() {\r\n\r\n                        var node = app.getSelectedTable(true);\r\n                        Ext.Array.each(node.childNodes, function(childNode, idx) {\r\n\r\n                            childNode.removeAll();\r\n                        });\r\n                    });\r\n                }\r\n            }\r\n\r\n            //    , {\r\n            //    text   : 'Empty Database',\r\n            //    handler: function() {\r\n            //\r\n            //        var db = app.getSelectedDatabase();\r\n            //        app.emptyDatabase(db);\r\n            //    }\r\n            //}\r\n            ]\r\n        }]);\r\n\r\n        this.added = true;\r\n    }\r\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/controller/menu/Database.js\n// module id = 60\n// module chunks = 0","Ext.define('Planche.controller.menu.Query', {\r\n    extend: 'Planche.lib.Menu',\r\n    add   : function(topBtn) {\r\n\r\n        topBtn.menu.add([{\r\n            text        : 'Excute Query',\r\n            scope       : this.application,\r\n            handler     : function() {\r\n\r\n                this.executeQuery();\r\n            },\r\n            allowDisable: function(topBtn, menu) {\r\n\r\n                if (!this.getActiveEditor()) {\r\n\r\n                    return true;\r\n                }\r\n\r\n                return false;\r\n            }\r\n        }, '-', {\r\n            text        : 'New Query Editor',\r\n            scope       : this.application,\r\n            handler     : function() {\r\n\r\n                this.openQueryTab();\r\n            },\r\n            allowDisable: function(topBtn, menu) {\r\n\r\n                if (!this.getActiveConnectTab()) {\r\n\r\n                    return true;\r\n                }\r\n\r\n                return false;\r\n            }\r\n        }, {\r\n            text        : 'Close Query Tab',\r\n            scope       : this.application,\r\n            handler     : function() {\r\n\r\n                var actSubTab = this.getActiveQueryTab();\r\n                actSubTab.destroy();\r\n            },\r\n            allowDisable: function(topBtn, menu) {\r\n\r\n                if (this.getQueryTabPanel().child().length < 2) {\r\n\r\n                    return true;\r\n                }\r\n\r\n                if (!this.getActiveQueryTab()) {\r\n\r\n                    return true;\r\n                }\r\n\r\n                return false;\r\n            }\r\n        }, {\r\n            text        : 'Close Other Query Tabs',\r\n            scope       : this.application,\r\n            handler     : function() {\r\n\r\n                var tabPanel = this.getQueryTabPanel().query('tabpanel');\r\n                var actSubTab = this.getActiveQueryTab();\r\n\r\n                Ext.Array.each(tabPanel, function(tab, idx) {\r\n\r\n                    if (actSubTab != tab.up()) {\r\n\r\n                        tab.up().destroy();\r\n                    }\r\n                    else {\r\n\r\n                        tab.addClass('x-tab-strip-closable');\r\n                    }\r\n                });\r\n            },\r\n            allowDisable: function(topBtn, menu) {\r\n\r\n                if (!this.getActiveQueryTab()) {\r\n\r\n                    return true;\r\n                }\r\n\r\n                var tabPanel = this.getQueryTabPanel().query('tabpanel');\r\n\r\n                if (tabPanel.length < 2) {\r\n\r\n                    return true;\r\n                }\r\n\r\n                return false;\r\n            }\r\n        }]);\r\n\r\n        this.added = true;\r\n    }\r\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/controller/menu/Query.js\n// module id = 61\n// module chunks = 0","Ext.define('Planche.controller.menu.Connection', {\r\n    extend: 'Planche.lib.Menu',\r\n    add   : function(topBtn) {\r\n\r\n        topBtn.menu.add([{\r\n            text        : 'New Connection Using Current Setting',\r\n            scope       : this.application,\r\n            allowDisable: function(topBtn, menu) {\r\n\r\n                if (!this.getActiveConnectTab()) {\r\n\r\n                    return true;\r\n                }\r\n\r\n                return false;\r\n            },\r\n            handler     : function() {\r\n\r\n                var tab = this.getActiveConnectTab();\r\n                this.initConnectTab({\r\n                    hostName    : tab.getHostName(),\r\n                    tunnelingURL: tab.getTunnelingURL(),\r\n                    requestType : tab.getRequestType(),\r\n                    host        : tab.getHost(),\r\n                    user        : tab.getUser(),\r\n                    pass        : tab.getPass(),\r\n                    charset     : tab.getCharset(),\r\n                    port        : tab.getPort(),\r\n                    dbms        : tab.getDBMS()\r\n                });\r\n            }\r\n        }, {\r\n            text   : 'New Connection',\r\n            scope  : this.application,\r\n            handler: function() {\r\n\r\n                this.openConnPanel();\r\n            }\r\n        }, {\r\n            text        : 'Disconnect',\r\n            scope       : this.application,\r\n            allowDisable: function(topBtn, menu) {\r\n\r\n                if (!this.getActiveConnectTab()) {\r\n\r\n                    return true;\r\n                }\r\n\r\n                return false;\r\n            },\r\n            handler     : function() {\r\n\r\n                this.closeActiveConnectionTab();\r\n            }\r\n        }, {\r\n            text        : 'Disconnect All',\r\n            scope       : this.application,\r\n            allowDisable: function(topBtn, menu) {\r\n\r\n                if (!this.getActiveConnectTab()) {\r\n\r\n                    return true;\r\n                }\r\n\r\n                return false;\r\n            },\r\n            handler     : function() {\r\n\r\n                var app = this,\r\n                    conns = app.getConnectTabPanel().query('>>tab');\r\n                Ext.Array.each(conns, function(tab, idx) {\r\n\r\n                    app.closeActiveConnectionTab();\r\n                });\r\n            }\r\n        }]);\r\n\r\n        this.added = true;\r\n    }\r\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/controller/menu/Connection.js\n// module id = 62\n// module chunks = 0","Ext.define('Planche.controller.user.UserAdd', {\r\n    extend: 'Ext.app.Controller',\r\n    views : [\r\n        'Planche.view.user.UserAdd'\r\n    ],\r\n    init  : function() {\r\n\r\n        var app = this.getApplication();\r\n\r\n        this.control({\r\n            'user-add'           : {\r\n                boxready: this.initUserForm\r\n            },\r\n            '#user-add-save-user': {\r\n                click: this.saveUser\r\n            },\r\n            '#user-add-close'    : {\r\n                click: this.close\r\n            }\r\n        });\r\n    },\r\n\r\n    initWindow: function(user, host) {\r\n\r\n        Ext.create('Planche.view.user.UserAdd', {\r\n            user: user,\r\n            host: host\r\n        });\r\n    },\r\n\r\n    initUserForm: function(win) {\r\n\r\n        var app = this.getApplication(),\r\n            user = win.getUser(),\r\n            host = win.getHost();\r\n\r\n        if (!(user || host)) {\r\n\r\n            return;\r\n        }\r\n\r\n        app.tunneling({\r\n            db     : '',\r\n            query  : app.getAPIS().getQuery('SELECT_USER', user, host),\r\n            success: function(config, response) {\r\n\r\n                var list = Planche.DBUtil.getAssocArray(response.fields, response.records);\r\n\r\n                Ext.getCmp('user-add-user-name').setValue(list[0]['User']);\r\n                Ext.getCmp('user-add-host').setValue(list[0]['Host']);\r\n                Ext.getCmp('user-add-max-questions').setValue(list[0]['max_questions']);\r\n                Ext.getCmp('user-add-max-updates').setValue(list[0]['max_updates']);\r\n                Ext.getCmp('user-add-max-connections').setValue(list[0]['max_connections']);\r\n                Ext.getCmp('user-add-max-user-connections').setValue(list[0]['max_user_connections']);\r\n            }\r\n        });\r\n    },\r\n\r\n    saveUser: function(btn) {\r\n\r\n        var app = this.getApplication(),\r\n            win = btn.up(\"window\"),\r\n            api = app.getAPIS(),\r\n            tunnelings = [],\r\n            user = Ext.getCmp('user-add-user-name').getValue(),\r\n            host = Ext.getCmp('user-add-host').getValue(),\r\n            pass = Ext.getCmp('user-add-password').getValue(),\r\n            repass = Ext.getCmp('user-add-retype-password').getValue(),\r\n            isEdit = true,\r\n            operOption = [],\r\n            option = [],\r\n            messages = [];\r\n\r\n        if (!win.getUser() && !win.getHost()) {\r\n\r\n            if (this.checkPassword(pass, repass) === -1) {\r\n\r\n                return;\r\n            }\r\n\r\n            tunnelings.push({\r\n                db     : '',\r\n                query  : api.getQuery('CREATE_USER', user, host, pass),\r\n                failure: function(config, response) {\r\n\r\n                    messages.push(app.generateError(config.query, response.message));\r\n                }\r\n            });\r\n\r\n            isEdit = false;\r\n        }\r\n        else {\r\n\r\n            var result = this.checkPassword(pass, repass);\r\n\r\n            if (result === -1) {\r\n\r\n                return;\r\n            }\r\n\r\n            if (result == 1) {\r\n\r\n                if (pass) {\r\n\r\n                    option.push('IDENTIFIED BY \"' + pass + '\"');\r\n                }\r\n            }\r\n        }\r\n\r\n        //If input name is different from the old user name. It will be changing\r\n        if (isEdit && (user != win.getUser() || host != win.getHost())) {\r\n\r\n            tunnelings.push({\r\n                db     : '',\r\n                query  : api.getQuery('RENAME_USER', win.getUser(), win.getHost(), user, host),\r\n                failure: function(config, response) {\r\n\r\n                    messages.push(app.generateError(config.query, response.message));\r\n                }\r\n            });\r\n        }\r\n\r\n\r\n        //Add Grant \"with options\"\r\n        var val = [\r\n            Ext.getCmp('user-add-max-questions').getValue(),\r\n            Ext.getCmp('user-add-max-updates').getValue(),\r\n            Ext.getCmp('user-add-max-connections').getValue(),\r\n            Ext.getCmp('user-add-max-user-connections').getValue()\r\n        ];\r\n\r\n        if (val[0]) {\r\n\r\n            operOption.push('MAX_QUERIES_PER_HOUR ' + val[0]);\r\n        }\r\n\r\n        if (val[1]) {\r\n\r\n            operOption.push('MAX_UPDATES_PER_HOUR ' + val[1]);\r\n        }\r\n\r\n        if (val[2]) {\r\n\r\n            operOption.push('MAX_CONNECTIONS_PER_HOUR ' + val[2]);\r\n        }\r\n\r\n        if (val[3]) {\r\n\r\n            operOption.push('MAX_USER_CONNECTIONS ' + val[3]);\r\n        }\r\n\r\n        if (operOption.length > 0) {\r\n\r\n            option.push(\"WITH \" + operOption.join(\" \"));\r\n        }\r\n\r\n        if (option.length > 0) {\r\n\r\n            tunnelings.push({\r\n                db     : '',\r\n                query  : api.getQuery('GRANT', 'USAGE', user, host, \"*.*\", option.join(\" \")),\r\n                failure: function(config, response) {\r\n\r\n                    messages.push(app.generateError(config.query, response.message));\r\n                }\r\n            });\r\n        }\r\n\r\n        app.tunnelings(tunnelings, {\r\n            start : function(){\r\n\r\n                win.setLoading(true);\r\n            },\r\n            success: function() {\r\n\r\n                app.fireEvent('after_save_user');\r\n                win.setLoading(false);\r\n                win.destroy();\r\n            },\r\n            failure: function() {\r\n\r\n                app.showMessage(messages);\r\n                win.setLoading(false);\r\n            }\r\n        });\r\n    },\r\n\r\n    checkPassword: function(pass, repass) {\r\n\r\n        if (pass || repass) {\r\n\r\n            if (pass != repass) {\r\n\r\n                Ext.Msg.alert('error', 'Password do not match');\r\n                return -1;\r\n            }\r\n            else {\r\n\r\n                return 1;\r\n            }\r\n        }\r\n\r\n        return 0;\r\n    },\r\n\r\n    close: function(btn) {\r\n\r\n        var win = btn.up(\"window\");\r\n        win.destroy();\r\n    }\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/controller/user/UserAdd.js\n// module id = 63\n// module chunks = 0","Ext.define('Planche.controller.Main', {\n    extend: 'Ext.app.Controller',\n    init : function () {\n\n\n    }\n});\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/controller/Main.js\n// module id = 64\n// module chunks = 0","Ext.define('Planche.controller.table.TableInfoTab', {\n    extend: 'Ext.app.Controller',\n    views : [\n        'Planche.view.table.TableInfoTab'\n    ],\n    init  : function() {\n\n        this.control({\n            'table-info-tab': {\n                boxready: function(tab) {\n\n                    var db = tab.getDatabase(),\n                        table = tab.getTable();\n\n                    Planche.SchemaUtil.exportTableInfoToHTML(db, table, tab, 'update');\n                }\n            }\n        });\n    }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/controller/table/TableInfoTab.js\n// module id = 65\n// module chunks = 0","Ext.define('Planche.controller.table.TableSQLTab', {\n    extend: 'Ext.app.Controller',\n    views : [\n        'Planche.view.table.TableInfoTab'\n    ],\n    init  : function() {\n\n        this.control({\n            'table-sql-tab': {\n                boxready: this.initTab,\n                resize  : this.resizeTab\n            }\n        });\n    },\n\n    resizeTab: function(tab, width, height) {\n\n        tab.getEditor().setSize(width, height);\n    },\n\n    initTab: function(tab, width, height) {\n\n        var app = this.getApplication(),\n            db = tab.getDatabase(),\n            table = tab.getTable(),\n            query = app.getAPIS().getQuery('TABLE_CREATE_INFO', db, table),\n            textarea = tab.getEl().query('textarea')[0];\n\n        Ext.apply(tab, {\n            editor   : CodeMirror.fromTextArea(textarea, {\n                mode          : 'text/x-mysql',\n                indentWithTabs: true,\n                smartIndent   : true,\n                lineNumbers   : true,\n                matchBrackets : true,\n                autofocus     : true\n            }),\n            getEditor: function() {\n\n                return this.editor;\n            }\n        });\n\n        tab.setLoading(true);\n\n        app.tunneling({\n            db     : db,\n            query  : query,\n            success: function(config, response) {\n\n                tab.getEditor().setValue(response.records[0][1]);\n                tab.setLoading(false);\n            },\n            failure: function(config, response) {\n\n                tab.setLoading(false);\n            }\n        });\n    }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/controller/table/TableSQLTab.js\n// module id = 66\n// module chunks = 0","Ext.define('Planche.controller.table.TableIndexesTab', {\n    extend: 'Ext.app.Controller',\n    views : [\n        'Planche.view.table.TableIndexesTab'\n    ],\n    init  : function() {\n\n        this.control({\n            '#table-indexes-tab'       : {\n                boxready: this.initTab,\n                reload  : this.initTab\n            },\n            '#table-indexes-btn-create': {\n                click: this.createIndex\n            },\n            '#table-indexes-btn-edit'  : {\n                click: this.editIndex\n            },\n            '#table-indexes-btn-delete': {\n                click: this.deleteIndex\n            }\n        });\n    },\n\n    createIndex: function(btn) {\n\n        var app = this.getApplication(),\n            tab = Ext.getCmp('table-indexes-tab'),\n            db  = tab.getDatabase(),\n            tb  = tab.getTable();\n\n        app.openCreateIndexWindow(db, tb);\n    },\n\n    editIndex: function(btn) {\n\n        var app      = this.getApplication(),\n            tab      = Ext.getCmp('table-indexes-tab'),\n            db       = tab.getDatabase(),\n            tb       = tab.getTable(),\n            selModel = tab.getSelectionModel(),\n            selList  = selModel.getSelection();\n\n        if (selList.length == 0) {\n\n            app.showMessage('Choose the index you want to edit.');\n            return;\n        }\n\n        app.openAlterIndexWindow(db, tb, selList[0].data.Key_name);\n    },\n\n    deleteIndex: function(btn) {\n\n        var app      = this.getApplication(),\n            tab      = Ext.getCmp('table-indexes-tab'),\n            db       = tab.getDatabase(),\n            tb       = tab.getTable(),\n            selModel = tab.getSelectionModel(),\n            selList  = selModel.getSelection();\n\n        if (selList.length == 0) {\n\n            app.showMessage('Choose the index you want to delete.');\n            return;\n        }\n\n        var index = selList[0].raw.Key_name;\n        Ext.Msg.confirm('Drop Index \\'' + index + '\\'', 'Do you really want to drop the index?\\n\\nWarning: You will lose all data!', function(btn, text) {\n\n            if (btn == 'yes') {\n\n                app.tunneling({\n                    db     : db,\n                    query  : app.getAPIS().getQuery('DROP_INDEX', db, tb, index),\n                    success: function(config, response) {\n\n                        tab.fireEvent('reload', tab);\n                    }\n                });\n            }\n        });\n    },\n\n    initTab: function(tab) {\n\n        var app = this.getApplication(),\n            db  = tab.getDatabase(),\n            tb  = tab.getTable();\n\n        if (!tb) {\n\n            return;\n        }\n\n        tab.setLoading(true);\n\n        //load table fileds list\n        app.tunneling({\n            db     : db,\n            query  : app.getAPIS().getQuery('SHOW_INDEXES', db, tb),\n            success: function(config, response) {\n\n                var records = Planche.DBUtil.getAssocArray(response.fields, response.records);\n                tab.getStore().loadData(records);\n\n                tab.setLoading(false);\n            }\n        });\n    }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/controller/table/TableIndexesTab.js\n// module id = 67\n// module chunks = 0","Ext.define('Planche.controller.table.TablePropertiesTab', {\n    extend: 'Ext.app.Controller',\n    views : [\n        'Planche.view.table.TablePropertiesTab'\n    ],\n    init  : function() {\n\n        var app = this.getApplication(),\n            loadedCollation = false,\n            loadedCharset = false;\n\n        this.control({\n            'table-properties-tab'        : {\n                boxready: this.initTab\n            },\n            '#table-properties-btn-create': {\n                click: function(btn) {\n\n                    var ctrl = app.getController('table.TableSchemaTab');\n                    ctrl[btn.getText().toLowerCase()](btn);\n                }\n            },\n            '#properties-collation'       : {\n                focus: function(combo) {\n\n                    if (loadedCollation) {\n\n                        return;\n                    }\n\n                    var tab = Ext.getCmp('table-properties-tab'),\n                        db = tab.getDatabase(),\n                        table = tab.getTable();\n\n                    app.tunneling({\n                        db     : db,\n                        query  : app.getAPIS().getQuery('SHOW_COLLATION', db, table),\n                        success: function(config, response) {\n\n                            var tmp = [];\n                            Ext.Array.each(response.records, function(row, idx) {\n\n                                tmp.push({\n                                    id  : row[0],\n                                    text: row[0]\n                                });\n                            });\n\n                            combo.store.loadData(tmp);\n\n                            loadedCollation = true;\n                        }\n                    });\n                }\n            },\n            '#properties-charset'         : {\n                focus: function(combo) {\n\n                    if (loadedCharset) {\n\n                        return;\n                    }\n\n\n                    var tab = Ext.getCmp('table-properties-tab'),\n                        db = tab.getDatabase(),\n                        table = tab.getTable();\n\n                    app.tunneling({\n                        db     : db,\n                        query  : app.getAPIS().getQuery('SHOW_CHARSET', db, table),\n                        success: function(config, response) {\n\n                            var tmp = [];\n                            Ext.Array.each(response.records, function(row, idx) {\n\n                                tmp.push({\n                                    id  : row[0],\n                                    text: row[0]\n                                });\n                            });\n\n                            combo.store.loadData(tmp);\n\n                            loadedCharset = true;\n                        }\n                    });\n                }\n            }\n\n        });\n    },\n\n    initTab: function(tab) {\n\n        var app = this.getApplication(),\n            db = tab.getDatabase(),\n            table = tab.getTable();\n\n        if (!table) {\n\n            return;\n        }\n\n        var bindData,\n            tunnelings = [{\n                db     : db,\n                query  : app.getAPIS().getQuery('SHOW_CREATE_TABLE', db, table),\n                success: function(config, response) {\n\n                    var def = response.records[0][1],\n                        getPropertie = function(field) {\n\n                            var regexp = new RegExp(field + '=([a-zA-Z0-9_]+)', 'i'),\n                                result = def.match(regexp);\n\n                            if (!result) {\n\n                                return null;\n                            }\n\n                            return result[1];\n                        };\n\n                    bindData = {\n                        'properties-table-type'     : getPropertie('ENGINE'),\n                        'properties-charset'        : getPropertie('CHARSET'),\n                        'properties-checksum'       : getPropertie('CHECKSUM'),\n                        'properties-delay-key-write': getPropertie('DELAY_KEY_WRITE'),\n                        'properties-row-format'     : getPropertie('ROW_FORMAT'),\n                        'properties-auto-incr'      : getPropertie('AUTO_INCREMENT'),\n                        'properties-avg-row-len'    : getPropertie('AVG_ROW_LENGTH'),\n                        'properties-minimum-row'    : getPropertie('MIN_ROWS'),\n                        'properties-maximum-row'    : getPropertie('MAX_ROWS')\n                    };\n                }\n            }, {\n                db     : db,\n                query  : app.getAPIS().getQuery('SHOW_TABLE_STATUS', db, table),\n                success: function(config, response) {\n\n                    var data = Planche.DBUtil.getAssocArray(response.fields, response.records)[0];\n\n                    if (data.Create_options) {\n\n                        var arr = data.Create_options.split(\" \");\n                        Ext.Array.each(arr, function(row) {\n\n                            row = row.split(\"=\");\n                            data[row[0]] = row[1];\n                        });\n                    }\n\n                    Ext.applyIf(bindData, {\n                        'properties-table-type'     : data.Engine,\n                        'properties-charset'        : data.Charset,\n                        'properties-collation'      : data.Collation,\n                        'properties-checksum'       : data.checksum,\n                        'properties-delay-key-write': data.delay_key_write,\n                        'properties-row-format'     : data.row_format,\n                        'properties-auto-incr'      : data.Auto_increment,\n                        'properties-avg-row-len'    : data.avg_row_length,\n                        'properties-minimum-row'    : data.min_rows,\n                        'properties-maximum-row'    : data.max_rows,\n                        'properties-comment'        : data.Comment\n                    });\n                }\n            }];\n\n        app.tunnelings(tunnelings, {\n            success: function() {\n\n                var form = Ext.getCmp('properties-form');\n                form.getForm().setValues(bindData);\n                tab.setProperties(bindData);\n            }\n        });\n    },\n\n    getTableProperties: function() {\n\n        var form = Ext.getCmp('properties-form');\n\n        if (!form) {\n\n            return '';\n        }\n\n        var tab = Ext.getCmp('table-properties-tab'),\n            oldVals = tab.getProperties(),\n            newVals = form.getValues(),\n            properties = [],\n            getNewValue = function(key) {\n\n                if (newVals[key] === '') {\n\n                    return null;\n                }\n\n                if (newVals[key] == oldVals[key]) {\n\n                    return null;\n                }\n\n                return newVals[key];\n            };\n\n        var create_options = [],\n            newVal = null;\n\n        newVal = getNewValue('properties-table-type');\n        if (newVal != null) {\n\n            properties.push('ENGINE=' + newVal);\n        }\n\n        newVal = getNewValue('properties-charset');\n        if (newVal != null) {\n\n            properties.push('CHARSET=' + newVal);\n        }\n\n        newVal = getNewValue('properties-collation');\n        if (newVal != null) {\n\n            properties.push('COLLATE=' + newVal);\n        }\n\n        newVal = getNewValue('properties-checksum');\n        if (newVal != null) {\n\n            properties.push('CHECKSUM=' + newVal);\n        }\n\n        newVal = getNewValue('properties-avg-row-len');\n        if (newVal != null) {\n\n            properties.push('AVG_ROW_LENGTH=' + newVal);\n        }\n\n        newVal = getNewValue('properties-auto-incr');\n        if (newVal != null) {\n\n            properties.push('AUTO_INCREMENT=' + newVal);\n        }\n\n        newVal = getNewValue('properties-comment');\n        if (newVal != null) {\n\n            properties.push('COMMENT=\\'' + newVal + '\\'');\n        }\n\n        newVal = getNewValue('properties-delay-key-write');\n        if (newVal != null) {\n\n            properties.push('DELAY_KEY_WRITE=' + newVal);\n        }\n\n        newVal = getNewValue('properties-row-format');\n        if (newVal != null) {\n\n            properties.push('ROW_FORMAT=' + newVal);\n        }\n\n        newVal = getNewValue('properties-minimum-row');\n        if (newVal != null) {\n\n            properties.push('MIN_ROWS=' + newVal);\n        }\n\n        newVal = getNewValue('properties-maximum-row');\n        if (newVal != null) {\n\n            properties.push('MAX_ROWS=' + newVal);\n        }\n\n        if (create_options.length > 0) {\n\n            properties.push('CREATE_OPTIONS=\\'' + create_options.join(\" \") + '\\'');\n        }\n\n        return properties.join(' ');\n    },\n\n    syncProperties: function() {\n\n        var form = Ext.getCmp('properties-form');\n\n        if (!form) {\n\n            return '';\n        }\n\n        var tab = Ext.getCmp('table-properties-tab');\n\n        newVals = form.getValues();\n\n        tab.setProperties(newVals);\n    }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/controller/table/TablePropertiesTab.js\n// module id = 68\n// module chunks = 0","Ext.define('Planche.controller.table.TableSchemaTab', {\n    extend: 'Ext.app.Controller',\n    views : [\n        'Planche.view.table.TableSchemaTab'\n    ],\n    init  : function() {\n\n        this.control({\n            'table-schema-tab'        : {\n                beforeedit: this.beforeEdit,\n                edit      : this.edit,\n                boxready  : this.initTableSchemaTab\n            },\n            '#table-schema-btn-create': {\n                click: this.createTable\n            },\n            '#table-schema-btn-insert': {\n                click: this.insertRow\n            },\n            '#table-schema-btn-delete': {\n                click: this.deleteRow\n            }\n        });\n    },\n\n    edit: function(editor, e) {\n\n        var tab = Ext.getCmp(\"table-schema-tab\");\n\n        if (e.originalValue != e.value) {\n\n            tab.setEdited(true);\n        }\n\n        tab.getView().focus();\n    },\n\n    beforeEdit: function(editor, e) {\n\n        var\n            tab = Ext.getCmp(\"table-schema-tab\"),\n            app = this.getApplication(),\n            store = tab.getStore(),\n            selModel = tab.getSelectionModel(),\n            selection = selModel.getSelection()[0],\n            index = store.indexOf(selection) + 1;\n\n        if (index == store.getCount()) {\n\n            store.insert(store.getCount(), [{}]);\n        }\n    },\n\n    insertRow: function(btn) {\n\n        var tab = btn.up(\"table-schema-tab\"),\n            store = tab.getStore(),\n            selModel = tab.getSelectionModel(),\n            selection = selModel.getSelection()[0];\n\n        if (selection) {\n\n            var index = store.indexOf(selection);\n            store.insert(index, [{}]);\n        }\n        else {\n\n            store.insert(store.getCount(), [{}]);\n        }\n    },\n\n    deleteRow: function(btn) {\n\n        var tab = btn.up(\"table-schema-tab\"),\n            store = tab.getStore(),\n            selModel = tab.getSelectionModel(),\n            selection = selModel.getSelection()[0],\n            cnt = store.getCount();\n\n        if (!selection) { return; }\n        if (cnt == 1) { return; }\n        if (selModel.getCurrentPosition().row == 0) {\n\n            selModel.move('down');\n        }\n        else {\n\n            selModel.move('up');\n        }\n\n        store.remove(selection);\n    },\n\n    createTable: function(btn) {\n\n        this[btn.getText().toLowerCase()](btn);\n    },\n\n    create: function(btn) {\n\n        var app = this.getApplication(),\n            tab = Ext.getCmp(\"table-schema-tab\"),\n            textfield = btn.up('window').down('textfield'),\n            table = textfield.getValue(),\n            me = this;\n\n        if (!table) {\n\n            textfield.validate();\n            return;\n        }\n\n        var db = tab.getDatabase(),\n            query = '(',\n            primaries = [], fields = [],\n            store = tab.getStore();\n\n        Ext.Object.each(store.getRange(), function(idx, obj) {\n\n            if (!obj.data.field) return;\n\n            var data = obj.data,\n                field = '';\n\n            field += '\\n\\t`' + data.field + '` ' + data.type;\n            field += data.len ? '(' + data.len + ')' : '';\n            field += data.unsigned === true ? ' UNSIGNED' : '';\n            field += data.zerofill === true ? ' ZEROFILL' : '';\n            field += data.not_null === true ? ' NOT NULL' : '';\n            field += data['default'] ? ' DEFAULT \\'' + data['default'] + '\\'' : '';\n            field += data.auto_incr === true ? ' AUTO_INCREMENT' : '';\n            field += data.comment ? ' COMMENT \\'' + (data.comment) + '\\'' : '';\n            fields.push(field);\n\n            if (data.pk === true) {\n\n                primaries.push('`' + data.field + '`');\n            }\n        });\n\n        if (primaries.length > 0) {\n\n            fields.push('\\n\\tPRIMARY KEY (' + primaries.join(',') + ')');\n        }\n        query += fields.join(\",\") + ') ';\n\n        query += this.getTableProperties();\n\n        app.tunneling({\n            db     : db,\n            query  : app.getAPIS().getQuery('CREATE_TABLE', db, table, query),\n            success: function(config, response) {\n\n                app.openMessage(app.generateSuccessMsg(config.query, 'This table has been created successfully.'));\n\n                app.reloadTablesNode(db);\n\n                me.syncProperties();\n\n                btn.up('window').destroy();\n\n                app.openAlterTableWindow(db, table);\n                app.fireEvent('after_create_table');\n            },\n            failure: function(config, response) {\n\n                app.openMessage(app.generateError(config.query, response.message));\n                Ext.Msg.alert('Error', response.message);\n            }\n        });\n    },\n\n    alter: function(btn) {\n\n        var\n            app = this.getApplication(),\n            tab = Ext.getCmp(\"table-schema-tab\"),\n            textfield = btn.up('window').down('textfield'),\n            table = textfield.getValue(),\n            me = this;\n\n        if (!table) {\n\n            return;\n        }\n\n        var\n            store = tab.getStore(),\n            db = tab.getDatabase(),\n            query = '',\n            add_primaries = [],\n            del_primaries = [],\n            primaries = [],\n            fields = [];\n\n        Ext.Object.each(store.getNewRecords(), function(idx, obj) {\n\n            if (!obj.data.field) return;\n\n            var data = obj.data,\n                field = '\\n\\tADD COLUMN';\n\n            field += ' `' + data.field + '` ' + data.type;\n            field += data.len ? '(' + data.len + ')' : '';\n            field += data.unsigned === true ? ' UNSIGNED' : '';\n            field += data.zerofill === true ? ' ZEROFILL' : '';\n            field += data.not_null === true ? ' NOT NULL' : '';\n            field += data['default'] ? ' DEFAULT \\'' + data['default'] + '\\'' : '';\n            field += data.auto_incr === true ? ' AUTO_INCREMENT' : '';\n            field += data.comment ? ' COMMENT \\'' + data.comment + '\\'' : '';\n            fields.push(field);\n\n            if (data.pk === true) {\n\n                add_primaries.push('`' + data.field + '`');\n            }\n        });\n\n        Ext.Object.each(store.getRemovedRecords(), function(idx, obj) {\n\n            if (!obj.raw.field) return;\n\n            var field = '\\n\\tDROP COLUMN `' + obj.raw.field + '`';\n            fields.push(field);\n\n            if (obj.raw.pk === true) {\n\n                del_primaries.push('`' + obj.raw.field + '`');\n            }\n        });\n\n        Ext.Object.each(store.getUpdatedRecords(), function(idx, obj) {\n\n            if (!obj.data.field) return;\n\n            var data = obj.data,\n                field = '\\n\\tCHANGE `' + obj.raw.field + '`';\n\n            field += ' `' + data.field + '` ' + data.type;\n            field += data.len ? '(' + data.len + ')' : '';\n            field += data.unsigned === true ? ' UNSIGNED' : '';\n            field += data.zerofill === true ? ' ZEROFILL' : '';\n            field += data.not_null === true ? ' NOT NULL' : '';\n            field += data['default'] ? ' DEFAULT \\'' + data['default'] + '\\'' : '';\n            field += data.auto_incr === true ? ' AUTO_INCREMENT' : '';\n            field += data.comment ? ' COMMENT \\'' + data.comment + '\\'' : '';\n            fields.push(field);\n\n            if (obj.raw.pk === true) {\n\n                if (data.pk != true) {\n\n                    del_primaries.push('`' + data.field + '`');\n                }\n            }\n            else if (obj.raw.pk != true && data.pk === true) {\n\n                add_primaries.push('`' + data.field + '`');\n            }\n        });\n\n\n        if (del_primaries.length > 0 || add_primaries.length > 0) {\n\n            fields.push('DROP PRIMARY KEY');\n            var primaries = [];\n            Ext.Object.each(store.getRange(), function(idx, obj) {\n\n                if (obj.data.pk === true) {\n\n                    primaries.push('`' + obj.data.field + '`');\n                }\n            });\n            fields.push('ADD PRIMARY KEY(' + Ext.Array.merge(primaries, add_primaries).join(\",\") + ')');\n        }\n\n        query += fields.join(\",\");\n\n        query += this.getTableProperties();\n\n        if (!Ext.String.trim(query)) {\n\n            Ext.Msg.alert('Info', 'There are no changes.');\n            return;\n        }\n\n        tab.setLoading(true);\n\n        app.tunneling({\n            db     : db,\n            query  : app.getAPIS().getQuery('ALTER_TABLE', db, table, query),\n            success: function(config, response) {\n\n                app.openMessage(app.generateSuccessMsg(config.query, 'This table has been modified successfully.'));\n\n                app.reloadTablesNode(db);\n\n                btn.up('window').destroy();\n\n                me.syncProperties();\n                tab.setLoading(false);\n\n                app.fireEvent('after_alter_table');\n            },\n            failure: function(config, response) {\n\n                app.openMessage(app.generateError(config.query, response.message));\n\n                Ext.Msg.alert('Error', response.message);\n\n                tab.setLoading(false);\n            }\n        });\n    },\n\n    getTableProperties: function() {\n\n        var\n            app = this.getApplication(),\n            ctrl = app.getController('table.TablePropertiesTab');\n\n        return ctrl.getTableProperties();\n    },\n\n    syncProperties: function() {\n\n        var\n            app = this.getApplication(),\n            ctrl = app.getController('table.TablePropertiesTab');\n\n        return ctrl.syncProperties();\n\n    },\n\n    initTableSchemaTab: function(tab) {\n\n        var\n            app = this.getApplication(),\n            db = tab.getDatabase(),\n            tb = tab.getTable(),\n            store = tab.getStore(),\n            getMatch = function(str, pattern, idx) {\n\n                var r = str.match(pattern);\n                if (r) r = r[idx];\n                return r;\n            },\n            records = [];\n\n        if (!tb) {\n\n            store.insert(store.getCount(), [{}]);\n            return;\n        }\n\n        tab.setLoading(true);\n\n        //load table fileds list\n        app.tunneling({\n            db     : db,\n            query  : app.getAPIS().getQuery('SHOW_FULL_FIELDS', db, tb),\n            success: function(config, response) {\n\n                Ext.Object.each(response.records, function(idx, row) {\n\n                    var\n                        type = getMatch(row[1], /[a-zA-Z]+/, 0),\n                        len = getMatch(row[1], /\\((.*)\\)/, 1),\n                        unsigned = getMatch(row[1], /unsigned/, 0),\n                        zerofill = getMatch(row[1], /zerofill/, 0);\n\n                    records.push({\n                        'field'    : row[0],\n                        'type'     : type,\n                        'len'      : len,\n                        'default'  : (row[5] == \"NULL\" ? \"\" : row[5]),\n                        'pk'       : (row[4] == \"PRI\" ? true : false),\n                        'not_null' : (row[3] == \"NO\" ? true : false),\n                        'unsigned' : unsigned,\n                        'auto_incr': (row[6] == \"auto_increment\" ? true : false),\n                        'zerofill' : zerofill,\n                        'comment'  : row[8]\n                    });\n                });\n\n                var store = tab.getStore();\n\n                store.loadData(records);\n                store.sync();\n\n                store.insert(store.getCount(), [{}]);\n\n                tab.setLoading(false);\n            }\n        });\n    }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/controller/table/TableSchemaTab.js\n// module id = 69\n// module chunks = 0","Ext.define('Planche.controller.table.ReorderColumns', {\r\n    extend: 'Ext.app.Controller',\r\n\r\n    initWindow: function(db, tb, result) {\r\n\r\n        Ext.create('Planche.lib.Window', {\r\n            stateful  : true,\r\n            title     : 'Reorder columns \\'' + tb + '\\' in \\'' + db + '\\'',\r\n            layout    : 'fit',\r\n            bodyStyle : \"background-color:#FFFFFF\",\r\n            width     : 400,\r\n            height    : 300,\r\n            overflowY : 'auto',\r\n            autoScroll: true,\r\n            modal     : true,\r\n            plain     : true,\r\n            fixed     : true,\r\n            shadow    : false,\r\n            autoShow  : true,\r\n            constrain : true,\r\n            items     : this.initGrid(),\r\n            buttons   : [{\r\n                text   : 'Up',\r\n                scope  : this,\r\n                handler: this.up\r\n            }, {\r\n                text   : 'Down',\r\n                scope  : this,\r\n                handler: this.down\r\n            }, {\r\n                text   : 'Save',\r\n                scope  : this,\r\n                handler: this.save\r\n            }, {\r\n                text   : 'Close',\r\n                scope  : this,\r\n                handler: this.close\r\n            }],\r\n            listeners : {\r\n                scope   : this,\r\n                boxready: function() {\r\n\r\n                    this.initTableData(result);\r\n                }\r\n            }\r\n        });\r\n    },\r\n\r\n    initGrid: function() {\r\n\r\n        var columns = this.makeListColumns(),\r\n            fields = [];\r\n\r\n        Ext.each(columns, function(obj) {\r\n\r\n            fields.push(obj.dataIndex);\r\n        });\r\n\r\n        this.grid = Ext.create('Ext.grid.Panel', {\r\n            id         : 'reorder-columns-grid',\r\n            border     : false,\r\n            columnLines: true,\r\n            width      : '100%',\r\n            flex       : 1,\r\n            columns    : columns,\r\n            store      : Ext.create('Ext.data.Store', {\r\n                fields: fields\r\n            })\r\n        });\r\n\r\n        return this.grid;\r\n    },\r\n\r\n\r\n    initTableData: function(result) {\r\n\r\n        var store = this.grid.getStore(),\r\n            records = [];\r\n\r\n        Ext.Object.each(result.records, function(idx, row) {\r\n\r\n            records.push({\r\n                field: row[0],\r\n                type : row[1]\r\n            });\r\n        });\r\n        store.insert(0, records);\r\n    },\r\n\r\n    makeListColumns: function() {\r\n\r\n        return [\r\n            {text: 'Field', dataIndex: 'field', width: 120},\r\n            {text: 'Type', dataIndex: 'type', flex: 1}\r\n        ];\r\n    },\r\n\r\n    up: function(btn) {\r\n\r\n        this.moveSelectedRow('up');\r\n    },\r\n\r\n    down: function(btn) {\r\n\r\n        this.moveSelectedRow('down');\r\n    },\r\n\r\n    save: function(btn) {\r\n\r\n        var app = this.getApplication(),\r\n            api = app.getAPIS(),\r\n            db = app.getSelectedDatabase(),\r\n            tb = app.getSelectedTable(),\r\n            grid = Ext.getCmp('reorder-columns-grid'),\r\n            selection = grid.selModel.getSelection();\r\n\r\n        app.tunneling({\r\n            db     : db,\r\n            query  : api.getQuery('SHOW_CREATE_TABLE', db, tb),\r\n            success: function(config, response) {\r\n\r\n                var row = Planche.DBUtil.getAssocArray(response.fields, response.records)[0],\r\n                    lines = row[\"Create Table\"].split(\"\\n\"),\r\n                    fields = {};\r\n\r\n                lines.shift();\r\n                lines.pop();\r\n\r\n                lines.map(function(line, idx) {\r\n\r\n                    var line = Ext.String.trim(line),\r\n                        pos = line.indexOf(\" \"),\r\n                        field = line.substring(0, pos),\r\n                        options = line.substring(pos + 1, line.length - 1);\r\n\r\n                    fields[field] = options;\r\n                });\r\n\r\n                var columns = [],\r\n                    prevField = null;\r\n                grid.store.getRange().map(function(row, idx) {\r\n\r\n                    var field = row.raw.field,\r\n                        position = (idx == 0 ? \"FIRST\" : \"AFTER \" + prevField);\r\n                    columns.push(\"MODIFY COLUMN \" + field + \" \" + fields[\"`\"+field+\"`\"] + \" \" + position);\r\n                    prevField = field;\r\n                });\r\n\r\n                app.tunneling({\r\n                    db     : db,\r\n                    query  : api.getQuery(\"ALTER_TABLE\", db, tb, columns.join(\",\")),\r\n                    success: function(config, response) {\r\n\r\n                        Ext.Msg.alert('info', 'Successfully reordered');\r\n                        btn.up('window').destroy();\r\n                    }\r\n                });\r\n            },\r\n            failure: function(config, response) {\r\n\r\n                app.generateQueryErrorMsg(config.query, response.message);\r\n                btn.up('window').destroy();\r\n            }\r\n        });\r\n\r\n\r\n    },\r\n\r\n    close: function(btn) {\r\n\r\n        btn.up('window').destroy();\r\n    },\r\n\r\n    moveSelectedRow: function(direction) {\r\n\r\n        var record = this.grid.getSelectionModel().getSelection()[0],\r\n            index = this.grid.getStore().indexOf(record);\r\n\r\n        if (!record) {\r\n            return;\r\n        }\r\n\r\n        if (direction === 'up') {\r\n            index--;\r\n            if (index < 0) {\r\n                return;\r\n            }\r\n        } else {\r\n            index++;\r\n            if (index >= this.grid.getStore().getCount()) {\r\n                return;\r\n            }\r\n        }\r\n        this.grid.getStore().remove(record);\r\n        this.grid.getStore().insert(index, record);\r\n        this.grid.getSelectionModel().select(index, true);\r\n    }\r\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/controller/table/ReorderColumns.js\n// module id = 70\n// module chunks = 0","Ext.define('Planche.controller.table.EditTextColumn', {\r\n    extend: 'Ext.app.Controller',\r\n\r\n    initWindow: function(colName, content) {\r\n\r\n        Ext.create('Planche.lib.Window', {\r\n            id        : 'column-text-view-window',\r\n            stateful  : true,\r\n            title     : 'Text View - ' + colName,\r\n            layout    : 'fit',\r\n            bodyStyle : \"background-color:#FFFFFF\",\r\n            width     : 500,\r\n            height    : 400,\r\n            overflowY : 'auto',\r\n            autoScroll: true,\r\n            modal     : true,\r\n            plain     : true,\r\n            fixed     : true,\r\n            shadow    : false,\r\n            autoShow  : true,\r\n            constrain : true,\r\n            items     : [{\r\n                xtype: 'textareafield',\r\n                value: this.htmlspecialchars_decode(content)\r\n            }],\r\n            buttons   : [{\r\n                text : 'Close',\r\n                scope: this,\r\n                handler : function(btn){\r\n\r\n                    var win = btn.up(\"window\");\r\n                    win.destroy();\r\n                }\r\n            }]\r\n        });\r\n    },\r\n\r\n    htmlspecialchars_decode: function(string, quote_style) {\r\n\r\n        var optTemp = 0,\r\n            i = 0,\r\n            noquotes = false;\r\n        if (typeof quote_style === 'undefined') {\r\n            quote_style = 2;\r\n        }\r\n        string = string.toString()\r\n            .replace(/&lt;/g, '<')\r\n            .replace(/&gt;/g, '>');\r\n        var OPTS = {\r\n            'ENT_NOQUOTES'         : 0,\r\n            'ENT_HTML_QUOTE_SINGLE': 1,\r\n            'ENT_HTML_QUOTE_DOUBLE': 2,\r\n            'ENT_COMPAT'           : 2,\r\n            'ENT_QUOTES'           : 3,\r\n            'ENT_IGNORE'           : 4\r\n        };\r\n        if (quote_style === 0) {\r\n            noquotes = true;\r\n        }\r\n        if (typeof quote_style !== 'number') { // Allow for a single string or an array of string flags\r\n            quote_style = [].concat(quote_style);\r\n            for (i = 0 ; i < quote_style.length ; i++) {\r\n                // Resolve string input to bitwise e.g. 'PATHINFO_EXTENSION' becomes 4\r\n                if (OPTS[quote_style[i]] === 0) {\r\n                    noquotes = true;\r\n                } else if (OPTS[quote_style[i]]) {\r\n                    optTemp = optTemp | OPTS[quote_style[i]];\r\n                }\r\n            }\r\n            quote_style = optTemp;\r\n        }\r\n        if (quote_style & OPTS.ENT_HTML_QUOTE_SINGLE) {\r\n            string = string.replace(/&#0*39;/g, \"'\"); // PHP doesn't currently escape if more than one 0, but it should\r\n            // string = string.replace(/&apos;|&#x0*27;/g, \"'\"); // This would also be useful here, but not a part of\r\n            // PHP\r\n        }\r\n        if (!noquotes) {\r\n            string = string.replace(/&quot;/g, '\"');\r\n        }\r\n        // Put this in last place to avoid escape being double-decoded\r\n        string = string.replace(/&amp;/g, '&');\r\n\r\n        return string;\r\n    }\r\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/controller/table/EditTextColumn.js\n// module id = 71\n// module chunks = 0","Ext.define('Planche.controller.table.AdvancedProperties', {\r\n    extend: 'Ext.app.Controller',\r\n\r\n    initWindow: function(db, tb, result) {\r\n\r\n        Ext.create('Planche.lib.Window', {\r\n            stateful  : true,\r\n            title     : 'Advanced properties \\'' + tb + '\\' in \\'' + db + '\\'',\r\n            layout    : 'fit',\r\n            bodyStyle : \"background-color:#FFFFFF\",\r\n            width     : 400,\r\n            height    : 300,\r\n            overflowY : 'auto',\r\n            autoScroll: true,\r\n            modal     : true,\r\n            plain     : true,\r\n            fixed     : true,\r\n            shadow    : false,\r\n            autoShow  : true,\r\n            constrain : true,\r\n            items     : this.initGrid(),\r\n            buttons   : [{\r\n                text   : 'close',\r\n                scope  : this,\r\n                handler: this.close\r\n            }],\r\n            listeners : {\r\n                scope   : this,\r\n                boxready: function() {\r\n\r\n                    this.initTableData(result);\r\n                }\r\n            }\r\n        });\r\n    },\r\n\r\n    initGrid: function() {\r\n\r\n        var columns = this.makeListColumns();\r\n\r\n        var fields = [];\r\n        Ext.each(columns, function(obj) {\r\n\r\n            fields.push(obj.dataIndex);\r\n        });\r\n\r\n        this.columnGrid = Ext.create('Ext.grid.Panel', {\r\n            border     : false,\r\n            plugins    : [\r\n                Ext.create('Ext.grid.plugin.CellEditing', {\r\n                    clicksToEdit: 2\r\n                })\r\n            ],\r\n            columnLines: true,\r\n            width      : '100%',\r\n            flex       : 1,\r\n            columns    : columns,\r\n            store      : Ext.create('Ext.data.Store', {\r\n                fields: fields\r\n            })\r\n        });\r\n\r\n        return this.columnGrid;\r\n    },\r\n\r\n    initTableData: function(result) {\r\n\r\n        var store = this.columnGrid.getStore();\r\n\r\n        var records = [];\r\n        Ext.Object.each(result.fields, function(idx, col) {\r\n\r\n            records.push({\r\n                variable: col.name,\r\n                values  : result.records[0][idx]\r\n            });\r\n        });\r\n        store.insert(0, records);\r\n    },\r\n\r\n    makeListColumns: function() {\r\n\r\n        return [\r\n            {text: 'Variable', dataIndex: 'variable', width: 120},\r\n            {text: 'Values', dataIndex: 'values', flex: 1}\r\n        ];\r\n    },\r\n\r\n\r\n    close: function(btn) {\r\n\r\n        btn.up('window').destroy();\r\n    }\r\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/controller/table/AdvancedProperties.js\n// module id = 72\n// module chunks = 0","Ext.define('Planche.controller.table.EditSchemaWindow', {\r\n    extend: 'Ext.app.Controller',\r\n    views : [\r\n        'Planche.view.table.EditSchemaWindow',\r\n        'Planche.view.table.TableSchemaTab',\r\n        'Planche.view.table.TablePropertiesTab',\r\n        'Planche.view.table.TableIndexesTab',\r\n        'Planche.view.table.TableSQLTab',\r\n        'Planche.view.table.TableInfoTab'\r\n    ],\r\n    init  : function() {\r\n\r\n        this.control({\r\n            '#edit-schema-btn-close': {\r\n                'click': this.cancel\r\n            }\r\n        });\r\n    },\r\n\r\n    initWindow: function(db, tb, openTab) {\r\n\r\n        var title = (tb ? 'Alter Table \\'' + tb + '\\' in \\'' + db + '\\'' : 'Create new table');\r\n        Ext.create('Planche.view.table.EditSchemaWindow', {\r\n            title    : title,\r\n            items    : this.initTabPanel(db, tb),\r\n            listeners: {\r\n                boxready: function(win) {\r\n\r\n                    if (!tb) {\r\n\r\n                        Ext.invoke(win.query('table-properties-tab, table-indexes-tab, table-sql-tab, table-info-tab'), 'setDisabled', true);\r\n                    }\r\n\r\n                    if(openTab){\r\n\r\n                        var tab = win.down(openTab);\r\n                        tab.show();\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    },\r\n\r\n    initTabPanel: function(db, tb) {\r\n\r\n        return {\r\n            xtype: 'tabpanel',\r\n            items: [\r\n                this.initTableSchemaTab(db, tb),\r\n                this.initTablePropertiesTab(db, tb),\r\n                this.initTableIndexexTab(db, tb),\r\n                this.initTableSQLTab(db, tb),\r\n                this.initTableInfoTab(db, tb)\r\n            ]\r\n        }\r\n    },\r\n\r\n    initTableSchemaTab: function(db, tb) {\r\n\r\n        return {\r\n            xtype      : 'table-schema-tab',\r\n            application: this.getApplication(),\r\n            database   : db,\r\n            table      : tb\r\n        }\r\n    },\r\n\r\n    initTablePropertiesTab: function(db, tb) {\r\n\r\n        return {\r\n            xtype      : 'table-properties-tab',\r\n            application: this.getApplication(),\r\n            database   : db,\r\n            table      : tb\r\n        }\r\n    },\r\n\r\n    initTableIndexexTab: function(db, tb) {\r\n\r\n        return {\r\n            xtype      : 'table-indexes-tab',\r\n            application: this.getApplication(),\r\n            database   : db,\r\n            table      : tb\r\n        }\r\n    },\r\n\r\n    initTableSQLTab: function(db, tb) {\r\n\r\n        return {\r\n            xtype      : 'table-sql-tab',\r\n            application: this.getApplication(),\r\n            database   : db,\r\n            table      : tb\r\n        }\r\n    },\r\n\r\n    initTableInfoTab: function(db, tb) {\r\n\r\n        return {\r\n            xtype      : 'table-info-tab',\r\n            application: this.getApplication(),\r\n            database   : db,\r\n            table      : tb\r\n        }\r\n    },\r\n\r\n    cancel: function(btn) {\r\n\r\n        var tab = Ext.getCmp('table-schema-tab');\r\n        if (tab.getEdited()) {\r\n\r\n            Ext.Msg.confirm('Cancel', 'You will lose all changes. Do you want to quit?', function(btn, text) {\r\n\r\n                if (btn == 'yes') {\r\n\r\n                    this.up('window').destroy();\r\n                }\r\n            }, btn);\r\n        }\r\n        else {\r\n\r\n            btn.up('window').destroy();\r\n        }\r\n    }\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/controller/table/EditSchemaWindow.js\n// module id = 73\n// module chunks = 0","Ext.define('Planche.controller.table.EditIndexWindow', {\r\n    extend: 'Ext.app.Controller',\r\n    views : [\r\n        'Planche.view.table.EditIndexWindow'\r\n    ],\r\n    init  : function() {\r\n\r\n        this.control({\r\n            '#edit-index-btn-save' : {\r\n                'click': this.save\r\n            },\r\n            '#edit-index-btn-close': {\r\n                'click': this.cancel\r\n            },\r\n            '#edit-index-grid'     : {\r\n                'boxready' : this.initGrid,\r\n                'cellclick': this.selectField\r\n            }\r\n        });\r\n    },\r\n\r\n    initWindow: function(db, table, index) {\r\n\r\n        var title = (index ? 'Alter Index \\'' + index + '\\' in `' + db + '`.`' + table + '`' : 'Create new index');\r\n\r\n        Ext.create('Planche.view.table.EditIndexWindow', {\r\n            title    : title,\r\n            database : db,\r\n            table    : table,\r\n            indexName: index\r\n        });\r\n    },\r\n\r\n    initGrid: function(grid) {\r\n\r\n        var app = this.getApplication(),\r\n            win = grid.up(\"window\"),\r\n            index = Ext.getCmp('edit-index-name'),\r\n            option = Ext.getCmp('edit-index-option'),\r\n            indexName = win.getIndexName(),\r\n            db = win.getDatabase(),\r\n            table = win.getTable(),\r\n            me = this,\r\n            getMatch = function(str, pattern, idx) {\r\n\r\n                var r = str.match(pattern);\r\n                if (r) r = r[idx];\r\n                return r;\r\n            };\r\n\r\n        if (!table) {\r\n\r\n            return;\r\n        }\r\n\r\n        var columns = {},\r\n            records = [],\r\n            messages = [],\r\n            tunnelings = [],\r\n            editMode = false;\r\n\r\n        tunnelings.push({\r\n            db     : db,\r\n            query  : app.getAPIS().getQuery('SHOW_FULL_FIELDS', db, table),\r\n            success: function(config, response) {\r\n\r\n                Ext.Object.each(response.records, function(idx, row) {\r\n\r\n                    var type = getMatch(row[1], /[a-zA-Z]+/, 0),\r\n                        len = getMatch(row[1], /\\((.*)\\)/, 1),\r\n                        unsigned = getMatch(row[1], /unsigned/, 0),\r\n                        zerofill = getMatch(row[1], /zerofill/, 0);\r\n\r\n                    records.push({\r\n                        'field'  : row[0],\r\n                        'type'   : type,\r\n                        'comment': row[8],\r\n                        'use'    : false,\r\n                        'sort'   : null,\r\n                        'length' : null\r\n                    });\r\n                });\r\n            },\r\n            failure: function(config, response) {\r\n\r\n                messages.push(app.generateError(config.query, response.message));\r\n            }\r\n        });\r\n\r\n        if (indexName) {\r\n\r\n            editMode = true;\r\n            index.setValue(indexName);\r\n\r\n            tunnelings.push({\r\n                db     : db,\r\n                query  : app.getAPIS().getQuery('INDEX_KEYS_INFO', db, table, indexName),\r\n                success: function(config, response) {\r\n\r\n                    var records = Planche.DBUtil.getAssocArray(response.fields, response.records),\r\n                        optionVal = '';\r\n\r\n                    Ext.Array.each(records, function(row, idx) {\r\n\r\n                        if (row.Non_unique == '0') {\r\n\r\n                            optionVal = 'UNIQUE';\r\n                        }\r\n\r\n                        if (row.Index_type == 'FULLTEXT') {\r\n\r\n                            optionVal = 'FULLTEXT';\r\n                        }\r\n\r\n                        columns[row.Column_name] = {\r\n                            len: row.Sub_part\r\n                        };\r\n                    });\r\n\r\n                    option.setValue({'edit-index-option': optionVal});\r\n                },\r\n                failure: function(config, response) {\r\n\r\n                    messages.push(app.generateError(config.query, response.message));\r\n                }\r\n            });\r\n        }\r\n\r\n        app.tunnelings(tunnelings, {\r\n            start  : function() {\r\n\r\n                win.setLoading(true);\r\n            },\r\n            success: function() {\r\n\r\n                if (editMode) {\r\n\r\n                    Ext.Array.each(records, function(obj, idx) {\r\n\r\n                        if (columns[obj.field]) {\r\n\r\n                            records[idx].use = true;\r\n                        }\r\n                    });\r\n                }\r\n\r\n                me.loadColumns(records);\r\n                win.setLoading(false);\r\n            },\r\n            failure: function() {\r\n\r\n                app.showMessage(messages);\r\n                win.setLoading(false);\r\n            }\r\n        });\r\n    },\r\n\r\n    loadColumns: function(records) {\r\n\r\n        var grid = Ext.getCmp('edit-index-grid');\r\n\r\n        grid.getStore().loadData(records);\r\n\r\n    },\r\n\r\n    selectField: function(grid, td, cellIndex, record, tr, rowIndex, e, eOpts) {\r\n\r\n        if (cellIndex < 3) {\r\n\r\n            record.set('use', !record.get('use'));\r\n        }\r\n    },\r\n\r\n    save: function() {\r\n\r\n        var app = this.getApplication(),\r\n            win = Ext.getCmp('edit-index-window'),\r\n            tab = Ext.getCmp('table-indexes-tab'),\r\n            grid = Ext.getCmp('edit-index-grid'),\r\n            index = Ext.getCmp('edit-index-name'),\r\n            using = Ext.getCmp('edit-index-using'),\r\n            usingValue = using.getValue()['edit-index-using'],\r\n            option = Ext.getCmp('edit-index-option'),\r\n            optionValue = option.getValue()['edit-index-option'],\r\n            indexName = index.getValue(),\r\n            db = win.getDatabase(),\r\n            table = win.getTable(),\r\n            oldIndexName = win.getIndexName(),\r\n            store = grid.getStore(),\r\n            list = store.getRange(),\r\n            tunnelings = [],\r\n            columns = [],\r\n            messages = [];\r\n\r\n        if (!indexName) {\r\n\r\n            index.markInvalid('Please input index name');\r\n            return;\r\n        }\r\n\r\n        Ext.Array.each(list, function(obj, idx) {\r\n\r\n            var d = obj.data;\r\n\r\n            if (d.use) {\r\n\r\n                var column = d.field;\r\n\r\n                if (d.length) {\r\n\r\n                    column = column + '(' + d.length + ')';\r\n                }\r\n\r\n                if (d.sort) {\r\n\r\n                    column = column + ' ' + d.sort;\r\n                }\r\n\r\n                columns.push(column);\r\n            }\r\n        });\r\n\r\n        if (oldIndexName) {\r\n\r\n            tunnelings.push({\r\n                db     : db,\r\n                query  : app.getAPIS().getQuery('DROP_INDEX', db, table, oldIndexName),\r\n                failure: function(config, response) {\r\n\r\n                    messages.push(app.generateError(config.query, response.message));\r\n                }\r\n            });\r\n        }\r\n\r\n        usingValue = optionValue != 'FULLTEXT' ? \"USING \" + usingValue : usingValue;\r\n        tunnelings.push({\r\n            db     : db,\r\n            query  : app.getAPIS().getQuery('ADD_INDEX', db, table, indexName, optionValue, columns.join(\",\"), usingValue),\r\n            failure: function(config, response) {\r\n\r\n                messages.push(app.generateError(config.query, response.message));\r\n            }\r\n        });\r\n\r\n        app.tunnelings(tunnelings, {\r\n            start  : function() {\r\n\r\n                win.setLoading(true);\r\n            },\r\n            success: function() {\r\n\r\n                if(tab){\r\n\r\n                    tab.fireEvent('reload', tab);\r\n                }\r\n\r\n                win.setLoading(false);\r\n                win.destroy();\r\n            },\r\n            failure: function() {\r\n\r\n                app.showMessage(messages);\r\n                win.setLoading(false);\r\n            }\r\n        });\r\n    },\r\n\r\n    cancel: function() {\r\n\r\n        var win = Ext.getCmp('edit-index-window');\r\n        win.destroy();\r\n    }\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/controller/table/EditIndexWindow.js\n// module id = 74\n// module chunks = 0","Ext.define('Planche.controller.layout.Toolbar', {\n    extend: 'Ext.app.Controller',\n    views : [\n        'Planche.view.layout.Toolbar'\n    ],\n    init : function () {\n\n        var app = this.getApplication();\n\n        this.control({\n            '#toolbar-new-connect' : {\n                click : Ext.Function.bind(app.openConnPanel, app)\n            },\n\n            '#toolbar-query-editor' : {\n                click : Ext.Function.bind(app.openQueryTab, app)\n            },\n\n            '#toolbar-query-exec' : {\n                click : Ext.Function.bind(app.executeQuery, app)\n            },\n\n            '#toolbar-stop-operation' : {\n                click : Ext.Function.bind(app.stopOperation, app)\n            },\n\n            '#toolbar-user-manager' : {\n                click : Ext.Function.bind(app.openUserPanel, app)\n            },\n\n            '#toolbar-tokenize' : {\n                click : Ext.Function.bind(app.tokenize, app)\n            },\n\n           '#toolbar-quick-command' : {\n                click : Ext.Function.bind(app.openQuickPanel, app)\n            },\n\n           '#toolbar-show-procs' : {\n                click : Ext.Function.bind(app.openProcessPanel, app)\n            },\n\n            '#toolbar-show-vars' : {\n                click : Ext.Function.bind(app.openVariablesPanel, app)\n            },\n\n            '#toolbar-show-status' : {\n                click : Ext.Function.bind(app.openStatusPanel, app)\n            },\n\n            '#toolbar-flush' : {\n                click : Ext.Function.bind(app.openFlushPanel, app)\n            },\n\n            '#toolbar-fullscreen' : {\n                click : Ext.Function.bind(app.changeToFullscreen, app)\n            },\n\n            'app-main toolbar splitbutton' : {\n                click : this.showMenu,\n                mouseover : this.showMenu\n            }\n        });\n    },\n\n    showMenu : function (btn) {\n\n        Ext.applyIf(btn, { custom : false });\n\n        if(btn.custom == true) { return; }\n\n        var id = 'menu.'+btn.text;\n\n        var ctrl = this.getController(id, btn);\n        ctrl.show(btn);\n    }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/controller/layout/Toolbar.js\n// module id = 75\n// module chunks = 0","Ext.define('Planche.controller.layout.ConnectTab', {\n    extend: 'Ext.app.Controller',\n    views : [\n        'Planche.view.layout.SchemaTree',\n        'Planche.view.layout.QueryTabPanel'\n    ],\n    init : function () {\n\n        this.control({\n            'connect-tab' : {\n                boxready : function (tab) {\n\n                    this.getApplication().checkToolbar();\n                },\n                activate : function (tab) {\n\n                    this.getApplication().checkToolbar();\n                },\n                destroy : function (tab) {\n\n                    this.getApplication().checkToolbar();\n                }\n            }\n        });\n    }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/controller/layout/ConnectTab.js\n// module id = 76\n// module chunks = 0","Ext.define('Planche.controller.layout.HistoryTab', {\n    extend: 'Ext.app.Controller',\n    init : function () {\n\n    \tthis.control({\n    \t\t'history-tab' : {\n\t\t\t\tboxready : function (editor, width, height) {\n\n\t\t            textarea = editor.getEl().query('textarea')[0];\n\n\t\t            Ext.apply(editor, {\n\t\t            \teditor : CodeMirror.fromTextArea(textarea, {\n\t\t                    mode: 'text/x-mysql',\n\t\t                    indentWithTabs: true,\n\t\t                    smartIndent: true,\n\t\t                    matchBrackets : true,\n\t\t                    autofocus: true,\n\t\t                    readOnly : true,\n\t\t                    lineNumbers : false,\n\t\t                    showCursorWhenSelecting : false\n\t\t                }),\n\t\t            \tgetEditor : function () {\n\t\t            \t\treturn this.editor;\n\t\t            \t}\n\t\t            });\n\n\t\t\t\t\tvar task = new Ext.util.DelayedTask(function () {\n\n\t\t\t\t\t    editor.getEditor().setValue(this.application.history.join(\"\\n\"));\n\n\t\t\t\t\t}, this);\n\n\t\t\t\t\ttask.delay(100);\n\t\t\t\t},\n\t\t\t\tresize : function (editor, width, height) {\n\n\t\t\t\t\teditor.getEditor().setSize(width, height);\n\t\t\t\t},\n\t\t\t\tactivate : function (editor) {\n\n\t\t\t\t\ttry{\n\n\t\t\t\t\t\tif(editor.getEditor()) {\n\n\t\t\t\t\t\t\teditor.getEditor().setValue(this.application.history.join(\"\\n\"));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch(e) {\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n    \t\t}\n    \t})\n    }\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/controller/layout/HistoryTab.js\n// module id = 77\n// module chunks = 0","Ext.define('Planche.controller.layout.InfoTab', {\n    extend  : 'Ext.app.Controller',\n    prevNode: null,\n    init    : function() {\n\n        var app = this.getApplication();\n\n        this.control({\n            'info-tab'   : {\n                show: function(grid) {\n\n                    var node = app.getSelectedNode(true);\n\n                    if (this.prevNode == node) {\n\n                        return;\n                    }\n\n                    this.prevNode = node;\n\n                    this.openInfo(node);\n                }\n            },\n            'schema-tree': {\n                select: function(view) {\n\n                    var treeview = view.views[0],\n                        tree = treeview.up(\"treepanel\");\n\n                    app.setSelectedTree(tree);\n\n                    var node = app.getSelectedNode(true);\n\n                    this.openInfo(node);\n                }\n            }\n        });\n    },\n\n    openInfo: function(node) {\n\n        var app = this.getApplication(),\n            type = node.raw.type,\n            db = app.getSelectedDatabase(),\n            table = app.getSelectedTable(),\n            func = 'export' + type.charAt(0).toUpperCase() + type.slice(1) + 'InfoToHTML',\n            util = Planche.SchemaUtil;\n\n        if (util[func]) {\n\n            var info = app.getActiveInfoTab();\n            if (info.isVisible()) {\n\n                util[func](db, table, info, 'update');\n            }\n        }\n    }\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/controller/layout/InfoTab.js\n// module id = 78\n// module chunks = 0","Ext.define('Planche.controller.layout.TableDataTab', {\n    extend: 'Ext.app.Controller',\n    prevNode : null,\n    init : function () {\n\n        var app = this.getApplication();\n\n        this.control({\n            'table-data-tab'   : {\n                show: function() {\n\n                    var node = app.getSelectedNode(true);\n\n                    if(!app.getParentNode(node, 'table')){\n\n                        return;\n                    }\n\n                    if(this.prevNode == node){\n\n                        return;\n                    }\n\n                    this.prevNode = node;\n\n                    var db = app.getSelectedDatabase(),\n                        table = app.getSelectedNode();\n\n                    if(app.openMode == 'select'){\n\n                        app.openTable(db, table);\n                    }\n                    else {\n\n                        app.countTable(db, table);\n                    }\n                }\n            }\n        });\n    }\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/controller/layout/TableDataTab.js\n// module id = 79\n// module chunks = 0","Ext.define('Planche.controller.layout.MessageTab', {\n    extend: 'Ext.app.Controller',\n    init : function () {\n\n    \tthis.control({\n    \t\t'message-tab' : {\n\t    \t\t'openMessage' : this.openMessage\n\t    \t}\n\t    });\n    },\n\n   \topenMessage : function (messages) {\n\n        var \n\t\tapp\t\t= this.getApplication(),\n\t\tpanel\t= app.getActiveMessageTab(),\n\t\tdom\t\t= Ext.get(panel.getEl().query(\"div[id$=innerCt]\"));\n\n        if(typeof messages == 'object') {\n\n        \tvar message = '';\n        \tExt.Array.each(messages, function (str, idx) {\n\n        \t\tmessage += str+\"<br/><br/>\";\n        \t});\n        \t\n        \tdom.setHTML(message);\n        }\n        else {\n\n        \tdom.setHTML(messages);\n        }\n        \n        panel.show();\n\t}\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/controller/layout/MessageTab.js\n// module id = 80\n// module chunks = 0","Ext.define('Planche.controller.layout.QueryTab', {\n    extend: 'Ext.app.Controller',\n    views : [\n        'Planche.view.layout.QueryEditor',\n        'Planche.view.layout.ResultTabPanel'\n    ],\n    init : function () {\n\n    }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/controller/layout/QueryTab.js\n// module id = 81\n// module chunks = 0","Ext.define('Planche.controller.layout.ResultTabPanel', {\n    extend: 'Ext.app.Controller',\n    views : [\n        'Planche.view.layout.MessageTab',\n        'Planche.view.layout.TableDataTab',\n        'Planche.view.layout.InfoTab',\n        'Planche.view.layout.HistoryTab'\n    ],\n    timer : null,\n    query : null,\n    init  : function() {\n\n        this.control({\n            'result-tab-panel': {\n                'initQueryResult': this.initQueryResult\n            }\n        });\n    },\n\n    loadGridRecord : function(cmd, db, callback){\n\n        if (typeof cmd == 'undefined') { cmd = ''; }\n\n        var me = this,\n            app = me.getApplication();\n\n        app.setLoading(true);\n\n        app.tunneling({\n            db     : db,\n            query  : me.query['get' + cmd + 'SQL'](),\n            success: function(config, response) {\n\n                var data = app.makeRecords(response.fields, response.records),\n                    textRows = me.grid.down('text[text=Total]').next();\n\n                me.grid.store.loadData(data);\n                me.grid.store.sync();\n\n                textRows.setText(parseInt(response.affected_rows, 10));\n\n                app.setLoading(false);\n\n                if (callback) {\n\n                    callback(cmd, db);\n                }\n            }\n        });\n    },\n\n    initQueryResult: function(config, db, query, response) {\n\n        config.tab = config.tab === true || true;\n\n        this.query = query;\n\n        var me = this,\n            app = me.getApplication(),\n            schema = response.fields, records = response.records,\n            columns = [], fields = [], plugins = [{\n                ptype: 'bufferedrenderer'\n            }], grid,\n\n            loadGridRecord = function(cmd, db) {\n\n                me.loadGridRecord(cmd, db, function(){\n\n                    var textRefreshPerSec = me.grid.down('text[text=Refresh Per Sec]').next(),\n                        refreshPerSec = parseFloat(textRefreshPerSec.getValue());\n\n                    if (refreshPerSec > 0) {\n\n                        me.timer = setTimeout(loadGridRecord.bind(me, cmd, db), refreshPerSec * 1000);\n                    }\n                });\n            },\n\n            updateToolbar = function() {\n\n                var textfield = grid.query('textfield'),\n                    btnPrev = grid.down('button[text=Previous]'),\n                    btnNext = grid.down('button[text=Next]'),\n                    textRows = me.grid.down('text[text=Total]').next();\n\n                btnNext.setDisabled(grid.store.data.length < query.end);\n                btnPrev.setDisabled(1 > query.start);\n\n                textfield[0].setValue(query.start);\n                textfield[1].setValue(query.end);\n\n                textRows.setText(grid.store.data.length);\n            },\n\n            colObjs = {};\n\n        Ext.Array.each(schema, function(col, idx) {\n\n            colObjs[col.name] = Ext.create('Ext.grid.column.Column', {\n                text        : col.name,\n                dataIndex   : col.name,\n                listeners   : {\n                    dblclick: function(view, el, ridx, cidx, event, data) {\n\n                        app.openWindow('table.EditTextColumn', col.name, data.get(col.name));\n                    }\n                },\n                hideable    : false,\n                menuDisabled: true,\n                draggable   : false,\n                groupable   : false,\n                renderer    : function(value){\n\n                    if(value === null){\n\n                        return '(NULL)';\n                    }\n\n                    return Ext.htmlEncode(value);\n                },\n                editor      : {\n                    xtype: 'textfield'\n                }\n            });\n\n            columns.push(colObjs[col.name]);\n\n            fields.push(col.name);\n        });\n\n        var storeConfig = {\n            fields    : fields,\n            autoLoad  : false,\n            pageSize  : 10,\n            data      : app.makeRecords(schema, records),\n            remoteSort: true,\n            proxy     : {\n                type  : 'memory',\n                reader: {\n                    type: 'json'\n                }\n            }\n        };\n\n        var orderColumn = null,\n            orderColumnDir = 'ASC',\n            isEditable = false;\n\n        if (config.openTable) {\n\n            Ext.apply(storeConfig, {\n                sort: function(params) {\n\n                    if (orderColumn != params.property) {\n\n                        if (orderColumn != null) {\n\n                            var column = colObjs[orderColumn];\n                            column.removeCls('x-column-header-sort-DESC');\n                            column.removeCls('x-column-header-sort-ASC');\n                        }\n\n                        orderColumnDir = orderColumn == null ? 'DESC' : 'ASC';\n                        orderColumn = params.property;\n                    }\n                    else {\n\n                        orderColumnDir = orderColumnDir == 'ASC' ? 'DESC' : 'ASC';\n                    }\n\n                    query.setOrderBy(orderColumn, orderColumnDir);\n\n                    loadGridRecord();\n                }\n            });\n\n            plugins.push({\n                ptype       : 'cellediting',\n                clicksToEdit: 1\n            });\n\n            isEditable = true;\n        }\n\n        var grid = this.grid = Ext.create('Ext.grid.Panel', Ext.Object.merge({\n            border     : true,\n            flex       : 1,\n            columnLines: true,\n            selModel   : {\n                selType: 'checkboxmodel'\n            },\n            viewConfig : {\n                emptyText: 'There are no items to show in this view.'\n            },\n            plugins    : plugins,\n            tbar       : [{\n                xtype   : 'button',\n                text    : 'Add',\n                icon    : 'resources/images/icon_add_row16x16.png',\n                disabled: !isEditable,\n                cls     : 'btn',\n                handler : function(){\n\n                    me.addRecord(db, config.openTable);\n                }\n            }, {\n                xtype   : 'button',\n                text    : 'Save',\n                icon    : 'resources/images/icon_save_row16x16.png',\n                disabled: !isEditable,\n                cls     : 'btn',\n                handler : function(){\n\n                    me.saveChanges(db, config.openTable);\n                }\n            }, {\n                xtype   : 'button',\n                text    : 'Del',\n                icon    : 'resources/images/icon_del_row16x16.png',\n                disabled: !isEditable,\n                cls     : 'btn',\n                handler : function(){\n\n                    me.delRecord(db, config.openTable);\n                }\n            }, {\n                xtype : 'tbseparator',\n                margin: '0 5 0 5'\n            }, {\n                xtype   : 'button',\n                text    : 'Previous',\n                icon    : 'resources/images/icon_prev16x16.png',\n                cls     : 'btn',\n                disalbed: true,\n                handler : function(btn) {\n\n                    loadGridRecord('PrevRecordSet');\n                }\n            }, {\n                xtype    : 'textfield',\n                value    : query.start,\n                listeners: {\n                    specialkey: function(field, el) {\n\n                        if (el.getKey() == Ext.EventObject.ENTER) {\n\n                            query.start = parseInt(field.getValue(), 10);\n                            loadGridRecord();\n                        }\n                    }\n                }\n            }, {\n                xtype   : 'button',\n                text    : 'Next',\n                icon    : 'resources/images/icon_next16x16.png',\n                cls     : 'btn',\n                disalbed: true,\n                handler : function(btn) {\n\n                    loadGridRecord('NextRecordSet');\n                }\n            }, {\n                xtype : 'text',\n                text  : 'Size',\n                margin: '0 0 0 5'\n            }, {\n                xtype    : 'textfield',\n                value    : query.end,\n                width    : 80,\n                margin   : '0 0 0 5',\n                listeners: {\n                    specialkey: function(field, el) {\n\n                        if (el.getKey() == Ext.EventObject.ENTER) {\n\n                            query.end = parseInt(field.getValue(), 10);\n                            loadGridRecord();\n                        }\n                    }\n                }\n            }, {\n                xtype : 'tbseparator',\n                margin: '0 5 0 5'\n            }, {\n                xtype: 'text',\n                text : 'Refresh Per Sec'\n            }, {\n                xtype    : 'textfield',\n                value    : 0,\n                width    : 40,\n                margin   : '0 0 0 5',\n                listeners: {\n                    specialkey: function(field, el) {\n\n                        if (el.getKey() == Ext.EventObject.ENTER) {\n\n                            loadGridRecord();\n                        }\n                    }\n                }\n            }, {\n                xtype  : 'button',\n                text   : 'Refresh',\n                icon   : 'resources/images/icon_refresh16x16.png',\n                cls    : 'btn',\n                margin : '0 0 0 5',\n                handler: function(btn) {\n\n                    clearTimeout(me.timer);\n                    loadGridRecord();\n                }\n            }, {\n                xtype  : 'button',\n                text   : 'Stop',\n                icon   : 'resources/images/icon_stop16x16.png',\n                cls    : 'btn',\n                margin : '0 0 0 5',\n                handler: function(btn) {\n\n                    clearTimeout(me.timer);\n                    var textRefreshPerSec = grid.down('text[text=Refresh Per Sec]').next();\n                    textRefreshPerSec.setValue(0);\n                }\n            }, {\n                xtype : 'tbseparator',\n                margin: '0 5 0 5'\n            }, {\n                xtype  : 'button',\n                text   : 'Tokens',\n                cls    : 'btn',\n                handler: function(btn) {\n\n                    app.openTokenPanel(query.getTokens());\n                }\n            }],\n            fbar       : [\n                {xtype: 'text', text: 'Total'},\n                {xtype: 'text', text: '0', width: 50, rtl: true},\n                {xtype: 'text', text: 'Rows'}\n            ],\n            remoteSort : true,\n            store      : Ext.create('Ext.data.Store', storeConfig),\n            columns    : columns\n        }, config));\n\n        grid.store.on('datachanged', function() {\n\n            updateToolbar();\n        });\n\n        grid.on('sortchange', function() {\n\n            if (!orderColumn) return;\n\n            setTimeout(function() {\n\n                var column = colObjs[orderColumn];\n\n                if (orderColumnDir == 'ASC') {\n\n                    column.removeCls('x-column-header-sort-DESC');\n                    column.addCls('x-column-header-sort-ASC');\n                }\n                else {\n\n                    column.removeCls('x-column-header-sort-ASC');\n                    column.addCls('x-column-header-sort-DESC');\n                }\n            }, 100);\n        });\n\n        updateToolbar();\n\n        if (config.openTable) {\n\n            var tab = app.getActiveTableDataTab();\n\n            Ext.apply(tab, {\n                loadedTable: config.openTable\n            });\n\n            tab.removeAll();\n\n            tab.show();\n            tab.add(grid);\n        }\n        else {\n\n            var resultTabPanel = app.getActiveResultTabPanel();\n\n            resultTabPanel.add(grid);\n            resultTabPanel.setActiveTab(grid);\n        }\n    },\n\n    addRecord: function(btn) {\n\n        var grid = this.grid,\n            store = grid.store;\n\n        store.add({});\n        grid.scrollByDeltaY(999999);\n    },\n\n    saveChanges: function(db, table) {\n\n        var me = this,\n            app = me.getApplication(),\n            api = app.getAPIS(),\n            grid = this.grid,\n            store = grid.store,\n            selModel = grid.getSelectionModel(),\n            selection = selModel.getSelection();\n\n        if (selection.length == 0) {\n\n            Ext.Msg.alert('info', 'Please, select one more rows to delete');\n            return;\n        }\n\n        var tunnelings = [],\n            messages = [];\n\n        Ext.Array.each(store.getNewRecords(), function(record) {\n\n            var fields = [],\n                values = [];\n            Ext.Object.each(record.data, function(key, value) {\n\n                fields.push(key);\n\n                if(value){\n\n                    values.push('\"' + Planche.DBUtil.escapeString(value) + '\"');\n                }\n                else {\n\n                    values.push('NULL');\n                }\n\n            });\n\n            tunnelings.push({\n                db     : db,\n                query  : api.getQuery('INSERT_TABLE', db, table, fields.join(\", \"), values.join(\", \")),\n                success: function(config) {\n\n                    messages.push(app.generateSuccessMsg(config.query, 'Records was successfully added'));\n                },\n                failure: function(config, response) {\n\n                    messages.push(app.generateError(config.query, response.message));\n                }\n            });\n        });\n\n        Ext.Array.each(store.getUpdatedRecords(), function(record) {\n\n            var where = [],\n                changes = [];\n            Ext.Object.each(record.raw, function(key, value) {\n\n                if(value === null){\n\n                    where.push(key + ' IS NULL');\n                }\n                else {\n\n                    where.push(key + '=\"' + Planche.DBUtil.escapeString(value) + '\"');\n                }\n\n                if (record.data[key] != value) {\n\n                    changes.push(key + '=\"' + Planche.DBUtil.escapeString(record.data[key]) + '\"');\n                }\n            });\n\n            tunnelings.push({\n                db     : db,\n                query  : api.getQuery('UPDATE_TABLE', db, table, changes.join(\", \"), where.join(' AND ')),\n                success: function(config) {\n\n                    messages.push(app.generateSuccessMsg(config.query, 'Records was successfully updated'));\n                },\n                failure: function(config, response) {\n\n                    messages.push(app.generateError(config.query, response.message));\n                }\n            });\n        });\n\n        if (tunnelings.length == 0) {\n\n            Ext.Msg.alert('info', 'There\\'s no changes');\n            return;\n        }\n\n        app.tunnelings(tunnelings, {\n            start  : function() {\n\n                app.setLoading(true);\n            },\n            success: function() {\n\n                //app.setLoading(false);\n                //store.sync();\n\n                me.loadGridRecord('', db);\n            },\n            failure: function() {\n\n                app.openMessage(messages);\n                app.setLoading(false);\n            }\n        });\n    },\n\n    delRecord: function(db, table) {\n\n        var me = this,\n            app = me.getApplication(),\n            api = app.getAPIS(),\n            grid = this.grid,\n            store = grid.store,\n            selModel = grid.getSelectionModel(),\n            selection = selModel.getSelection();\n\n        if (selection.length == 0) {\n\n            Ext.Msg.alert('info', 'Please, select one more rows to delete');\n            return;\n        }\n\n        var tunnelings = [],\n            messages = [];\n        Ext.Array.each(selection, function(record) {\n\n            var where = [];\n            Ext.Object.each(record.raw, function(key, value) {\n\n                if(value === null){\n\n                    where.push(key + ' IS NULL');\n                }\n                else {\n\n                    where.push(key + '=\"' + Planche.DBUtil.escapeString(value) + '\"');\n                }\n            });\n\n            tunnelings.push({\n                db     : db,\n                query  : api.getQuery('DELETE_TABLE', db, table, where.join(' AND ')),\n                success: function(config) {\n\n                    messages.push(app.generateSuccessMsg(config.query, 'Records was successfully removed'));\n                },\n                failure: function(config, response) {\n\n                    messages.push(app.generateError(config.query, response.message));\n                }\n            });\n        });\n\n        app.tunnelings(tunnelings, {\n            start  : function() {\n\n                app.setLoading(true);\n            },\n            success: function() {\n\n                app.setLoading(false);\n                store.remove(selection);\n                //store.sync();\n\n                me.loadGridRecord('', db, function(){\n\n                    app.setLoading(false);\n                });\n            },\n\n            failure: function() {\n\n                app.openMessage(messages);\n                app.setLoading(false);\n            }\n        });\n    }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/controller/layout/ResultTabPanel.js\n// module id = 82\n// module chunks = 0","Ext.define('Planche.controller.layout.QueryEditor', {\n    extend: 'Ext.app.Controller',\n    init : function () {\n\n    \tthis.control({\n    \t\t'query-editor' : {\n\t\t\t\tboxready : function (editor, width, height) {\n\n\t\t            textarea = editor.getEl().query('textarea')[0];\n\n\t\t            Ext.apply(editor, {\n\t\t            \teditor : CodeMirror.fromTextArea(textarea, {\n\t\t                    mode: 'text/x-mysql',\n\t\t                    indentWithTabs: true,\n\t\t                    smartIndent: true,\n\t\t                    lineNumbers: true,\n\t\t                    matchBrackets : true,\n\t\t                    autofocus: true\n\t\t                }),\n\t\t            \tgetEditor : function () {\n\n\t\t            \t\treturn this.editor;\n\t\t            \t}\n\t\t            });\n\t\t\t\t},\n\t\t\t\tresize : function (editor, width, height) {\n\n\t\t\t\t\teditor.getEditor().setSize(width, height);\n\t\t\t\t}\n    \t\t}\n    \t})\n    }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/controller/layout/QueryEditor.js\n// module id = 83\n// module chunks = 0","Ext.define('Planche.controller.layout.QueryTabPanel', {\n    extend: 'Ext.app.Controller',\n    controllers : [\n        'Planche.controller.layout.QueryTab'\n    ],\n    views : [\n        'Planche.view.layout.QueryTab'\n    ],\n    init : function () {\n\n        this.control({\n            'query-tab-panel' : {\n                'initQueryTab' : this.initQueryTab\n            }\n        });\n    },\n\n    initQueryTab : function (name, closable) {\n\n        var\n        app      = this.getApplication(),\n        tabPanel = app.getQueryTabPanel(),\n        closable = closable !== false,\n        tab      = Ext.create('Planche.view.layout.QueryTab', {\n            title    : name,\n            closable : closable\n        });\n\n        if(!tabPanel) { return; }\n\n        tabPanel.add(tab);\n        tabPanel.setActiveTab(tab);\n    }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/controller/layout/QueryTabPanel.js\n// module id = 84\n// module chunks = 0","Ext.define('Planche.controller.layout.SchemaTreeContextMenu', {\n    extend: 'Ext.app.Controller',\n    init  : function() {\n\n        this.control({\n            'schema-tree': {\n                'itemcontextmenu': this.initContextMenu\n            }\n        });\n    },\n\n    initContextMenu: function(view, node, item, index, e, eOpts) {\n\n        //서버트리의 이벤트를 잡아 내서 node위에서 right click을 했을 경우만 \n        //context메뉴를 보여준다.\n        e.preventDefault();\n\n        var app = this.getApplication(),\n            menu = app.getSchemaContextMenu(),\n            type = node.raw.type,\n            func = 'load' + type.charAt(0).toUpperCase() + type.slice(1) + 'ContextMenu';\n\n        if (!this[func]) {\n\n            return;\n        }\n\n        menu.removeAll();\n        menu.add(this[func]());\n        menu.showAt(e.getXY());\n    },\n\n    loadRootContextMenu: function() {\n\n        var app = this.getApplication();\n\n        return [\n            {\n                text   : 'Create Database',\n                handler: function() {\n\n                    app.createDatabase();\n                }\n            },\n            {\n                text   : 'Refresh All',\n                handler: function() {\n\n                    app.reloadTree();\n                }\n            }\n        ];\n    },\n\n    loadDatabaseContextMenu: function() {\n\n        var app = this.getApplication();\n\n        return [\n            {\n                text   : 'Refresh Databases',\n                scope  : app,\n                handler: function(){\n\n                    app.reloadTree();\n                }\n            },\n            {\n                text   : 'Create Database',\n                handler: function(){\n\n                    app.createDatabase();\n                }\n            }, {\n                text   : 'Alter Database',\n                handler: function() {\n\n                    var db = app.getSelectedDatabase();\n                    app.alterDatabase(db);\n                }\n            },\n            {\n                text   : 'Drop Database',\n                handler: function() {\n\n                    var db = app.getSelectedDatabase();\n                    app.dropDatabase(db, function() {\n\n                        var node = app.getSelectedTable(true);\n                        app.getSelectedTree().getSelectionModel().select(node.parentNode);\n                        node.remove();\n                    });\n                }\n            }, {\n                text   : 'Truncate Database',\n                handler: function() {\n\n                    var db = app.getSelectedDatabase();\n                    app.truncateDatabase(db, function() {\n\n                        var node = app.getSelectedTable(true);\n                        Ext.Array.each(node.childNodes, function(childNode, idx) {\n\n                            childNode.removeAll();\n                        });\n                    });\n                }\n            }\n\n            //,{\n            //    text   : 'Empty Database',\n            //    handler: function() {\n            //\n            //        var db = app.getSelectedDatabase();\n            //        app.emptyDatabase(db);\n            //    }\n            //}\n        ];\n    },\n\n    loadTablesContextMenu: function() {\n\n        var app = this.getApplication();\n\n        return [{\n            text   : 'Refresh Tables',\n            scope  : app,\n            handler: function() {\n\n                app.reloadTree();\n            }\n        }, {\n            text   : 'Create Table',\n            scope  : app,\n            handler: function() {\n\n                var db = app.getSelectedDatabase();\n                app.openCreateTableWindow(db);\n            }\n        }, {\n            text   : 'Copy Table(s) To Differnt Host/Database',\n            handler: function() {\n\n                app.openCopyDatabaseWindow();\n            }\n        }];\n    },\n\n    loadTableContextMenu: function() {\n\n        var app = this.getApplication();\n\n        return [{\n            text     : 'Paste SQL Statement',\n            defaults : {\n                scope: this\n            },\n            listeners: {\n                scope   : this,\n                activate: function(menu) {\n\n                    var subTab = app.getActiveQueryTab();\n                    Ext.Object.each(menu.menu.items.items, function(idx, obj) {\n                        obj[subTab ? 'enable' : 'disable']();\n                    });\n                }\n            },\n            menu     : [{\n                text   : 'INSERT INTO &lt;Table Name&gt;..',\n                handler: function() {\n\n                    var db = app.getSelectedDatabase(),\n                        table = app.getSelectedTable();\n\n                    app.pasteSQLStatement(db, table, 'insert');\n                }\n            }, {\n                text   : 'UPDATE &lt;Table Name&gt; SET..',\n                handler: function() {\n\n                    var db = app.getSelectedDatabase(),\n                        table = app.getSelectedTable();\n\n                    app.pasteSQLStatement(db, table, 'update');\n                }\n            }, {\n                text   : 'DELETE FROM &lt;Table Name&gt;..',\n                handler: function() {\n\n                    var db = app.getSelectedDatabase(),\n                        table = app.getSelectedTable();\n\n                    app.pasteSQLStatement(db, table, 'delete');\n                }\n            }, {\n                text   : 'SELECT &lt;col-1&gt;..&lt;col-n&gt; FROM &lt;Table Name&gt;',\n                handler: function() {\n\n                    var db = app.getSelectedDatabase(),\n                        table = app.getSelectedTable();\n\n                    app.pasteSQLStatement(db, table, 'select');\n                }\n            }, {\n                text   : 'INSERT ... ON DUPLICATE KEY UPDATE',\n                handler: function() {\n\n                    var db = app.getSelectedDatabase(),\n                        table = app.getSelectedTable();\n\n                    app.pasteSQLStatement(db, table, 'duplicate_update');\n                }\n            }]\n        }, {\n            text   : 'Copy Table(s) To Differnt Host/Database',\n            handler: function() {\n\n                app.openCopyDatabaseWindow();\n            }\n        }, {\n            xtype: 'menuseparator'\n        }, {\n            text   : 'Open Table',\n            handler: function() {\n\n                var db = app.getSelectedDatabase(),\n                    table = app.getSelectedNode();\n\n                app.openTable(db, table);\n            }\n        }, {\n            text   : 'Count Table',\n            handler: function() {\n\n                var db = app.getSelectedDatabase(),\n                    table = app.getSelectedNode();\n\n                app.countTable(db, table);\n            }\n        }, {\n            text   : 'Create Table',\n            handler: function() {\n\n                var db = app.getSelectedDatabase();\n                app.openCreateTableWindow(db);\n            }\n        }, {\n            text   : 'Alter Table',\n            handler: function() {\n\n                var db = app.getSelectedDatabase(),\n                    table = app.getSelectedTable();\n\n                app.openAlterTableWindow(db, table);\n            }\n        }, {\n            text: 'More Table Operations',\n            menu: [{\n                text   : 'Rename Table',\n                handler: function() {\n\n                    var db = app.getSelectedDatabase(),\n                        table = app.getSelectedTable();\n\n                    app.renameTable(db, table);\n                }\n            }, {\n                text   : 'Truncate Table',\n                handler: function() {\n\n                    var db = app.getSelectedDatabase(),\n                        table = app.getSelectedTable();\n\n                    app.truncateTable(db, table, function() {\n\n                        app.openTable(db, table);\n                    });\n                }\n            }, {\n                text   : 'Drop Table From Database',\n                handler: function() {\n\n                    var db = app.getSelectedDatabase(),\n                        table = app.getSelectedTable();\n\n                    app.dropTable(db, table);\n                }\n            }, {\n                text   : 'Reorder Column(s)',\n                handler: function() {\n\n                    var db = app.getSelectedDatabase(),\n                        table = app.getSelectedTable();\n\n                    app.openReorderColumns(db, table);\n                }\n            }, {\n                text   : 'Duplicate Table Structure/Data',\n                handler: function() {\n\n                    var db = app.getSelectedDatabase(),\n                        table = app.getSelectedTable();\n\n                    app.duplicateTable(db, table, function() {\n\n                        var node = app.getSelectedTable(true);\n                        app.getSelectedTree().getSelectionModel().select(node.parentNode);\n                        app.reloadTree();\n                    });\n                }\n            }, {\n                text   : 'Copy Table Structure/Data To Other Database',\n                handler: function() {\n\n                    var db = app.getSelectedDatabase(),\n                        table = app.getSelectedTable();\n\n                    app.duplicateTable(db, table, function() {\n\n                        var node = app.getSelectedTable(true);\n                        app.getSelectedTree().getSelectionModel().select(node.parentNode);\n                        app.reloadTree();\n                    });\n                }\n            }, {\n                text   : 'View Advanced Properties',\n                handler: function() {\n\n                    var db = app.getSelectedDatabase(),\n                        table = app.getSelectedTable();\n\n                    app.openAdvancedProperties(db, table);\n                }\n            }, {\n                text: 'Change Table To Type',\n                menu: [\n                    {\n                        text   : 'MYISAM',\n                        handler: function(btn) {\n\n                            app.changeTableToType(app.getSelectedDatabase(), app.getSelectedNode(), btn.text);\n                        }\n                    }, {\n\n                        text   : 'MRG_MYISAM',\n                        handler: function(btn) {\n                            app.changeTableToType(app.getSelectedDatabase(), app.getSelectedNode(), btn.text);\n                        }\n                    }, {\n                        text   : 'CSV',\n                        handler: function(btn) {\n                            app.changeTableToType(app.getSelectedDatabase(), app.getSelectedNode(), btn.text);\n                        }\n                    }, {\n                        text   : 'BLACKHOLE',\n                        handler: function(btn) {\n                            app.changeTableToType(app.getSelectedDatabase(), app.getSelectedNode(), btn.text);\n                        }\n                    }, {\n                        text   : 'MEMORY',\n                        handler: function(btn) {\n                            app.changeTableToType(app.getSelectedDatabase(), app.getSelectedNode(), btn.text);\n                        }\n                    }, {\n                        text   : 'FEDERATED',\n                        handler: function(btn) {\n                            app.changeTableToType(app.getSelectedDatabase(), app.getSelectedNode(), btn.text);\n                        }\n                    }, {\n\n                        text   : 'ARCHIVE',\n                        handler: function(btn) {\n                            app.changeTableToType(app.getSelectedDatabase(), app.getSelectedNode(), btn.text);\n                        }\n                    }, {\n                        text   : 'INNODB',\n                        handler: function(btn) {\n                            app.changeTableToType(app.getSelectedDatabase(), app.getSelectedNode(), btn.text);\n                        }\n                    }, {\n                        text   : 'PERFORMANCE_SCHEMA',\n                        handler: function(btn) {\n\n                            app.changeTableToType(app.getSelectedDatabase(), app.getSelectedNode(), btn.text);\n                        }\n                    }\n                ]\n            }]\n        }, {\n            xtype: 'menuseparator'\n        }, {\n            text   : 'Create Trigger',\n            handler: function(){\n\n                var db = app.getSelectedDatabase();\n                app.createTrigger(db);\n            }\n        }];\n    },\n\n    loadIndexesContextMenu: function() {\n\n        var app = this.getApplication();\n\n        return [{\n            text   : 'Create index',\n            scope  : app,\n            handler: function() {\n\n                var db = app.getSelectedDatabase(),\n                    table = app.getSelectedTable();\n\n                app.openCreateIndexWindow(db, table);\n            }\n        }, {\n            text   : 'Manage index',\n            scope  : app,\n            handler: function() {\n\n                var db = app.getSelectedDatabase(),\n                    table = app.getSelectedTable();\n\n                app.openAlterTableWindow(db, table, 'table-indexes-tab');\n            }\n        }];\n    },\n\n    loadViewsContextMenu: function() {\n\n        var app = this.getApplication();\n\n        return [{\n            text   : 'Refresh Views',\n            scope  : app,\n            handler: function(){\n\n                app.reloadTree();\n            }\n        }, {\n            text   : 'Create View',\n            handler: function(){\n\n                var db = app.getSelectedDatabase();\n                app.createView(db);\n            }\n        }];\n    },\n\n    loadViewContextMenu: function() {\n\n        var app = this.getApplication();\n\n        return [{\n            text   : 'Create View',\n            handler: function(){\n\n                var db = app.getSelectedDatabase();\n                app.createView(db);\n            }\n        }, {\n            text   : 'Alter View',\n            scope  : app,\n            handler: function() {\n\n                var db = app.getSelectedDatabase(),\n                    view = app.getSelectedNode();\n\n                app.alterView(db, view);\n            }\n        }, {\n            text   : 'Drop View',\n            scope  : app,\n            handler: function() {\n\n                var db = app.getSelectedDatabase(),\n                    view = app.getSelectedNode();\n                app.dropView(db, view, function(){\n\n                    var node = app.getSelectedNode(true);\n                    app.getSelectedTree().getSelectionModel().select(node.parentNode);\n                    node.remove();\n                });\n            }\n        }, {\n            text   : 'Open View',\n            scope  : app,\n            handler: function() {\n\n                var db = app.getSelectedDatabase(),\n                    table = app.getSelectedNode();\n\n                app.openTable(db, table);\n            }\n        }, {\n            text   : 'Rename View',\n            scope  : app,\n            handler: function() {\n\n                var db = app.getSelectedDatabase(),\n                    view = app.getSelectedNode();\n\n                app.renameView(db, view, function(){\n\n                    var node = app.getSelectedNode(true);\n                    app.getSelectedTree().getSelectionModel().select(node.parentNode);\n                    app.reloadTree();\n                });\n            }\n        }, {\n            text   : 'Export View',\n            scope  : app,\n            handler: function() {\n\n            }\n        }];\n    },\n\n    loadEventsContextMenu: function() {\n\n        var app = this.getApplication();\n\n        return [{\n            text   : 'Refresh Events',\n            scope  : app,\n            handler: function(){\n\n                app.reloadTree();\n            }\n        }, {\n            text   : 'Create Event',\n            handler: function() {\n\n                var db = app.getSelectedDatabase();\n                app.createEvent(db);\n            }\n        }];\n    },\n\n    loadEventContextMenu: function() {\n\n        var app = this.getApplication();\n\n        return [{\n            text   : 'Create Event',\n            handler: function() {\n\n                var db = app.getSelectedDatabase();\n                app.createEvent(db);\n            }\n        }, {\n            text   : 'Alter Event',\n            scope  : app,\n            handler: function() {\n\n                var db = app.getSelectedDatabase(),\n                    event = app.getSelectedNode();\n\n                app.alterEvent(db, event);\n            }\n        }, {\n            text   : 'Drop Event',\n            scope  : app,\n            handler: function() {\n\n                var db = app.getSelectedDatabase(),\n                    event = app.getSelectedNode();\n\n                app.dropEvent(db, event, function(){\n\n                    var node = app.getSelectedNode(true);\n                    app.getSelectedTree().getSelectionModel().select(node.parentNode);\n                    node.remove();\n                });\n            }\n        }, {\n            text   : 'Rename Event',\n            scope  : app,\n            handler: function() {\n\n                var db = app.getSelectedDatabase(),\n                    event = app.getSelectedNode();\n\n                app.renameEvent(db, event, function(){\n\n                    var node = app.getSelectedNode(true);\n                    app.getSelectedTree().getSelectionModel().select(node.parentNode);\n                    app.reloadTree();\n                });\n            }\n        }];\n    },\n\n    loadTriggersContextMenu: function() {\n\n        var app = this.getApplication();\n\n        return [{\n            text   : 'Refresh Triggers',\n            handler: function(){\n\n                app.reloadTree();\n            }\n        }, {\n            text   : 'Create Trigger',\n            handler: function(){\n\n                var db = app.getSelectedDatabase();\n                app.createTrigger(db);\n            }\n        }];\n    },\n\n    loadTriggerContextMenu: function() {\n\n        var app = this.getApplication();\n\n        return [{\n            text   : 'Create Trigger',\n            scope  : app,\n            handler: function(){\n\n                var db = app.getSelectedDatabase();\n                app.createTrigger(db);\n            }\n        }, {\n            text   : 'Alter Trigger',\n            scope  : app,\n            handler: function() {\n\n                var db = app.getSelectedDatabase(),\n                    trigger = app.getSelectedNode();\n\n                app.alterTrigger(db, trigger.match(/.+?\\b/)[0]);\n            }\n        }, {\n            text   : 'Drop Trigger',\n            scope  : app,\n            handler: function() {\n\n                var db = app.getSelectedDatabase(),\n                    trigger = app.getSelectedNode();\n\n                app.dropTrigger(db, trigger, function(){\n\n                    var node = app.getSelectedNode(true);\n                    app.getSelectedTree().getSelectionModel().select(node.parentNode);\n                    node.remove();\n                });\n            }\n        }, {\n            text   : 'Rename Trigger',\n            scope  : app,\n            handler: function() {\n\n                var db = app.getSelectedDatabase(),\n                    trigger = app.getSelectedNode();\n                app.renameTrigger(db, trigger, function(){\n\n                    var node = app.getSelectedNode(true);\n                    app.getSelectedTree().getSelectionModel().select(node.parentNode);\n                    app.reloadTree();\n                });\n            }\n        }];\n    },\n\n    loadFunctionsContextMenu: function() {\n\n        var app = this.getApplication();\n\n        return [{\n            text   : 'Refresh Functions',\n            scope  : app,\n            handler: function(){\n\n                app.reloadTree();\n            }\n        }, {\n            text   : 'Create Function',\n            handler: function(){\n\n                var db = app.getSelectedDatabase();\n                app.createFunction(db);\n            }\n        }];\n    },\n\n    loadFunctionContextMenu: function() {\n\n        var app = this.getApplication();\n\n        return [{\n            text   : 'Create Function',\n            scope  : app,\n            handler: function(){\n\n                var db = app.getSelectedDatabase();\n                app.createFunction(db);\n            }\n        }, {\n            text   : 'Alter Function',\n            scope  : app,\n            handler: function() {\n\n                var db = app.getSelectedDatabase(),\n                    func = app.getSelectedNode();\n\n                app.alterFunction(db, func);\n            }\n        }, {\n            text   : 'Drop Function',\n            scope  : app,\n            handler: function() {\n\n                var db = app.getSelectedDatabase(),\n                    func = app.getSelectedNode();\n\n                app.dropFunction(db, func, function(){\n\n                    var node = app.getSelectedNode(true);\n                    app.getSelectedTree().getSelectionModel().select(node.parentNode);\n                    node.remove();\n                });\n            }\n        }];\n    },\n\n    loadProceduresContextMenu: function() {\n\n        var app = this.getApplication();\n\n        return [{\n            text   : 'Refresh Procedures',\n            scope  : app,\n            handler: function(){\n\n                app.reloadTree();\n            }\n        }, {\n            text   : 'Create Procedure',\n            handler: function(){\n\n                var db = app.getSelectedDatabase();\n                app.createProcedure(db);\n            }\n        }];\n    },\n\n    loadProcedureContextMenu: function() {\n\n        var app = this.getApplication();\n\n        return [{\n            text   : 'Create Procedure',\n            handler: function(){\n\n                var db = app.getSelectedDatabase();\n                app.createProcedure(db);\n            }\n        }, {\n            text   : 'Alter Procedure',\n            handler: function() {\n\n                var db = app.getSelectedDatabase(),\n                    procedure = app.getSelectedNode();\n\n                app.alterProcedure(db, procedure);\n            }\n        }, {\n            text   : 'Drop Procedure',\n            handler: function() {\n\n                var db = app.getSelectedDatabase(),\n                    procedure = app.getSelectedNode();\n\n                app.dropProcedure(db, procedure, function(){\n\n                    var node = app.getSelectedNode(true);\n                    app.getSelectedTree().getSelectionModel().select(node.parentNode);\n                    node.remove();\n                });\n            }\n        }];\n    }\n\n});\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/controller/layout/SchemaTreeContextMenu.js\n// module id = 85\n// module chunks = 0","Ext.define('Planche.controller.query.Token', {\r\n    extend: 'Ext.app.Controller',\r\n    initWindow : function (tokens) {\r\n\r\n        this.tokens = tokens;\r\n\r\n        Ext.create('Planche.lib.Window', {\r\n            id : 'window-'+this.id,\r\n            stateful: true,\r\n            title : 'Show Tokens',\r\n            layout : 'fit',\r\n            bodyStyle:\"background-color:#FFFFFF\",\r\n            width : 900,\r\n            height: 500,\r\n            overflowY: 'auto',\r\n            autoScroll : true,\r\n            modal : true,\r\n            plain: true,\r\n            fixed : true,\r\n            shadow : false,\r\n            autoShow : true,\r\n            constrain : true,\r\n            items : this.initGrid(),\r\n            buttons : [{\r\n                text : 'Close',\r\n                scope : this,\r\n                handler : function (btn, e) {\r\n                    \r\n                    var win = btn.up('window');\r\n                    win.destroy();\r\n                }\r\n            }]\r\n        });\r\n    },\r\n\r\n    initGrid : function () {\r\n\r\n        var columns = this.makeListColumns();\r\n\r\n        var fields = [];\r\n        Ext.each(columns, function (obj) {\r\n\r\n            if(obj.xtype == 'rownumberer'){\r\n\r\n                return;\r\n            }\r\n\r\n            fields.push(obj.dataIndex);\r\n        });\r\n\r\n        this.grid = Ext.create('Ext.grid.Panel', {\r\n            border : false,\r\n            columnLines: true,\r\n            width : '100%',\r\n            flex  : 1,\r\n            columns : columns,\r\n            store: Ext.create('Ext.data.Store', {\r\n                fields: fields,\r\n                data : this.makeData()\r\n            })\r\n        });\r\n\r\n        return this.grid;\r\n    },\r\n\r\n    makeData : function () {\r\n\r\n        var type = [];\r\n        Ext.Object.each(Planche.lib.QueryTokenType.get(), function (idx, val) {\r\n\r\n            type[val] = idx;\r\n        });\r\n\r\n        var data = [];\r\n        Ext.Array.each(this.tokens, function (token, idx) {\r\n\r\n            data.push({type : type[token.type], token : token.value });\r\n        });\r\n\r\n        return data;\r\n    },\r\n\r\n    makeRecords : function (fields, records) {\r\n\r\n        var tmp = [];\r\n        Ext.Array.each(records, function (row, ridx) {\r\n\r\n            var record = {};\r\n            Ext.Array.each(fields, function (col, cidx) {\r\n\r\n                record[col.name] = row[cidx];\r\n            });\r\n            tmp.push(record);\r\n        });\r\n\r\n        return tmp;\r\n    },\r\n\r\n    makeListColumns : function () {   \r\n        \r\n        return [\r\n            { xtype: 'rownumberer', width : 40},\r\n            { text: 'Token Type', dataIndex: 'type', width : 100},\r\n            { text: 'Token', dataIndex: 'token', flex : 1}\r\n        ];\r\n    }\r\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/controller/query/Token.js\n// module id = 86\n// module chunks = 0","Ext.define('Planche.controller.database.DownloadToCSV', {\r\n    extend: 'Ext.app.Controller',\r\n    views : [\r\n        'Planche.view.database.DownloadToCSV'\r\n    ],\r\n    init  : function() {\r\n\r\n        this.control({\r\n            '#download-to-csv-window'    : {\r\n                boxready: this.loadTables\r\n            },\r\n            '#download-to-csv-btn-export': {\r\n                click: this.exportCSV\r\n            },\r\n            '#download-to-csv-btn-close' : {\r\n                click: this.close\r\n            }\r\n        });\r\n\r\n        this.callParent(arguments);\r\n    },\r\n\r\n    loadTables: function() {\r\n\r\n        var app = this.getApplication(),\r\n            api = app.getAPIS(),\r\n            db = app.getSelectedDatabase();\r\n\r\n        app.tunneling({\r\n            db     : db,\r\n            query  : api.getQuery('SHOW_ALL_TABLE_STATUS', db),\r\n            success: function(config, response) {\r\n\r\n                var grid = Ext.getCmp('download-to-csv-target-list'),\r\n                    data = Planche.DBUtil.getAssocArray(response.fields, response.records);\r\n\r\n                grid.store.loadData(data);\r\n\r\n            },\r\n            failure: function(config, response) {\r\n\r\n                app.openMessage(app.generateQueryErrorMsg(config.query, response.message));\r\n            }\r\n        });\r\n    },\r\n\r\n    initWindow: function() {\r\n\r\n        var app = this.getApplication();\r\n\r\n        Ext.create('Planche.view.database.DownloadToCSV', {\r\n            database   : app.getSelectedDatabase(),\r\n            application: app\r\n        });\r\n    },\r\n\r\n    exportCSV: function(btn) {\r\n\r\n        // Define the string\r\n        var app = this.getApplication(),\r\n            api = app.getAPIS(),\r\n            tab = app.getActiveConnectTab(),\r\n            db = app.getSelectedDatabase(),\r\n            grid = Ext.getCmp('download-to-csv-target-list'),\r\n            selection = grid.selModel.getSelection(),\r\n            params = {\r\n                type   : 'export',\r\n                host   : tab.getHost(),\r\n                user   : tab.getUser(),\r\n                pass   : tab.getPass(),\r\n                charset: tab.getCharset(),\r\n                port   : tab.getPort(),\r\n                db     : db,\r\n                query  : []\r\n            },\r\n            tunnelingURL = tab.getTunnelingURL();\r\n\r\n        if (selection.length == 0) {\r\n\r\n            Ext.Msg.alert('Info', 'Please, select to export table(s)');\r\n            return;\r\n        }\r\n\r\n        selection.map(function(table, idx) {\r\n\r\n            params.query = api.getQuery('SELECT_TABLE', db, table.raw.Name, '*', '');\r\n            params.csv = table.raw.Name;\r\n\r\n            var cmd = Planche.Base64.encode(Ext.JSON.encode(params)),\r\n                url = tunnelingURL + \"?cmd=\" + cmd,\r\n                iframeId = 'download-iframe-' + table.raw.Name,\r\n                iframe = Ext.query('#' + iframeId);\r\n\r\n            if (iframe.length === 0) {\r\n\r\n                var winEl = btn.up('window').getEl();\r\n                Ext.DomHelper.append(winEl, {\r\n                    tag   : 'iframe',\r\n                    id    : iframeId,\r\n                    src   : url,\r\n                    style : 'display:none'\r\n                });\r\n            }\r\n            else {\r\n\r\n                iframe[0].setAttribute('src', url);\r\n            }\r\n        });\r\n    },\r\n\r\n    close: function(btn) {\r\n\r\n        btn.up('window').destroy();\r\n    }\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/controller/database/DownloadToCSV.js\n// module id = 87\n// module chunks = 0","Ext.define('Planche.controller.database.SchemaToHTML', {\r\n    extend: 'Ext.app.Controller',\r\n    views : [\r\n        'Planche.view.database.SchemaToHTML'\r\n    ],\r\n    init  : function() {\r\n\r\n        var app = this.getApplication();\r\n\r\n        this.control({\r\n            '#schema-to-html-window': {\r\n                boxready: function(win){\r\n\r\n                    win.maximize();\r\n                }\r\n            },\r\n            '#schema-to-html': {\r\n                boxready: function(panel){\r\n\r\n                    var db = app.getSelectedDatabase();\r\n                    Planche.SchemaUtil.exportAllSchemaToHTML(db, panel, 'update');\r\n                }\r\n            },\r\n            '#schema-to-html-btn-close' : {\r\n                click : this.close\r\n            }\r\n        });\r\n\r\n        this.callParent(arguments);\r\n    },\r\n\r\n    initWindow: function() {\r\n\r\n        var app = this.getApplication();\r\n\r\n        Ext.create('Planche.view.database.SchemaToHTML', {\r\n            database   : app.getSelectedDatabase(),\r\n            application: app\r\n        });\r\n    },\r\n\r\n    close : function(btn){\r\n\r\n        btn.up('window').destroy();\r\n    }\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/controller/database/SchemaToHTML.js\n// module id = 88\n// module chunks = 0","Ext.define('Planche.controller.database.CreateDatabase', {\r\n    extend    : 'Ext.app.Controller',\r\n    initWindow: function(db) {\r\n\r\n        this.isAlter = db ? true : false;\r\n        this.loadData(db);\r\n    },\r\n\r\n    loadData: function(db) {\r\n\r\n        var app = this.getApplication(),\r\n            me = this,\r\n            queries = [\r\n                {key: 'collation', str: app.getAPIS().getQuery('SHOW_COLLATION')},\r\n                {key: 'charset', str: app.getAPIS().getQuery('SHOW_CHARSET')},\r\n                {key: 'collation_val', str: app.getAPIS().getQuery('COLLATION_DATABASE')},\r\n                {key: 'charset_val', str: app.getAPIS().getQuery('CHARSET_DATABASE')}\r\n            ],\r\n            tunneling,\r\n            messages = [];\r\n\r\n        app.setLoading(true);\r\n\r\n        me.comboData = {};\r\n        me.comboValue = {};\r\n\r\n        (tunneling = Ext.Function.bind(function() {\r\n\r\n            var query = queries.shift();\r\n\r\n            if (query) {\r\n\r\n                app.tunneling({\r\n                    db     : db,\r\n                    query  : query.str,\r\n                    success: function(config, response) {\r\n\r\n                        if (query.key == 'collation' || query.key == 'charset') {\r\n\r\n                            var tmp = [];\r\n                            Ext.Array.each(response.records, function(row, idx) {\r\n\r\n                                tmp.push({\r\n                                    id  : row[0],\r\n                                    text: row[0]\r\n                                });\r\n                            });\r\n\r\n                            me.comboData[query.key] = tmp;\r\n                        }\r\n                        else {\r\n\r\n                            me.comboValue[query.key] = response.records[0][1];\r\n                        }\r\n\r\n                        tunneling();\r\n                    },\r\n                    failure: function(config, response) {\r\n\r\n                        messages.push(app.generateErrorMessage(query.str, response.message));\r\n\r\n                        tunneling();\r\n                    }\r\n                })\r\n            }\r\n            else {\r\n\r\n                app.getActiveConnectTab().setLoading(false);\r\n\r\n                if (messages.length == 0) {\r\n\r\n                    this.initCreateWindow(db);\r\n                }\r\n                else {\r\n\r\n                    app.openMessage(messages);\r\n                }\r\n            }\r\n\r\n        }, me))();\r\n    },\r\n\r\n    initCreateWindow: function(db) {\r\n\r\n        Ext.create('Planche.lib.Window', {\r\n            stateful   : true,\r\n            title      : this.isAlter ? 'Alter database \\'' + db + '\\'' : 'Create new database',\r\n            layout     : 'vbox',\r\n            bodyStyle  : \"background-color:#FFFFFF\",\r\n            width      : 300,\r\n            height     : 200,\r\n            bodyPadding: '10px 10px 10px 10px',\r\n            overflowY  : 'auto',\r\n            autoScroll : true,\r\n            modal      : true,\r\n            plain      : true,\r\n            fixed      : true,\r\n            shadow     : false,\r\n            autoShow   : true,\r\n            constrain  : true,\r\n            items      : [\r\n                this.initDatabaseName(db),\r\n                this.initDatabaseCharSet(),\r\n                this.initDatabaseCollation()\r\n            ],\r\n            buttons    : [{\r\n                text   : this.isAlter ? 'Alter' : 'Create',\r\n                scope  : this,\r\n                handler: this.isAlter ? this.alter : this.create\r\n            }, {\r\n                text   : 'Cancel',\r\n                scope  : this,\r\n                handler: this.cancel\r\n            }]\r\n        });\r\n    },\r\n\r\n    initDatabaseName: function(database) {\r\n\r\n        return {\r\n            id        : 'database-name',\r\n            xtype     : 'textfield',\r\n            width     : '100%',\r\n            allowBlank: false,\r\n            emptyText : 'Enter new database name..',\r\n            disabled  : this.isAlter,\r\n            value     : this.isAlter ? database : ''\r\n        };\r\n    },\r\n\r\n    initDatabaseCollation: function() {\r\n\r\n        this.comboData.collation.unshift({\r\n            id: '', text: 'Database Collation'\r\n        });\r\n\r\n        this.comboCollation = this.initComboBox(\r\n            'database-collation',\r\n            this.comboData.collation,\r\n            this.comboValue.collation_val\r\n        );\r\n\r\n        return this.comboCollation;\r\n    },\r\n\r\n    initDatabaseCharSet: function() {\r\n\r\n        this.comboData.charset.unshift({\r\n            id: '', text: 'Database Charset'\r\n        });\r\n\r\n        this.comboCharset = this.initComboBox(\r\n            'database-charset',\r\n            this.comboData.charset,\r\n            this.comboValue.charset_val\r\n        );\r\n\r\n        return this.comboCharset;\r\n    },\r\n\r\n    initComboBox: function(id, data, value) {\r\n\r\n        var store = new Ext.data.Store({\r\n                fields: ['id', 'text'],\r\n                data  : data\r\n            }),\r\n\r\n            // Simple ComboBox using the data store\r\n            combo = Ext.create('Ext.form.ComboBox', {\r\n                width       : '100%',\r\n                id          : id,\r\n                emptyText   : 'default',\r\n                value       : value,\r\n                displayField: 'text',\r\n                queryMode   : 'local',\r\n                valueField  : 'id',\r\n                labelWidth  : 80,\r\n                editable    : true,\r\n                store       : store,\r\n                typeAhead   : true,\r\n                anyMatch    : true\r\n            });\r\n\r\n        return combo;\r\n    },\r\n\r\n    create: function(btn) {\r\n\r\n        var textfield = btn.up('window').down('textfield'),\r\n            db = textfield.getValue(),\r\n            app = this.getApplication(),\r\n            node = app.getSelectedNode(true),\r\n            collation = Ext.getCmp('database-collation').getValue(),\r\n            charset = Ext.getCmp('database-charset').getValue();\r\n\r\n        if (!db) {\r\n\r\n            textfield.validate();\r\n            return;\r\n        }\r\n\r\n        app.tunneling({\r\n            query  : app.getAPIS().getQuery('CREATE_DATABASE', db, charset, collation),\r\n            success: function(config, response) {\r\n\r\n                var tree = app.getSelectedTree(),\r\n                    rootNode = tree.getRootNode();\r\n\r\n                app.reloadTree(rootNode);\r\n\r\n                btn.up('window').destroy();\r\n\r\n                app.fireEvent('after_create_database');\r\n            },\r\n            failure: function(config, response) {\r\n\r\n                Ext.Msg.alert('Error', response.message);\r\n            }\r\n        });\r\n    },\r\n\r\n    alter: function(btn) {\r\n\r\n        var app = this.getApplication(),\r\n            node = app.getSelectedNode(true),\r\n            db = app.getParentNode(node),\r\n            collation = Ext.getCmp('database-collation').getValue(),\r\n            charset = Ext.getCmp('database-charset').getValue();\r\n\r\n        app.tunneling({\r\n            db     : db,\r\n            query  : app.getAPIS().getQuery('ALTER_DATABASE', db, charset, collation),\r\n            success: function(config, response) {\r\n\r\n                var tree = app.getSelectedTree(),\r\n                    rootNode = tree.getRootNode();\r\n\r\n                app.reloadTree(rootNode);\r\n\r\n                btn.up('window').destroy();\r\n\r\n                app.fireEvent('after_alter_database');\r\n            },\r\n            failure: function(config, response) {\r\n\r\n                Ext.Msg.alert('Error', response.message);\r\n            }\r\n        });\r\n    },\r\n\r\n    cancel: function(btn) {\r\n\r\n        btn.up('window').destroy();\r\n    }\r\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/controller/database/CreateDatabase.js\n// module id = 89\n// module chunks = 0","Ext.define('Planche.controller.connection.NewConnect', {\r\n    extend    : 'Ext.app.Controller',\r\n    mode      : 'add',\r\n    initWindow: function(connInfo) {\r\n\r\n        Ext.create('Planche.lib.Window', {\r\n            id        : 'new-conn-window',\r\n            stateful  : true,\r\n            title     : 'Add New Connection',\r\n            layout    : 'fit',\r\n            bodyStyle : \"background-color:#FFFFFF\",\r\n            width     : 500,\r\n            height    : 400,\r\n            overflowY : 'auto',\r\n            autoScroll: true,\r\n            modal     : true,\r\n            plain     : true,\r\n            fixed     : true,\r\n            shadow    : false,\r\n            autoShow  : true,\r\n            constrain : true,\r\n            items     : {\r\n                xtype   : 'form',\r\n                id      : 'new-conn-form',\r\n                layout  : 'vbox',\r\n                width   : '100%',\r\n                height  : '100%',\r\n                padding : '5 5 5 5',\r\n                border  : false,\r\n                defaults: {\r\n                    labelWidth: 100,\r\n                    width     : '100%',\r\n                    anchor    : '100%',\r\n                    xtype     : 'textfield',\r\n                    labelPad  : 5\r\n                },\r\n                items   : [{\r\n                    xtype     : 'hiddenfield',\r\n                    id        : 'new-conn-into',\r\n                    name      : 'new-conn-into',\r\n                    value     : 'localstorage',\r\n                    allowBlank: false\r\n                }, {\r\n                    xtype     : 'hiddenfield',\r\n                    id        : 'new-conn-index',\r\n                    name      : 'new-conn-index',\r\n                    value     : 0,\r\n                    allowBlank: false\r\n                }, {\r\n                    xtype     : 'textfield',\r\n                    fieldLabel: 'Host Name',\r\n                    id        : 'new-conn-hostName',\r\n                    name      : 'new-conn-hostName',\r\n                    emptyText : 'New Connection Host Name',\r\n                    allowBlank: false\r\n                }, {\r\n                    xtype     : 'textfield',\r\n                    fieldLabel: 'Tunneling URL',\r\n                    emptyText : 'http://localhost:8888/',\r\n                    id        : 'new-conn-tunnelingURL',\r\n                    name      : 'new-conn-tunnelingURL',\r\n                    allowBlank: false\r\n                }, {\r\n                    xtype      : 'radiogroup',\r\n                    fieldLabel : 'Request Type',\r\n                    defaultType: 'radiofield',\r\n                    id         : 'new-conn-requestType',\r\n                    padding    : '0px 10px 5px 0px',\r\n                    layout     : 'hbox',\r\n                    items      : [\r\n                        {\r\n                            boxLabel  : 'JSONP',\r\n                            name      : 'new-conn-requestType',\r\n                            inputValue: 'jsonp',\r\n                            margin    : '0px 10px 0px 0px',\r\n                            checked   : true\r\n                        }, {\r\n                            boxLabel  : 'AJAX',\r\n                            name      : 'new-conn-requestType',\r\n                            inputValue: 'ajax'\r\n                        }\r\n                    ]\r\n                }, {\r\n                    xtype     : 'textfield',\r\n                    fieldLabel: 'Host',\r\n                    id        : 'new-conn-host',\r\n                    name      : 'new-conn-host',\r\n                    emptyText : 'localhost',\r\n                    allowBlank: false\r\n                }, {\r\n                    xtype     : 'textfield',\r\n                    fieldLabel: 'User',\r\n                    id        : 'new-conn-user',\r\n                    name      : 'new-conn-user',\r\n                    allowBlank: false\r\n                }, {\r\n                    xtype     : 'textfield',\r\n                    fieldLabel: 'Password',\r\n                    inputType : 'password',\r\n                    id        : 'new-conn-pass',\r\n                    name      : 'new-conn-pass',\r\n                    allowBlank: false\r\n                }, {\r\n                    xtype     : 'textfield',\r\n                    fieldLabel: 'Charset',\r\n                    id        : 'new-conn-charset',\r\n                    name      : 'new-conn-charset',\r\n                    value     : 'utf8',\r\n                    allowBlank: false\r\n                }, {\r\n                    xtype     : 'textfield',\r\n                    fieldLabel: 'Port',\r\n                    id        : 'new-conn-port',\r\n                    name      : 'new-conn-port',\r\n                    value     : 3306,\r\n                    allowBlank: false\r\n                }, {\r\n                    xtype      : 'radiogroup',\r\n                    fieldLabel : 'DBMS',\r\n                    defaultType: 'radiofield',\r\n                    id         : 'new-conn-dbms',\r\n                    padding    : '0px 10px 5px 0px',\r\n                    layout     : 'hbox',\r\n                    items      : [\r\n                        {\r\n                            boxLabel  : 'MySQL',\r\n                            name      : 'new-conn-dbms',\r\n                            inputValue: 'mysql',\r\n                            checked   : true,\r\n                            margin    : '0px 10px 0px 0px'\r\n                        }\r\n                    ]\r\n                }, {\r\n                    xtype      : 'radiogroup',\r\n                    fieldLabel : 'Auto Connection',\r\n                    defaultType: 'radiofield',\r\n                    id         : 'new-conn-autoConnection',\r\n                    padding    : '0px 10px 5px 0px',\r\n                    layout     : 'hbox',\r\n                    items      : [\r\n                        {\r\n                            boxLabel  : 'Yes',\r\n                            name      : 'new-conn-autoConnection',\r\n                            inputValue: true,\r\n                            margin    : '0px 10px 0px 0px'\r\n                        }, {\r\n                            boxLabel  : 'No',\r\n                            name      : 'new-conn-autoConnection',\r\n                            inputValue: false,\r\n                            checked   : true\r\n                        }\r\n                    ]\r\n                }]\r\n            },\r\n            buttons   : [{\r\n                text   : 'Add New Connection',\r\n                id     : 'add-new-conn-btn',\r\n                scope  : this,\r\n                handler: this.save\r\n            }, {\r\n                text   : 'Cancel',\r\n                scope  : this,\r\n                handler: this.cancel\r\n            }],\r\n            listeners : {\r\n                scope   : this,\r\n                boxready: function() {\r\n\r\n                    if (!connInfo) {\r\n\n                        this.mode = 'add';\r\n                        return;\r\n                    }\r\n\r\n                    this.mode = 'edit';\r\n\r\n                    var title = 'Save connection into local storage';\r\n                    if (connInfo.raw.into == 'hostfile') {\r\n\r\n                        title = 'Add new connection into local storage';\r\n                        this.mode = 'add';\r\n                    }\r\n\r\n                    Ext.getCmp('add-new-conn-btn').setText(title);\r\n\r\n                    var values = {},\r\n                        form   = this.getForm();\r\n\r\n                    Ext.Object.each(connInfo.raw, function(key, val) {\r\n\r\n                        values['new-conn-' + key] = val;\r\n                    });\r\n\r\n                    form.setValues(values);\r\n                }\r\n            }\r\n        });\r\n    },\r\n\r\n    getForm: function() {\r\n\r\n        return Ext.getCmp('new-conn-form').getForm();\r\n    },\r\n\r\n    save: function(btn) {\r\n\r\n        var me = this,\r\n            form   = me.getForm(),\r\n            values = form.getValues(),\r\n            win    = btn.up(\"window\"),\r\n            app    = me.getApplication();\r\n\r\n        Planche.lib.Setting.getHosts(function(hosts){\r\n\r\n            var newValues = {};\r\n\r\n            Ext.Object.each(values, function(key, val) {\r\n\r\n                newValues[key.substring(9)] = val;\r\n            });\r\n\r\n            if (me.mode == 'add') {\r\n\r\n                newValues['index'] = hosts.length;\r\n                hosts.push(newValues);\r\n            }\r\n            else if (me.mode == 'edit') {\r\n\r\n                hosts[newValues['index']] = newValues;\r\n            }\r\n\r\n            Planche.lib.Setting.setHosts(hosts, function(){\r\n\r\n                app.fireEvent('initHosts');\r\n            });\r\n\r\n            win.destroy();\r\n\r\n            Ext.getCmp('edit-conn-btn').setDisabled(true);\r\n            Ext.getCmp('del-conn-btn').setDisabled(true);\r\n            Ext.getCmp('conn-btn').setDisabled(true);\r\n            Ext.getCmp('test-conn-btn').setDisabled(true);\r\n        });\r\n    },\r\n\r\n    cancel: function(btn) {\r\n\r\n        var win = btn.up(\"window\");\r\n        win.destroy();\r\n    }\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/controller/connection/NewConnect.js\n// module id = 90\n// module chunks = 0","Ext.define('Planche.controller.connection.Connect', {\r\n    extend    : 'Ext.app.Controller',\r\n    tmpCopy   : null,\r\n    initWindow: function() {\r\n\r\n        var app = this.getApplication(),\r\n            columns = this.makeListColumns(),\r\n            fields = [];\r\n\r\n        Ext.each(columns, function(obj) {\r\n\r\n            fields.push(obj.dataIndex);\r\n        });\r\n\r\n        this.store = Ext.create('Ext.data.Store', {\r\n            fields: fields\r\n        });\r\n\r\n        this.grid = Ext.create('Ext.grid.Panel', {\r\n            id         : 'connect-grid',\r\n            border     : false,\r\n            columnLines: true,\r\n            width      : '100%',\r\n            flex       : 1,\r\n            columns    : columns,\r\n            store      : this.store,\r\n            listeners  : {\r\n                scope       : this,\r\n                select      : function(grid, record) {\r\n\r\n                    if (record.raw.into == 'hostfile') {\r\n\r\n                        Ext.getCmp('edit-conn-btn').setDisabled(true);\r\n                        Ext.getCmp('del-conn-btn').setDisabled(true);\r\n                    }\r\n                    else {\r\n\r\n                        Ext.getCmp('edit-conn-btn').setDisabled(false);\r\n                        Ext.getCmp('del-conn-btn').setDisabled(false);\r\n                    }\r\n\r\n                    Ext.getCmp('conn-btn').setDisabled(false);\r\n                    Ext.getCmp('test-conn-btn').setDisabled(false);\r\n                },\r\n                itemdblclick: this.connect,\r\n                cellkeydown : function(grid, td, cellIndex, record, tr, rowIndex, e, eOpts) {\r\n\r\n                    if (e.keyCode === Ext.EventObject.ENTER) {\r\n\r\n                        this.connect();\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n\r\n        Ext.create('Planche.lib.Window', {\r\n            id        : 'connect-window',\r\n            stateful  : true,\r\n            title     : 'Connect to MySQL Host',\r\n            layout    : 'fit',\r\n            bodyStyle : \"background-color:#FFFFFF\",\r\n            width     : 900,\r\n            height    : 500,\r\n            overflowY : 'auto',\r\n            autoScroll: true,\r\n            modal     : true,\r\n            plain     : true,\r\n            fixed     : true,\r\n            shadow    : false,\r\n            autoShow  : true,\r\n            constrain : true,\r\n            items     : this.grid,\r\n            buttons   : [{\r\n                text    : 'Connect',\r\n                id      : 'conn-btn',\r\n                disabled: true,\r\n                scope   : this,\r\n                handler : this.connect\r\n            }, {\r\n                text    : 'Test Connect',\r\n                id      : 'test-conn-btn',\r\n                disabled: true,\r\n                scope   : this,\r\n                handler : this.testConnect\r\n            }, {\r\n                text   : 'Add New Connnection',\r\n                scope  : this,\r\n                handler: this.newConnect\r\n            }, {\r\n                text    : 'Edit Connnection',\r\n                id      : 'edit-conn-btn',\r\n                disabled: true,\r\n                scope   : this,\r\n                handler : this.editConnect\r\n            }, {\r\n                text    : 'Del Connnection',\r\n                id      : 'del-conn-btn',\r\n                disabled: true,\r\n                scope   : this,\r\n                handler : this.delConnect\r\n            }],\r\n            listeners : {\r\n                scope   : this,\r\n                boxready: function(win) {\r\n\r\n                    win.setLoading(true);\r\n\r\n                    this.initHosts(function(){\r\n\r\n                        win.setLoading(false);\r\n                    });\r\n\r\n                    this.initKeyMap();\r\n\r\n                    app.on('initHosts',function(){\r\n\r\n                        app.setLoading(true);\r\n\r\n                        this.initHosts(function(){\r\n\r\n                            app.setLoading(false);\r\n                        });\r\n                    }, this);\r\n                }\r\n            }\r\n        });\r\n    },\r\n\r\n    initHosts: function(callback) {\r\n\r\n        var me = this,\r\n            app = me.getApplication();\r\n\r\n        Planche.lib.Setting.getHosts(function(hosts){\r\n\r\n            me.store.loadData(hosts);\r\n\r\n            if(callback) callback();\r\n\r\n            Ext.getCmp('edit-conn-btn').setDisabled(true);\r\n            Ext.getCmp('del-conn-btn').setDisabled(true);\r\n        });\r\n    },\r\n\r\n    connect  : function() {\r\n\r\n        var me = this,\r\n            app = me.getApplication();\r\n\r\n        this.ping(function() {\r\n\r\n            var win = me.getConnectWindow(),\r\n                conn = me.getSelectedConnection();\r\n\r\n            conn.raw.requestType = window.location.protocol == 'file:' ? 'jsonp' : conn.raw.requestType;\r\n            app.initConnectTab(conn.raw);\r\n\r\n            win.destroy();\r\n        });\r\n    },\r\n\r\n    testConnect: function() {\r\n\r\n        var me = this;\r\n\r\n        this.ping(function() {\r\n\r\n            var win = me.getConnectWindow();\r\n            win.setLoading(false);\r\n\r\n            Ext.Msg.alert('Info', 'Connection is successful');\r\n        });\r\n    },\r\n\r\n    newConnect: function() {\r\n\r\n        if (typeof localStorage == 'undefined') {\r\n\r\n            Ext.Msg.alert('notice', 'Your browser does not support local storage');\r\n            return;\r\n        }\r\n\r\n        var app = this.getApplication();\r\n        app.openWindow('connection.NewConnect');\r\n    },\r\n\r\n    editConnect: function() {\r\n\r\n        if (typeof localStorage == 'undefined') {\r\n\r\n            Ext.Msg.alert('notice', 'Your browser does not support local storage');\r\n            return;\r\n        }\r\n\r\n        var app = this.getApplication(),\r\n            conn = this.getSelectedConnection();\r\n\r\n        app.openWindow('connection.NewConnect', conn);\r\n    },\r\n\r\n    delConnect : function(){\r\n\r\n        var app = this.getApplication(),\r\n            conn = this.getSelectedConnection();\r\n\r\n        Planche.lib.Setting.getHosts(function(hosts){\r\n\r\n            hosts.splice(conn.raw.index, 1);\n\r\n            Planche.lib.Setting.setHosts(hosts, function(){\r\n\r\n                app.fireEvent('initHosts');\r\n            });\r\n        });\r\n    },\r\n\r\n    ping: function(callback) {\r\n\r\n        var win = this.getConnectWindow(),\r\n            app = this.getApplication(),\r\n            conn = this.getSelectedConnection();\r\n\r\n        win.setLoading(true);\r\n\r\n        app.tunneling(Ext.apply({\r\n            query  : 'SELECT 1',\r\n            timeout: 20000,\r\n            success: function(config, response) {\r\n\r\n                callback();\r\n            },\r\n            failure: function(config, response) {\r\n\r\n                Ext.Msg.alert('Error', response.message);\r\n                win.setLoading(false);\r\n            }\r\n        }, conn.raw));\r\n    },\r\n\r\n    getConnectWindow: function() {\r\n\r\n        return Ext.getCmp('connect-window');\r\n    },\r\n\r\n    getSelectedConnection: function() {\r\n\r\n        var grid = Ext.getCmp('connect-grid'),\r\n            selGrid = grid.selModel.getSelection();\r\n\r\n        if (selGrid.length == 0) {\r\n\r\n            return false;\r\n        }\r\n\r\n        return selGrid[0];\r\n    },\r\n\r\n    makeListColumns: function() {\r\n\r\n        return [\r\n            {\r\n                text: 'Host Name', dataIndex: 'hostName', width: 200, renderer: function(value, p, record) {\r\n\r\n                return Ext.String.format('<img src=\\'resources/images/icon_database24x24.png\\'> {0}', value);\r\n            }\r\n            },\r\n            {\r\n                text: 'Host', dataIndex: 'host', width: 100, renderer: function(value, p, record) {\r\n\r\n                return Ext.String.format('<img src=\\'resources/images/icon_server24x24.png\\'> {0}', value);\r\n            }\r\n            },\r\n            {\r\n                text: 'User', dataIndex: 'user', width: 100, renderer: function(value, p, record) {\r\n\r\n                return Ext.String.format('<img src=\\'resources/images/icon_user24x24.png\\'> {0}', value);\r\n            }\r\n            },\r\n            {\r\n                text: 'Req.Type', dataIndex: 'requestType', width: 60, renderer: function(value) {\r\n\r\n                return value ? value.toUpperCase() : 'JSONP';\r\n            }\r\n            },\r\n            {text: 'Charset', dataIndex: 'charset', width: 50},\r\n            {text: 'Port', dataIndex: 'port', width: 40},\r\n            {text: 'HTTP Tunneling URL', dataIndex: 'tunnelingURL', flex: 1}\r\n        ];\r\n    },\r\n\r\n    copyHost: function() {\r\n\r\n        if (typeof localStorage == 'undefined') {\r\n\r\n            Ext.Msg.alert('notice', 'Your browser does not support local storage');\r\n            return;\r\n        }\r\n\r\n        this.tmpCopy = Ext.clone(this.getSelectedConnection().raw);\r\n        this.tmpCopy.into = 'localstorage';\r\n    },\r\n\r\n    pasteHost: function() {\r\n\r\n        if(!this.tmpCopy){\r\n\r\n            return;\r\n        }\r\n\r\n        var me = this,\r\n            app = me.getApplication();\r\n\r\n        Planche.lib.Setting.getHosts(function(hosts){\r\n\r\n            me.tmpCopy['index'] = hosts.length;\r\n            hosts.push(me.tmpCopy);\r\n\r\n            Planche.lib.Setting.setHosts(hosts, function(){\r\n\r\n                app.fireEvent('initHosts');\r\n                me.tmpCopy = null;\r\n            });\r\n        });\r\n    },\r\n\r\n    initKeyMap: function() {\r\n\r\n        var map = new Ext.util.KeyMap({\r\n            target : Ext.getCmp('connect-grid').getEl(),\r\n            binding: [{\r\n                scope: this,\r\n                key  : Ext.EventObject.C,\r\n                ctrl : true,\r\n                fn   : this.copyHost\r\n            }, {\r\n                scope: this,\r\n                key  : Ext.EventObject.V,\r\n                ctrl : true,\r\n                fn   : this.pasteHost\r\n            }]\r\n        });\r\n    }\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/controller/connection/Connect.js\n// module id = 91\n// module chunks = 0","Ext.define('Planche.controller.command.Variables', {\r\n    extend    : 'Ext.app.Controller',\r\n    grid      : null,\r\n    initWindow: function() {\r\n\r\n        Ext.create('Planche.lib.Window', {\r\n            id       : 'window-' + this.id,\r\n            title    : 'Show Variables',\r\n            bodyStyle: \"background-color:#FFFFFF\",\r\n            width    : 900,\r\n            height   : 500,\r\n            items    : this.initGrid(),\r\n            buttons  : [{\r\n                text   : 'Close',\r\n                scope  : this,\r\n                handler: function(btn, e) {\r\n\r\n                    var win = btn.up('window');\r\n                    win.destroy();\r\n                }\r\n            }],\r\n            listeners: {\r\n                scope   : this,\r\n                boxready: function() {\r\n\r\n                    this.loadList();\r\n                }\r\n            }\r\n        });\r\n    },\r\n\r\n    initGrid: function() {\r\n\r\n        var columns = this.makeListColumns(),\r\n            fields = [];\r\n\r\n        Ext.each(columns, function(obj) {\r\n\r\n            fields.push(obj.dataIndex);\r\n        });\r\n\r\n        this.grid = Ext.create('Ext.grid.Panel', {\r\n            border     : false,\r\n            columnLines: true,\r\n            width      : '100%',\r\n            flex       : 1,\r\n            columns    : columns,\r\n            store      : Ext.create('Ext.data.Store', {\r\n                fields: fields\r\n            })\r\n        });\r\n\r\n        return this.grid;\r\n    },\r\n\r\n    loadList: function() {\r\n\r\n        var app = this.application,\r\n            node = app.getSelectedNode(true),\r\n            db = app.getParentNode(node);\r\n\r\n        app.tunneling({\r\n            db     : db,\r\n            query  : app.getAPIS().getQuery('SHOW_VARIABLES', db),\r\n            success: Ext.Function.bind(function(config, response) {\r\n\r\n                var records = this.makeRecords(response.fields, response.records);\r\n\r\n                this.grid.store.loadData(records);\r\n                this.grid.setLoading(false);\r\n\r\n            }, this)\r\n        });\r\n    },\r\n\r\n    makeRecords    : function(fields, records) {\r\n\r\n        var tmp = [];\r\n        Ext.Array.each(records, function(row, ridx) {\r\n\r\n            var record = {};\r\n            Ext.Array.each(fields, function(col, cidx) {\r\n\r\n                record[col.name] = row[cidx];\r\n            });\r\n            tmp.push(record);\r\n        });\r\n\r\n        return tmp;\r\n    },\r\n    makeListColumns: function() {\r\n\r\n        return [\r\n            {text: 'Variable Name', dataIndex: 'Variable_name', width: 300},\r\n            {text: 'Value', dataIndex: 'Value', flex: 1}\r\n        ];\r\n    }\r\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/controller/command/Variables.js\n// module id = 92\n// module chunks = 0","Ext.define('Planche.controller.command.Status', {\r\n    extend    : 'Ext.app.Controller',\r\n    grid      : null,\r\n    initWindow: function() {\r\n\r\n        Ext.create('Planche.lib.Window', {\r\n            id       : 'window-' + this.id,\r\n            title    : 'Show Status',\r\n            bodyStyle: \"background-color:#FFFFFF\",\r\n            width    : 900,\r\n            height   : 500,\r\n            items    : this.initGrid(),\r\n            buttons  : [{\r\n                text   : 'Close',\r\n                scope  : this,\r\n                handler: function(btn, e) {\r\n\r\n                    var win = btn.up('window');\r\n                    win.destroy();\r\n                }\r\n            }],\r\n            listeners: {\r\n                scope   : this,\r\n                boxready: function() {\r\n\r\n                    this.loadList();\r\n                }\r\n            }\r\n        });\r\n    },\r\n\r\n    initGrid: function() {\r\n\r\n        var columns = this.makeListColumns(),\r\n            fields = [];\r\n\r\n        Ext.each(columns, function(obj) {\r\n\r\n            fields.push(obj.dataIndex);\r\n        });\r\n\r\n        this.grid = Ext.create('Ext.grid.Panel', {\r\n            border     : false,\r\n            columnLines: true,\r\n            width      : '100%',\r\n            flex       : 1,\r\n            columns    : columns,\r\n            store      : Ext.create('Ext.data.Store', {\r\n                fields: fields\r\n            }),\r\n            tbar       : [\r\n                {\r\n                    xtype  : 'button',\r\n                    text   : 'All',\r\n                    cls    : 'btn',\r\n                    pressed: true,\r\n                    scope  : this,\r\n                    margin : '0 0 0 5',\r\n                    scope  : this,\r\n                    handler: function(btn) {\r\n\r\n                        Ext.invoke(btn.up(\"grid\").query('>>button'), 'toggle', false);\r\n                        btn.toggle(true);\r\n\r\n                        this.loadList();\r\n                    }\r\n                },\r\n                {\r\n                    xtype  : 'button',\r\n                    text   : 'Global',\r\n                    cls    : 'btn',\r\n                    scope  : this,\r\n                    margin : '0 0 0 5',\r\n                    scope  : this,\r\n                    handler: function(btn) {\r\n\r\n                        Ext.invoke(btn.up(\"grid\").query('>>button'), 'toggle', false);\r\n                        btn.toggle(true);\r\n\r\n                        this.loadList('GLOBAL');\r\n                    }\r\n                },\r\n                {\r\n                    xtype  : 'button',\r\n                    text   : 'Session',\r\n                    cls    : 'btn',\r\n                    scope  : this,\r\n                    margin : '0 0 0 5',\r\n                    scope  : this,\r\n                    handler: function(btn) {\r\n\r\n                        Ext.invoke(btn.up(\"grid\").query('>>button'), 'toggle', false);\r\n                        btn.toggle(true);\r\n\r\n                        this.loadList('SESSION');\r\n                    }\r\n                }\r\n            ]\r\n        });\r\n\r\n        return this.grid;\r\n    },\r\n\r\n    loadList: function(cmd) {\r\n\r\n        var query = typeof cmd == 'undefined' ? 'SHOW_STATUS' : 'SHOW_' + cmd + '_STATUS';\r\n\r\n        var app = this.application;\r\n\r\n        var node = app.getSelectedNode(true);\r\n        var db = app.getParentNode(node);\r\n        app.tunneling({\r\n            db     : db,\r\n            query  : app.getAPIS().getQuery(query, db),\r\n            success: Ext.Function.bind(function(config, response) {\r\n\r\n                var records = this.makeRecords(response.fields, response.records);\r\n\r\n                this.grid.store.loadData(records);\r\n                this.grid.setLoading(false);\r\n\r\n            }, this)\r\n        });\r\n    },\r\n\r\n    makeRecords    : function(fields, records) {\r\n\r\n        var tmp = [];\r\n        Ext.Array.each(records, function(row, ridx) {\r\n\r\n            var record = {};\r\n            Ext.Array.each(fields, function(col, cidx) {\r\n\r\n                record[col.name] = row[cidx];\r\n            });\r\n            tmp.push(record);\r\n        });\r\n\r\n        return tmp;\r\n    },\r\n    makeListColumns: function() {\r\n\r\n        return [\r\n            {text: 'Variable Name', dataIndex: 'Variable_name', width: 300},\r\n            {text: 'Value', dataIndex: 'Value', flex: 1}\r\n        ];\r\n    }\r\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/controller/command/Status.js\n// module id = 93\n// module chunks = 0","Ext.define('Planche.controller.command.Quick', {\r\n    extend: 'Ext.app.Controller',\r\n\r\n    initWindow: function() {\r\n\r\n        var app = this.getApplication();\r\n            fields = ['name', 'icon', 'value'],\r\n            win = Ext.create('Ext.window.Window', {\r\n                id       : 'window-' + this.id,\r\n                title    : 'Quick Command',\r\n                layout   : 'fit',\r\n                width    : 500,\r\n                border   : false,\r\n                constrain: true,\r\n                modal    : true,\r\n                header   : false,\r\n                fixed    : true,\r\n                shadow   : false,\r\n                items    : [\r\n                    {\r\n                        xtype            : 'combo',\r\n                        id               : 'quick-combo',\r\n                        typeAhead        : false,\r\n                        hideLabel        : true,\r\n                        hideTrigger      : true,\r\n                        displayField     : 'name',\r\n                        valueField       : 'value',\r\n                        queryMode        : 'local',\r\n                        forceSelection   : true,\r\n                        anyMatch         : true,\r\n                        triggerAction    : 'all',\r\n                        focusOnToFront   : true,\r\n                        loadingText      : 'Searching...',\r\n                        valueNotFoundText: 'This command is not found',\r\n                        fixed            : true,\r\n                        store            : Ext.create('Ext.data.Store', {\r\n                            fields: fields,\r\n                            data  : []\r\n                        }),\r\n                        listConfig : {\r\n\r\n                            loadingText: 'Search..',\r\n                            getInnerTpl: function() {\r\n\r\n                                return '<div class=\"quick-command\"><span class=\"quick-icon {icon}\"></span> {name}</div>';\r\n                            }\r\n                        },\r\n                        listeners        : {\r\n                            scope : this,\r\n                            select: function(combo, records) {\r\n\r\n                                var selData = records[0].raw;\r\n                                selData.method.apply(app, selData.params);\r\n\r\n                                try {\r\n\r\n                                    combo.reset();\r\n                                    var panel = combo.up('panel');\r\n                                    panel.hide();\r\n                                }\r\n                                catch (e) {\r\n\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                ],\r\n                listeners: {\r\n                    activate : function(win){\r\n                        var combo = Ext.getCmp('quick-combo'),\r\n                            task = new Ext.util.DelayedTask();\r\n\r\n                        combo.store.loadData(app.getActiveQuickCommands());\r\n\r\n                        task.delay(100, function(combo) {\r\n\r\n                            combo.focus();\r\n\r\n                            task.delay(200, function(combo) {\r\n\r\n                                combo.doQuery('');\r\n\r\n                            }, this, [combo]);\r\n\r\n                        }, this, [combo]);\r\n                    },\r\n\r\n                    close : function(win){\r\n\r\n                        win.destroy();\r\n                    }\r\n                }\r\n            });\r\n\r\n        win.show();\r\n        win.setY(100);\r\n\r\n        return win;\r\n    }\r\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/controller/command/Quick.js\n// module id = 94\n// module chunks = 0","Ext.define('Planche.controller.command.Process', {\r\n    extend: 'Ext.app.Controller',\r\n    grid : null,\r\n    initWindow : function () {\r\n\r\n        var app = this.getApplication(),\r\n            api = app.getAPIS(),\r\n            me  = this,\r\n            win = null;\r\n\r\n        win = Ext.create('Planche.lib.Window', {\r\n            id : 'window-'+this.id,\r\n            title : 'Show Process List',\r\n            bodyStyle:\"background-color:#FFFFFF\",\r\n            width : 900,\r\n            height: 500,\r\n            items : this.initGrid(),\r\n            buttons : [{\r\n                text : 'Kill Process',\r\n                scope : this,\r\n                handler : function (btn, e) {\r\n\r\n                    var selected = this.grid.selModel.getSelection();\r\n\r\n                    if(selected.length == 0){\r\n\r\n                        Ext.Msg.alert('info', 'Please select a process id');\r\n                        return;\r\n                    }\r\n\r\n                    win.setLoading(true);\r\n\r\n                    app.tunneling({\r\n                        db : '',\r\n                        query : api.getQuery('KILL_QUERY', selected[0].data.Id),\r\n                        success : function(config, response){\r\n                            \r\n                            me.loadList();\r\n                            win.setLoading(false);                \r\n                        },\r\n                        failure : function(config, response){\r\n\r\n                            Ext.Msg.alert('error', app.generateError(config.query, response.message));\r\n                            win.setLoading(false); \r\n                        }\r\n                    });\r\n                }\r\n            },{\r\n                text : 'Close',\r\n                scope : this,\r\n                handler : function (btn, e) {\r\n                    \r\n                    var win = btn.up('window');\r\n                    win.destroy();\r\n                }\r\n            }],\r\n            listeners : {\r\n                scope : this,\r\n                boxready : function () {\r\n\r\n                    this.loadList();\r\n                }\r\n            }\r\n        });\r\n    },\r\n\r\n    initGrid : function () {\r\n\r\n        var columns = this.makeListColumns();\r\n\r\n        var fields = [];\r\n        Ext.each(columns, function (obj) {\r\n\r\n            fields.push(obj.dataIndex);\r\n        });\r\n\r\n        this.grid = Ext.create('Ext.grid.Panel', {\r\n            border : false,\r\n            columnLines: true,\r\n            width : '100%',\r\n            flex  : 1,\r\n            columns : columns,\r\n            store: Ext.create('Ext.data.Store', {\r\n                fields: fields\r\n            }),\r\n            tbar : [\r\n                { xtype: 'text',  text : 'Refresh Per Sec', margin : '0 0 0 5'},\r\n                { xtype: 'textfield', value: 0, scope: this, width : 40, margin : '0 0 0 5', listeners : {\r\n                    scope : this,\r\n                    specialkey: function (field, el) {\r\n\r\n                        if (el.getKey() == Ext.EventObject.ENTER) {\r\n\r\n                            this.loadList();\r\n                        }\r\n                    }\r\n                }},\r\n                { xtype: 'button', text: 'Refresh', cls : 'btn', scope: this, margin : '0 0 0 5', scope : this, handler : function (btn) {\r\n\r\n                    this.loadList();\r\n                }},\r\n                { xtype: 'button', text: 'Stop', cls : 'btn', scope: this, margin : '0 0 0 5', scope : this, handler : function (btn) {\r\n\r\n                    var textRefreshPerSec = this.grid.down('text[text=Refresh Per Sec]').next();\r\n\r\n                    textRefreshPerSec.setValue(0);\r\n                }}\r\n            ]\r\n        });\r\n\r\n        return this.grid;\r\n    },\r\n\r\n    loadList : function () {\r\n\r\n        var textRefreshPerSec = this.grid.down('text[text=Refresh Per Sec]').next();\r\n\r\n        var refreshPerSec = parseFloat(textRefreshPerSec.getValue());\r\n\r\n        var app = this.application;\r\n\r\n        var node = app.getSelectedNode(true);\r\n        var db = app.getParentNode(node);\r\n        app.tunneling({\r\n            db : db,\r\n            query : app.getAPIS().getQuery('SHOW_PROCESS_LIST', db),\r\n            success : Ext.Function.bind(function (config, response) {\r\n                \r\n                var records = this.makeRecords(response.fields, response.records);\r\n\r\n                this.grid.store.loadData(records);\r\n                this.grid.setLoading(false);\r\n\r\n                if(refreshPerSec > 0) {\r\n\r\n                    setTimeout(Ext.Function.bind(this.loadList, this), refreshPerSec * 1000);\r\n                }\r\n            }, this)\r\n        });\r\n    },\r\n\r\n    makeRecords : function (fields, records) {\r\n\r\n        var tmp = [];\r\n        Ext.Array.each(records, function (row, ridx) {\r\n\r\n            var record = {};\r\n            Ext.Array.each(fields, function (col, cidx) {\r\n\r\n                record[col.name] = row[cidx];\r\n            });\r\n            tmp.push(record);\r\n        });\r\n\r\n        return tmp;\r\n    },\r\n    makeListColumns : function () {   \r\n        \r\n        return [\r\n            { text: 'Id', dataIndex: 'Id', width : 100},\r\n            { text: 'User', dataIndex: 'User', width : 100},\r\n            { text : 'Host', dataIndex : 'Host', width : 60 },\r\n            { text : 'Db', dataIndex : 'Db', width : 60 },\r\n            { text : 'Command', dataIndex : 'Command', width : 60 },\r\n            { text : 'State', dataIndex : 'State', width : 60 },\r\n            { text : 'Info', dataIndex : 'Info', flex : 1 }\r\n        ];\r\n    }\r\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/controller/command/Process.js\n// module id = 95\n// module chunks = 0","Ext.define('Planche.controller.command.Flush', {\r\n    extend: 'Ext.app.Controller',\r\n    grid : null,\r\n    initWindow : function () {\r\n\r\n        Ext.create('Planche.lib.Window', {\r\n            id : 'window-'+this.id,\r\n            title : 'Flush',\r\n            layout: {\r\n                type: 'table',\r\n                columns: 2,\r\n                tableAttrs: {\r\n                    style: {\r\n                        width: '100%'\r\n                    }\r\n                },\r\n                tdAttrs: {\r\n                   style:{\r\n                       width: '50%',\r\n                       'vertical-align' : 'top'\r\n                   }\r\n                }\r\n            },\r\n            bodyPadding : '5 5 5 5',\r\n            bodyStyle:\"background-color:#FFFFFF\",\r\n            width : 400,\r\n            height: 300,\r\n            constrain : true,\r\n            items : [\r\n                this.initCheckBox('Use NO_WRITE_TO_BINLOG', 'NO_WRITE_TO_BINLOG', 2),\r\n                this.initCheckBox('FLUSH ALL', 'ALL', 2),\r\n                this.initCheckBox('Logs', 'LOGS'),\r\n                this.initCheckBox('Hosts', 'HOSTS'),\r\n                this.initCheckBox('Privileges', 'PRIVILEGES'),\r\n                this.initCheckBox('Status', 'STATUS'),\r\n                this.initCheckBox('Tables', 'TABLES'),\r\n                this.initCheckBox('Tables with read lock', 'TABLES WITH READ LOCK'),\r\n                this.initCheckBox('DES_KEY_FILE', 'DES_KEY_FILE'),\r\n                this.initCheckBox('QUERY_CACHE', 'QUERY CACHE'),\r\n                this.initCheckBox('USER_RESOURCES', 'USER_RESOURCES', 2)\r\n            ],\r\n            buttons : [{\r\n                text : 'Flush',\r\n                scope : this,\r\n                handler : this.flush\r\n            },{\r\n                text : 'Close',\r\n                scope : this,\r\n                handler : this.close\r\n            }]\r\n        });\r\n    },\r\n\r\n    initCheckBox : function (label, cmd, colspan) {\r\n\r\n        var component = {\r\n            xtype : 'checkbox',\r\n            boxLabel : label,\r\n            cmd : cmd,\r\n            handler : this.hanlderCheckBox\r\n        };\r\n\r\n        if(typeof colspan != \"undefined\") {\r\n\r\n            component.colspan = colspan;\r\n        }\r\n\r\n        return component;\r\n    },\r\n\r\n    hanlderCheckBox : function (checkbox, checked) {\r\n\r\n        if(checkbox.cmd == 'ALL') {\r\n\r\n            var node = checkbox.nextNode();\r\n            while(node) {\r\n\r\n                node.setValue(checked);\r\n                node = node.nextNode();\r\n            }\r\n            return;\r\n        }\r\n    },\r\n\r\n    flush : function (btn, e) {\r\n        \r\n        var win = btn.up(\"window\");      \r\n        var checkAll = win.down(\"checkbox[boxLabel='FLUSH ALL']\");\r\n        var useNoWrite = win.down(\"checkbox[boxLabel='Use NO_WRITE_TO_BINLOG']\");\r\n\r\n        if(useNoWrite.checked) {\r\n\r\n            useNoWrite = useNoWrite.cmd;\r\n        }\r\n        else {\r\n\r\n            useNoWrite = '';\r\n        }\r\n        \r\n        var queries = [];\r\n        var node = win.down(\"checkbox[boxLabel='Logs']\");\r\n        while(node) {\r\n\r\n            if(node.checked) {\r\n\r\n                queries.push('FLUSH ' + (useNoWrite ? useNoWrite+' ' : '') + node.cmd);\r\n            }\r\n            node = node.nextNode();\r\n        }\r\n\r\n        if(queries.length == 0) {\r\n\r\n            Ext.Msg.alert('info', 'Must select any command');\r\n            return;\r\n        }\r\n\r\n        this.execute(queries, win);\r\n    },\r\n\r\n    close : function (btn, e) {\r\n        \r\n        var win = btn.up('window');\r\n        win.destroy();\r\n    },\r\n\r\n    execute : function (queries, win) {\r\n            \r\n        var app  = this.getApplication(),\r\n            node = app.getSelectedNode(true),\r\n            db   = app.getParentNode(node);\r\n\r\n        win.setLoading(true);\r\n\r\n        var tunneling,\r\n            messages = [];\r\n        (tunneling = Ext.Function.bind(function () {\r\n\r\n            var query = queries.shift();\r\n\r\n            if(query) {\r\n            \r\n                app.tunneling({\r\n                    db : db,\r\n                    query : query,\r\n                    success : function (config, response) {\r\n\r\n                        tunneling();\r\n                    },\r\n                    failure : function (config, response) {\r\n\r\n                        app.openMessage(app.generateQueryErrorMsg(config.query, response.message));\r\n                        win.setLoading(false);\r\n                    }\r\n                })\r\n            }\r\n            else {\r\n\r\n                app.openMessage(app.generateSuccessMsg('Information', 'Successfully completed'));\r\n                win.setLoading(false);\r\n                win.destroy();\r\n            }\r\n\r\n        }, this))();\r\n    }\r\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/controller/command/Flush.js\n// module id = 96\n// module chunks = 0","Ext.define('Planche.controller.command.Find', {\r\n    extend: 'Ext.app.Controller',\r\n\r\n    initWindow : function (records) {\r\n\r\n        var mainTab = this.application.getConnectTabPanel();\r\n        var findText = Ext.create('Ext.form.field.Text', {\r\n            flex : 1, scope: this, listeners : {\r\n                specialkey: function (field, el) {\r\n\r\n                    if (el.getKey() == Ext.EventObject.ENTER) {\r\n\r\n                        this.find();\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        //comment test\r\n        Ext.create('Planche.lib.Window', {\r\n            id : 'window-'+this.id,\r\n            stateful: true,\r\n            layout: 'hbox',\r\n            bodyStyle:\"background-color:#FFFFFF\",\r\n            width : Ext.getBody().getViewSize().width,\r\n            height: 40,\r\n            modal : false,\r\n            // plain: true,\r\n            // fixed : true,\r\n            // frame:true,\r\n            shadow : false,\r\n            constrain : true,\r\n            bodyPadding : '5 5 5 5',\r\n            headerPosition : 'right',\r\n            buttonAlign : 'left',\r\n            defaultAlign : 'bl-bl',\r\n            defaults : {\r\n\r\n                margin : '0 5 0 0'\r\n            },\r\n            items : [\r\n                { xtype: 'button', text: '.*', cls : 'btn', scope: this, handler : function (btn) {\r\n\r\n                    btn.toggle();\r\n                }},\r\n                { xtype: 'button', text: 'Aa', cls : 'btn', scope: this, handler : function (btn) {\r\n\r\n                    btn.toggle();\r\n                }},\r\n                { xtype: 'button', text: '\\\"\\\"', cls : 'btn', scope: this, handler : function (btn) {\r\n\r\n                    btn.toggle();\r\n                }},\r\n                { xtype: 'button', text: 'Wrap', cls : 'btn', scope: this, handler : function (btn) {\r\n\r\n                    btn.toggle();\r\n                }},\r\n                { xtype: 'button', text: 'In Selection', cls : 'btn', scope: this, handler : function (btn) {\r\n\r\n                    btn.toggle();\r\n                }},\r\n                { xtype: 'button', text: 'Highlight', cls : 'btn', scope: this, handler : function (btn) {\r\n\r\n                    btn.toggle();\r\n                }},\r\n                findText,\r\n                { xtype: 'button', text: 'Find', cls : 'btn', scope: this, handler : function (btn) {\r\n\r\n                    this.find();\r\n                }},\r\n                { xtype: 'button', text: 'Find Prev', cls : 'btn', scope: this, handler : function (btn) {\r\n\r\n                    this.findPrev();\r\n                }},\r\n                { xtype: 'button', text: 'Find All', cls : 'btn', margin : '0 0 0 0', scope: this, handler : function (btn) {\r\n\r\n                    this.findAll();\r\n                }}\r\n            ]\r\n        }).showBy(Ext.getBody());\r\n\r\n        var pos = { line : 0, ch : 0 };\r\n        CodeMirror.commands.find = function (cm) {\r\n\r\n            var cursor = cm.getCursor();\r\n            pos = pos.line == cursor.line && pos.ch == cursor.ch ? pos : cm.getCursor();\r\n\r\n            var sword = 'e';\r\n\r\n            if(!sword) {\r\n\r\n                return;\r\n            }\r\n            var lastLine = cm.lastLine();\r\n            var regexp = new RegExp(sword, \"gi\");\r\n            var match;\r\n            var sel = [];\r\n            var all = false;\r\n            var index = 0;\r\n            var from = 0, to = 0;\r\n            var str = '';\r\n            var prev = false;\r\n\r\n\r\n            //라인을 검사하여 마지막에 위치해 있는경우 멈춘다.\r\n            if(pos.line == lastLine && pos.ch) {\r\n\r\n            }\r\n\r\n            lineLoop:\r\n            while(typeof (str = cm.getLine(pos.line)) != \"undefined\") {\r\n\r\n                currLine = pos.line;\r\n\r\n                // if(prev) {\r\n\r\n                //     str = str.slice(0, )\r\n                // }\r\n\r\n                while ((match = regexp.exec(str)) != null) {\r\n\r\n                    from = match.index;\r\n                    to = from + match[0].length;\r\n\r\n                    console.log(pos.ch, to);\r\n                    //debugger;\r\n                    if(pos.ch >= to) {\r\n\r\n                        continue;\r\n                    }\r\n\r\n                    sel.push({\r\n                        anchor : { line : currLine, ch : from },\r\n                        head : { line : currLine, ch : to }\r\n                    });\r\n\r\n                    pos = {line : currLine, ch : to };\r\n\r\n                    if(all == false) {\r\n\r\n                        break lineLoop;\r\n                    }\r\n                }\r\n\r\n                if(prev) {\r\n\r\n                    currLine--;\r\n\r\n                    if(currLine < 0) {\r\n\r\n                        if(all) {\r\n\r\n                            currLine = lastLine;\r\n                        }\r\n                        else {\r\n\r\n                            currLine = 0;\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n\r\n                    currLine++;\r\n\r\n                    if(currLine > lastLine) {\r\n\r\n                        if(all) {\r\n\r\n                            currLine = 0;\r\n                        }\r\n                        else {\r\n\r\n                            currLine = lastLine;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                pos = { line : currLine, ch : 0};\r\n            }\r\n\r\n            cm.setSelections(sel);\r\n        };\r\n\r\n\r\n        CodeMirror.commands.findPrev = function (cm) {\r\n\r\n            var cursor = cm.getCursor();\r\n\r\n            var line = cm.getLine(cursor.line);\r\n            var last = cursor.line;\r\n\r\n            var sword = findText.getValue();\r\n\r\n            if(!sword) {\r\n\r\n                return;\r\n            }\r\n\r\n            var regexp = new RegExp(sword, \"gi\");\r\n            var match;\r\n            var sel = [];\r\n            while(typeof line != \"undefined\") {\r\n\r\n                while ((match = regexp.exec(line)) != null) {\r\n\r\n                    sel.push({\r\n                        anchor : { line : last, ch : match.index },\r\n                        head : { line : last, ch : match.index + match[0].length }\r\n                    });\r\n                }\r\n\r\n                last++;\r\n\r\n                line = cm.getLine(last);\r\n            }\r\n\r\n            cm.setSelections(sel);\r\n        };\r\n\r\n        CodeMirror.commands.findAll = function (cm) {\r\n\r\n            var cursor = cm.getCursor();\r\n\r\n            var line = cm.getLine(cursor.line);\r\n            var last = cursor.line;\r\n\r\n            var sword = findText.getValue();\r\n\r\n            if(!sword) {\r\n\r\n                return;\r\n            }\r\n\r\n            var regexp = new RegExp(sword, \"gi\");\r\n            var match;\r\n            var sel = [];\r\n            while(typeof line != \"undefined\") {\r\n\r\n                while ((match = regexp.exec(line)) != null) {\r\n\r\n                    sel.push({\r\n                        anchor : { line : last, ch : match.index },\r\n                        head : { line : last, ch : match.index + match[0].length }\r\n                    });\r\n                }\r\n\r\n                last++;\r\n\r\n                line = cm.getLine(last);\r\n            }\r\n\r\n            cm.setSelections(sel);\r\n        };\r\n\r\n    },\r\n\r\n    find : function () {\r\n\r\n        var editor = this.application.getActiveEditor();\r\n        editor.execCommand('find');\r\n    },\r\n\r\n    findPrev : function () {\r\n\r\n        var editor = this.application.getActiveEditor();\r\n        editor.execCommand('findPrev');\r\n    },\r\n\r\n    findAll : function () {\r\n\r\n        var editor = this.application.getActiveEditor();\r\n        editor.execCommand('findAll');\r\n    }\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/controller/command/Find.js\n// module id = 97\n// module chunks = 0","Ext.define('Planche.Application',{name:'Planche',extend:'Ext.app.Application',requires:[\"Planche.lib.Base64\",\"Planche.lib.DBUtil\",\"Planche.lib.Menu\",\"Planche.lib.Query\",\"Planche.lib.QueryAlignment\",\"Planche.lib.QueryParser\",\"Planche.lib.QueryTokenType\",\"Planche.lib.SchemaTree\",\"Planche.lib.SchemaUtil\",\"Planche.lib.Window\",\"Planche.lib.QuickCommand\",\"Planche.dbms.mysql\",\"Planche.overrides.FixMenuBug\",\"Planche.overrides.RadioGroup\",\"Planche.lib.setting.Planche-Wordpress\"],views:[\"Planche.view.layout.ConnectTab\",\"Planche.view.layout.HistoryTab\",\"Planche.view.layout.InfoTab\",\"Planche.view.layout.MessageTab\",\"Planche.view.layout.QueryEditor\",\"Planche.view.layout.QueryTab\",\"Planche.view.layout.QueryTabPanel\",\"Planche.view.layout.ResultTabPanel\",\"Planche.view.layout.SchemaTree\",\"Planche.view.layout.TableDataTab\",\"Planche.view.layout.Toolbar\",\"Planche.view.layout.Menu\",\"Planche.view.database.CopyDatabaseWindow\",\"Planche.view.database.DatabaseSchemaTree\",\"Planche.view.database.CopyDatabaseTargetList\",\"Planche.view.database.SchemaToHTML\",\"Planche.view.database.DownloadToCSVTargetList\",\"Planche.view.database.DownloadToCSV\",\"Planche.view.table.EditIndexWindow\",\"Planche.view.table.EditSchemaWindow\",\"Planche.view.table.TableIndexesTab\",\"Planche.view.table.TableInfoTab\",\"Planche.view.table.TablePropertiesTab\",\"Planche.view.table.TableSchemaTab\",\"Planche.view.table.TableSQLTab\",\"Planche.view.user.Grant\",\"Planche.view.user.GrantSchemaTree\",\"Planche.view.user.GrantUserList\",\"Planche.view.user.GrantPrivList\",\"Planche.view.user.UserAdd\",\"Planche.view.Viewport\",\"Planche.view.Main\"],controllers:[\"Planche.controller.command.Find\",\"Planche.controller.command.Flush\",\"Planche.controller.command.Process\",\"Planche.controller.command.Quick\",\"Planche.controller.command.Status\",\"Planche.controller.command.Variables\",\"Planche.controller.connection.Connect\",\"Planche.controller.connection.NewConnect\",\"Planche.controller.database.CreateDatabase\",\"Planche.controller.database.CopyDatabaseWindow\",\"Planche.controller.database.SchemaToHTML\",\"Planche.controller.database.DownloadToCSV\",\"Planche.controller.menu.Connection\",\"Planche.controller.menu.Query\",\"Planche.controller.menu.Database\",\"Planche.controller.menu.Edit\",\"Planche.controller.menu.Table\",\"Planche.controller.menu.Export\",\"Planche.controller.menu.Tools\",\"Planche.controller.menu.Help\",\"Planche.controller.query.Token\",\"Planche.controller.menu.bookmark.Planche-Wordpress\",\"Planche.controller.layout.SchemaTreeContextMenu\",\"Planche.controller.layout.SchemaTree\",\"Planche.controller.layout.QueryTabPanel\",\"Planche.controller.layout.QueryEditor\",\"Planche.controller.layout.ResultTabPanel\",\"Planche.controller.layout.QueryTab\",\"Planche.controller.layout.MessageTab\",\"Planche.controller.layout.TableDataTab\",\"Planche.controller.layout.InfoTab\",\"Planche.controller.layout.HistoryTab\",\"Planche.controller.layout.ConnectTab\",\"Planche.controller.layout.Toolbar\",\"Planche.controller.table.EditIndexWindow\",\"Planche.controller.table.EditSchemaWindow\",\"Planche.controller.table.AdvancedProperties\",\"Planche.controller.table.EditTextColumn\",\"Planche.controller.table.ReorderColumns\",\"Planche.controller.table.TableSchemaTab\",\"Planche.controller.table.TablePropertiesTab\",\"Planche.controller.table.TableIndexesTab\",\"Planche.controller.table.TableSQLTab\",\"Planche.controller.table.TableInfoTab\",\"Planche.controller.Main\",\"Planche.controller.user.Grant\",\"Planche.controller.user.UserAdd\"],stores:[\"Planche.store.GrantSchemaTree\",\"Planche.store.SchemaTree\",\"Planche.store.DatabaseSchemaTree\"]});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/Application.js\n// module id = 98\n// module chunks = 0","Ext.application({\n    name              : 'Planche',\n    extend            : 'Planche.Application',\n    history           : [],\n    taskQueue         : [],\n    onTask            : false,\n    autoCreateViewport: true,\n\n    /**\n     * launch planche\n     *\n     * @class Ext.application\n     * @constructor\n     */\n    launch: function() {\n\n        var app = this;\n\n        // setup the state provider, all state information will be saved to a cookie\n        Ext.state.Manager.setProvider(Ext.create('Ext.state.CookieProvider'));\n\n        //Defense for backspace\n        Ext.EventManager.addListener(Ext.getBody(), 'keydown', function(e) {\n\n            if (e.getTarget().type !== 'text' && e.getKey() === '8') {\n\n                e.preventDefault();\n            }\n        });\n\n        //Disable the browser context menu\n        Ext.EventManager.addListener(Ext.getBody(), 'contextmenu', function(e) {\n\n            e.preventDefault();\n        });\n\n        //mapping shortcut\n        app.initKeyMap();\n\n        //init auto connections\n        app.initAutoConnections();\n\n        //open connection window\n        Planche.lib.Setting.isEnableAutoLoadConnectionWindow(function(enable){\n\n            if(enable){\n\n                app.openConnPanel();\n            }\n        });\n\n        //load background tasks\n        app.loadTask();\n\n        //detect event for alter, rename, drop, create table\n        app.detectCRUDEvent();\n\n        //google analaytics\n        (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\n        (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\n        m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n        })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');\n\n        var analayticsCode = ''\n        if(Planche.platform == 'planche'){\n\n            analayticsCode = 'UA-87997368-1';\n        }\n        else if(Planche.platform == 'planche-wordpress'){\n\n            analayticsCode = 'UA-87997368-2';\n        }\n        else if(Planche.platform == 'planche-desktop'){\n\n            analayticsCode = 'UA-87997368-3';\n        }\n        else if(Planche.platform == 'planche-chrome'){\n\n            analayticsCode = 'UA-87997368-4';\n        }\n\n        if(analayticsCode){\n\n            ga('create', analayticsCode, 'auto');\n            ga('send', 'pageview');\n        }\n    },\n\n    /**\n     /**\n     * Return context menu component of schema tree in left side bar\n     *\n     * @access public\n     * @method getSchemaContextMenu\n     */\n    getSchemaContextMenu: function() {\n\n        return Ext.getCmp('schema-context-menu');\n    },\n\n    /**\n     * Return toolbar component\n     *\n     * @access public\n     * @method getToolBar\n     */\n    getToolBar: function() {\n\n        return Ext.getCmp('planche-toolbar');\n    },\n\n    /**\n     * Return connect tabpanel\n     *\n     * @access public\n     * @method getConnectTabPanel\n     */\n    getConnectTabPanel: function() {\n\n        return Ext.getCmp('connect-tab-panel');\n    },\n\n    /**\n     * Return active connected tab\n     *\n     * @access public\n     * @method getActiveConnectTab\n     */\n    getActiveConnectTab: function() {\n\n        var mainTab = this.getConnectTabPanel();\n        return mainTab.getActiveTab();\n    },\n\n    /**\n     * Return active connected tab's quick command list\n     *\n     * @access public\n     * @method getActiveQuickCommands\n     */\n    getActiveQuickCommands: function() {\n\n        return this.getActiveConnectTab().quickCommand.get();\n    },\n\n    /**\n     * Return footer task progress bar\n     *\n     * @access public\n     * @method getTaskProgressBar\n     */\n    getTaskProgressBar: function() {\n\n        return Ext.getCmp('footer-task-progressbar');\n    },\n\n    updateTaskProgressBar: function(val) {\n\n        var per = Math.ceil(val * 100);\n\n        this.getTaskProgressBar().updateProgress(val, per + '% (Remaining ' + this.getTaskQueue().length + ' task(s))');\n    },\n\n    addTask: function(task, params) {\n\n        this.getTaskQueue().push([task, params]);\n    },\n\n    getTaskQueue: function() {\n\n        return this.taskQueue;\n    },\n\n    getTask: function() {\n\n        return this.getTaskQueue().shift();\n    },\n\n    loadTask: function() {\n\n        var app = this,\n            run;\n\n        (run = function() {\n            setTimeout(function() {\n\n                if (app.onTask) {\n\n                    run();\n                    return;\n                }\n\n                var task = app.getTask();\n\n                if (task) {\n\n                    task[0].apply(app, task[1]);\n                }\n\n                run();\n\n            }, 1000);\n        })();\n\n    },\n\n    /**\n     * Return footer task message\n     *\n     * @access public\n     * @method getTaskMessage\n     */\n    getTaskMessage: function() {\n\n        var el;\n\n        if (el) {\n\n            return el;\n        }\n\n        el = Ext.get('footer-task-message').el;\n        return el;\n    },\n\n    /**\n     * update task message\n     *\n     * @access public\n     * @method updateTaskMessage\n     */\n    updateTaskMessage: function(text) {\n\n        this.getTaskMessage().update(text);\n    },\n\n    /**\n     * Close the active connection tab\n     *\n     * @access public\n     * @method closeActiveConnectionTab\n     */\n    closeActiveConnectionTab: function() {\n\n        var tab = this.getActiveConnectTab();\n        if (!tab) return;\n\n        tab.destroy();\n    },\n\n    /**\n     * Return active query tabpanel in active connect tab\n     *\n     * @access public\n     * @method getQueryTabPanel\n     */\n    getQueryTabPanel: function() {\n        try {\n\n            return this.getActiveConnectTab().down(\"tabpanel\");\n        }\n        catch (e) {\n            return null;\n        }\n    },\n\n    /**\n     * Return active query tab in active query tabpanel\n     *\n     * @access public\n     * @method getActiveQueryTab\n     */\n    getActiveQueryTab: function() {\n\n        try {\n            return this.getQueryTabPanel().getActiveTab();\n        }\n        catch (e) {\n            return null;\n        }\n    },\n\n    /**\n     * Return active result tab in active query tab\n     *\n     * @access public\n     * @method getActiveResultTabPanel\n     */\n    getActiveResultTabPanel: function() {\n\n        try {\n\n            return this.getActiveQueryTab().down('tabpanel');\n        }\n        catch (e) {\n\n            return null;\n        }\n    },\n\n    /**\n     * destory active result tab in active result tabpanel\n     *\n     * @access public\n     * @method getActiveResultTabPanel\n     */\n    removeResultTabPanel: function() {\n\n        var tabpanel = this.getActiveResultTabPanel();\n        tabpanel.items.each(function(cmp, idx) {\n            if (idx > 3) cmp.destroy()\n        });\n    },\n\n    /**\n     * Return query editor in active query tab\n     *\n     * @access public\n     * @method getActiveResultTabPanel\n     */\n    getActiveEditor: function() {\n\n        try {\n            return this.getActiveQueryTab().down('query-editor').getEditor();\n        }\n        catch (e) {\n            return null;\n        }\n    },\n\n    /**\n     * Return query editor's selected sql in active query tab\n     *\n     * @access public\n     * @method getActiveEditorSelection\n     */\n    getActiveEditorSelection: function() {\n\n        try {\n\n            var editor = this.getActiveEditor();\n            if (editor.somethingSelected()) {\n\n                return editor.getSelection();\n            }\n            else {\n\n                return \"\";\n            }\n        }\n        catch (e) {\n\n            return \"\";\n        }\n    },\n\n    getActiveTableDataTab: function() {\n\n        try {\n            return this.getActiveQueryTab().down(\"table-data-tab\");\n        }\n        catch (e) {\n            return null;\n        }\n    },\n\n    getActiveInfoTab: function() {\n\n        try {\n            return this.getActiveQueryTab().down(\"info-tab\");\n        }\n        catch (e) {\n            return null;\n        }\n    },\n\n    getActiveHistoryTab: function() {\n\n        try {\n            return this.getActiveQueryTab().down(\"history-tab\").getEditor();\n        }\n        catch (e) {\n            return null;\n        }\n    },\n\n    getActiveMessageTab: function() {\n\n        try {\n            return this.getActiveQueryTab().down(\"message-tab\");\n        }\n        catch (e) {\n            return null;\n        }\n    },\n\n    getAPIS: function() {\n\n        return this.getActiveConnectTab().getAPIS();\n    },\n\n    getSelectedTree: function() {\n\n        return Planche.selectedTree;\n    },\n\n    setSelectedTree: function(tree) {\n\n        Planche.selectedTree = tree;\n    },\n\n    setSelectedNode: function(node) {\n\n        Planche.selectedNode = node;\n    },\n\n    getSelectedNode: function(return_node) {\n\n        if (return_node) {\n\n            return Planche.selectedNode;\n        }\n\n        return Planche.selectedNode.data.text;\n    },\n\n    getSelectedNodeType: function() {\n\n        if (!Planche.selectedNode) {\n\n            return null;\n        }\n\n        return Planche.selectedNode.raw.type;\n    },\n\n    getSelectedDatabase: function(return_node) {\n\n        var node = this.getSelectedNode(true);\n        return this.getParentNode(node, 'database', return_node);\n    },\n\n    getSelectedTable: function(return_node) {\n\n        var node = this.getSelectedNode(true);\n        return this.getParentNode(node, 'table', return_node);\n    },\n\n    getChildNode: function(startNode, path, return_node) {\n\n        if (!path) {\n\n            return null;\n        }\n        if (!startNode) {\n\n            return null;\n        }\n\n        var getNode = function(node, path, return_node) {\n\n            if (node.raw.path == path) {\n\n                return return_node ? node : node.data.text;\n            }\n\n            if (node.childNodes.length == 0) {\n\n                return null;\n            }\n\n            for (var i = 0 ; i < node.childNodes.length ; i++) {\n\n                var n = getNode(node.childNodes[i], path, return_node);\n\n                if (n) {\n\n                    return n;\n                }\n            }\n        };\n\n        return getNode(startNode, path, return_node);\n    },\n\n    getParentNode: function(n, depth_or_type, return_node) {\n\n        if (typeof depth_or_type == \"undefined\") {\n\n            depth_or_type = 'database';\n        }\n\n        if (!n) {\n\n            return null;\n        }\n\n        var node = null;\n\n        if (typeof depth_or_type == 'string') {\n\n            while (n) {\n\n                if (n.raw.type == depth_or_type) {\n\n                    node = n;\n                    break;\n                }\n\n                n = n.parentNode;\n            }\n        }\n        else {\n\n            if (n.data.depth < depth_or_type) {\n\n                return null;\n            }\n\n            while (n) {\n\n                if (n.data.depth == depth_or_type) {\n\n                    node = n;\n                    break;\n                }\n\n                n = n.parentNode;\n            }\n        }\n\n        if (!node) {\n\n            return null;\n        }\n\n        if (return_node) {\n\n            return node;\n        }\n        else {\n\n            return node.data.text;\n        }\n    },\n\n    reloadTree: function(node) {\n\n        var tree = this.getSelectedTree(),\n            node = node || this.getSelectedNode(true);\n\n        tree.fireEvent('reloadTree', node);\n    },\n\n    reloadNode: function(path) {\n\n        var tree = this.getSelectedTree(),\n            root = tree.getRootNode(),\n            node = this.getChildNode(root, path, true);\n\n        if (node) {\n\n            this.reloadTree(node);\n            node.expand();\n        }\n    },\n\n    reloadTablesNode: function(db) {\n\n        this.reloadNode(['tables', db, 'Tables'].join('`'));\n    },\n\n    checkToolbar: function() {\n\n        var cnt = this.getConnectTabPanel().items.getCount();\n\n        Ext.Array.each(this.getToolBar().items.getRange(1), function(obj, idx) {\n\n            obj[cnt > 0 ? 'enable' : 'disable']();\n        });\n    },\n\n    /**\n     * openWindow\n     *\n     * Open new window in planche\n     *\n     * @access public\n     *\n     * @return\n     */\n    openWindow: function(id) {\n\n        var args = Ext.toArray(arguments),\n            ctrl = this.getController(id),\n            cmp  = Ext.getCmp('window-' + id);\n\n        args.shift();\n\n        if (cmp) {\n\n            cmp.show();\n        }\n        else {\n\n            ctrl.initWindow.apply(ctrl, args);\n        }\n    },\n\n    initAutoConnections : function() {\n\n        var app = this.getApplication();\n\n        Planche.lib.Setting.getHosts(function(hosts){\n\n            Ext.Array.each(hosts, function(host, idx) {\n\n                if (host.autoConnection) {\n\n                    app.initConnectTab(host);\n                }\n            });\n        })\n    },\n\n    initConnectTab: function(connInfo) {\n\n        var main = this.getConnectTabPanel(),\n            tab  = Ext.create('Planche.view.layout.ConnectTab', Ext.Object.merge({\n                title       : connInfo.hostName,\n                quickCommand: Ext.create('Planche.lib.QuickCommand')\n            }, connInfo));\n\n        main.add(tab);\n        main.setActiveTab(tab);\n\n        this.addTask(this.loadQuickCommands, [tab]);\n        return tab;\n    },\n\n    /**\n     * initKeyMap\n     *\n     * initialize key map contents\n     *\n     * @access public\n     *\n     * @return\n     */\n    initKeyMap: function() {\n\n        // map multiple keys to multiple actions by strings and array of codes\n        var map = new Ext.util.KeyMap({\n            target : Ext.getBody(),\n            binding: [{\n                scope: this,\n                key  : Ext.EventObject.F9,\n                fn   : function(keyCode, e) {\n\n                    e.stopEvent();\n                    this.executeQuery();\n                }\n            }, {\n                scope: this,\n                key  : Ext.EventObject.T,\n                alt  : true,\n                fn   : function(keyCode, e) {\n\n                    e.stopEvent();\n                    this.openQueryTab();\n                }\n            }, {\n                scope: this,\n                key  : Ext.EventObject.N,\n                alt  : true,\n                fn   : function(keyCode, e) {\n\n                    e.stopEvent();\n                    this.openConnPanel();\n                }\n            }, {\n                scope: this,\n                key  : [\n                    Ext.EventObject.P,\n                    Ext.EventObject.O\n                ],\n                ctrl : true,\n                fn   : function(keyCode, e) {\n\n                    e.stopEvent();\n                    this.openQuickPanel();\n                }\n            }, {\n                scope: this,\n                key  : [\n                    Ext.EventObject.P,\n                    Ext.EventObject.O\n                ],\n                alt  : true,\n                fn   : function(keyCode, e) {\n\n                    e.stopEvent();\n                    this.openQuickPanel();\n                }\n            }, {\n                scope: this,\n                key  : Ext.EventObject.U,\n                alt  : true,\n                fn   : function(keyCode, e) {\n\n                    e.stopEvent();\n                    this.openUserPanel();\n                }\n            }]\n        });\n    },\n\n    pushHistory: function(t, q) {\n\n        q = Ext.String.trim(q);\n        this.history.push('/* ' + Ext.Date.format(new Date(), 'Y-m-d h:i:s') + ' ' + t.toFixed(4) + ' Sec */ ' + q.replace(/[\\t\\n]+/gi, \" \"));\n\n        try {\n\n            var editor = this.getActiveHistoryTab();\n            editor.setValue(this.history.join(\"\\n\"));\n        }\n        catch (e) {\n\n        }\n    },\n\n    /**\n     * execute query\n     *\n     * @method tunneling\n     * @param {String} config\n     */\n    tunneling: function(config) {\n\n        Ext.Ajax.cors = true;\n        Ext.Ajax.useDefaultXhrHeader = false;\n\n        var app        = this,\n            connection = config.connection || app.getActiveConnectTab();\n\n            // debugger;\n\n        Ext.applyIf(config, {\n            db         : '',\n            type       : 'query',\n            async      : true,\n            timeout    : 1000 * 60 * 5,\n            charset    : 'utf8',\n            port       : 3306,\n            requestType: 'jsonp',\n            method     : 'post',\n            success    : function(config, response) {\n\n                var msg = response.affected_rows + ' row(s) affected<br>';\n                msg += 'Execution Time : 00:00:00:000<br>';\n                msg += 'Transfer Time  : 00:00:00:000<br>';\n                msg += 'Total Time     : 00:00:00:000';\n\n                app.openMessage(msg);\n            },\n            failure    : function(config, response) {\n\n                app.openMessage(app.generateQueryErrorMsg(config.query, response.message));\n            }\n        });\n\n        if (connection) {\n\n            Ext.applyIf(config, {\n                hostName    : connection.getHostName(),\n                host        : connection.getHost(),\n                user        : connection.getUser(),\n                pass        : connection.getPass(),\n                charset     : connection.getCharset(),\n                port        : connection.getPort(),\n                tunnelingURL: connection.getTunnelingURL(),\n                requestType : connection.getRequestType()\n            });\n        }\n\n        this._tunneling(config);\n    },\n\n    _client : function(config){\n\n        var connection = mysql.createConnection({\n          host     : config.host,\n          user     : config.user,\n          password : config.pass,\n          database : config.db,\n          charset  : config.charset,\n          port     : config.port\n        });\n\n        connection.connect();\n\n        connection.query(config.query, function(err, rows, fields) {\n\n          if (err){\n\n              config.failure(config, {\n                  message : err\n              })\n          }\n          else {\n\n              config.success(config, rows)\n          }\n        });\n\n        connection.end();\n    },\n\n    _tunneling : function(config){\n\n        var app = this.getApplication();\n\n        var params = Planche.Base64.encode(Ext.JSON.encode({\n            db     : config.db,\n            host   : config.host,\n            user   : config.user,\n            pass   : config.pass,\n            charset: config.charset,\n            port   : config.port,\n            query  : config.query,\n            type   : config.type\n        }));\n\n        var reqConfig = {\n            url    : config.tunnelingURL,\n            async  : config.async,\n            params : {\n                cmd: params\n            },\n            timeout: config.timeout,\n            success: function(response) {\n\n                if (response.responseText) {\n\n                    response = Ext.JSON.decode(response.responseText);\n                }\n\n                if (response.success === true) {\n\n                    if (config.type == 'query') {\n\n                        app.pushHistory(response.exec_time, config.query);\n                    }\n\n                    config.success.apply(app, [config, response]);\n                }\n                else {\n\n                    config.failure.apply(app, [config, response]);\n                }\n            },\n            failure: function(response) {\n\n                if (response.status === 0) {\n\n                    response = {\n                        success: false,\n                        message: 'Network error : Can\\'t connect to tunneling URL'\n                    }\n                }\n\n                if (response.responseText) {\n\n                    response = Ext.JSON.decode(response.responseText);\n                }\n\n                if (response == 'error') {\n\n                    response = {\n                        success: false,\n                        message: 'Network error : Can\\'t connect to tunneling URL'\n                    }\n                }\n\n                if (response == 'timeout') {\n\n                    response = {\n                        success: false,\n                        message: 'Can\\'t connect to MySQL Server'\n                    }\n                }\n\n                if (response == 'abort') {\n\n                    response = {\n                        success: false,\n                        message: 'This operation was aborted'\n                    }\n                }\n\n                config.failure.apply(app, [config, response]);\n            }\n        };\n\n        var reqType = window.location.protocol == 'file:' ? 'jsonp' : config.requestType;\n\n        if (!config.host || !config.user || !config.pass) {\n\n            reqConfig.failure({\n                success: false,\n                message: 'User connection information is incorrect'\n            });\n\n            return;\n        }\n\n        if (!config.tunnelingURL && Planche.platform != 'planche-desktop') {\n\n            reqConfig.failure({\n                success: false,\n                message: 'Tunneling URL is incorrect'\n            });\n\n            return;\n        }\n\n        if(!config.tunnelingURL && Planche.platform == 'planche-desktop'){\n\n            var result = Planche.tunneling({\n                connnectId : params.host + '@' + params.user,\n                mode       : 'direct',\n                cmd        : reqConfig.params.cmd\n            });\n\n            result.then(\n                function(contents){\n\n                    reqConfig.success({\n                        responseText : contents\n                    });\n                },\n                function(err){\n\n                    reqConfig.failure({\n                        responseText : err\n                    });\n                }\n            )\n        }\n        else {\n\n            if (reqType == 'jsonp') {\n\n                Ext.apply(reqConfig, {\n                    callbackKey: 'callback'\n                });\n\n                Ext.data.JsonP.request(reqConfig);\n            }\n            else {\n\n                Ext.Ajax.request(reqConfig);\n            }\n        }\n    },\n\n    /**\n     * execute mulitple queries and run user callbacks\n     *\n     * @method tunnelings\n     * @param {Object} tunnelings to be tunnneling\n     * @param {Object} config config tunnelings options\n     * @param {Object} scope scope\n     */\n    tunnelings: function(tunnelings, options) {\n\n        var app     = this.getApplication(),\n            options = options || {},\n            execute;\n\n        Ext.applyIf(options, {\n            ignoreFailure: false,\n            start        : function() {},\n            success      : function() {},\n            failure      : function() {}\n        });\n\n        options['start'].apply(app);\n\n        (execute = function() {\n\n            var queue = tunnelings.shift();\n            if (queue) {\n\n                var success = queue['success'],\n                    failure = queue['failure'];\n                app.tunneling(Ext.apply(queue, {\n                    success: function() {\n\n                        if (success) {\n\n                            success.apply(app, arguments);\n                        }\n\n                        execute();\n                    },\n                    failure: function() {\n\n                        if (failure) {\n\n                            failure.apply(app, arguments);\n                        }\n\n                        if (options.ignoreFailure === true) {\n\n                            execute();\n                            return;\n                        }\n\n                        options['failure'].apply(app);\n                    }\n                }));\n            }\n            else {\n\n                //complete all query\n                options['success'].apply(app);\n            }\n        })();\n    },\n\n    pasteSQLStatement: function(db, table, mode) {\n\n        var a    = [], b = [], c = [],\n            app  = this,\n            api  = app.getAPIS(),\n            func = {\n                'insert'          : function(records) {\n\n                    Ext.Array.each(records, function(row) {\n\n                        a.push(\"`\" + row[0] + \"`\");\n                        b.push(\"'\" + row[0] + \"'\");\n                    });\n                    return api.getQuery('INSERT_TABLE', db, table, a.join(','), b.join(','));\n                },\n                'duplicate_update': function(records) {\n\n                    Ext.Array.each(records, function(row) {\n\n                        a.push(\"`\" + row[0] + \"`\");\n                        b.push(\"'\" + row[0] + \"'\");\n                        if (row[3] != \"PRI\") {\n\n                            c.push(\"`\" + row[0] + \"`= VALUES(\" + row[0] + \")\");\n                        }\n                    });\n                    return api.getQuery('INSERT_ON_DUPLICATE', db, table, a.join(','), b.join(','), c.join(','));\n                },\n                'update'          : function(records) {\n\n                    Ext.Array.each(records, function(row) {\n\n                        a.push(\"`\" + row[0] + \"`='\" + row[0] + \"'\");\n                        if (row[3] == \"PRI\") { b.push(\"`\" + row[0] + \"`='\" + row[0] + \"'\"); }\n                    });\n                    return api.getQuery('UPDATE_TABLE', db, table, a.join(',\\n'), b.join(' AND '));\n                },\n                'delete'          : function(records) {\n\n                    Ext.Array.each(records, function(row) {\n\n                        if (row[3] == \"PRI\") { a.push(\"`\" + row[0] + \"`='\" + row[0] + \"'\"); }\n                    });\n                    return api.getQuery('DELETE_TABLE', db, table, a.join(' AND '));\n                },\n                'select'          : function(records) {\n\n                    Ext.Array.each(records, function(row) {\n\n                        a.push(\"`\" + row[0] + \"`\");\n                    });\n                    return api.getQuery('SELECT_TABLE', db, table, a.join(', '), '');\n                }\n            };\n\n        app.setLoading(true);\n\n        app.tunneling({\n            db     : db,\n            query  : 'DESCRIBE `' + db + '`.`' + table + '`',\n            success: function(config, response) {\n\n                query = app.alignmentQuery(func[mode](response.records));\n                app.setActiveEditorValue(query);\n\n                app.setLoading(false);\n            }\n        });\n    },\n\n    changeTableToType: function(db, table, engine) {\n\n        var app = this;\n\n        app.setLoading(true);\n\n        this.tunneling({\n            db     : db,\n            query  : this.getAPIS().getQuery('CHANGE_TABLE_TYPE', db, table, engine),\n            success: function(config, response) {\n\n                app.setLoading(false);\n                this.openMessage(this.generateQuerySuccessMsg(config.query, 'Table engine changed to ' + engine));\n            }\n        });\n    },\n\n    createView: function(db) {\n\n        var app = this;\n\n        Ext.Msg.prompt('Create View', 'Please enter new view name:', function(btn, name) {\n\n            if (btn == 'ok') {\n\n                app.openQueryTab();\n\n                var sql = app.getAPIS().getQuery('CREATE_VIEW', db, name);\n                app.setActiveEditorValue(sql);\n            }\n        }, this);\n    },\n\n    alterView: function(db, view) {\n\n        var app = this;\n\n        app.setLoading(true);\n\n        this.tunneling({\n            db     : db,\n            query  : this.getAPIS().getQuery('SHOW_CREATE_VIEW', db, view),\n            success: function(config, response) {\n\n                var query  = app.getAPIS().getQuery('ALTER_VIEW', db, view, response.records[0][1]);\n\n                app.openQueryTab();\n\n                app.setActiveEditorValue(query);\n\n                app.setLoading(false);\n            }\n        });\n    },\n\n    dropView: function(db, view, callback) {\n\n        var app = this;\n        Ext.Msg.confirm('Drop View \\'' + view + '\\'', 'Do you really want to drop the view?', function(btn, text) {\n\n            if (btn == 'yes') {\n\n                app.setLoading(true);\n\n                this.tunneling({\n                    db     : db,\n                    query  : this.getAPIS().getQuery('DROP_VIEW', db, view, ''),\n                    success: function(config, response) {\n\n                        app.setLoading(false);\n\n                        if (callback) {\n\n                            callback(config, response);\n                        }\n                    }\n                });\n            }\n        }, this);\n    },\n\n    renameView: function(db, view, callback) {\n\n        var app = this;\n\n        Ext.Msg.prompt('Rename View \\'' + view + '\\' in \\'' + db + '\\'', 'Please enter new view name:', function(btn, name) {\n\n            if (btn == 'ok') {\n\n                app.setLoading(true);\n\n                var messages = [];\n                app.tunneling({\n                    db     : db,\n                    query  : app.getAPIS().getQuery('SHOW_CREATE_VIEW', db, view),\n                    success: function(config, response) {\n\n                        var body       = response.records[0][1],\n                            tunnelings = [{\n                                db     : db,\n                                query  : app.getAPIS().getQuery('DROP_VIEW', db, view, ''),\n                                failure: function(config, response) {\n\n                                    messages.push(app.generateQueryErrorMsg(config.query, response.message));\n                                }\n                            }, {\n                                db     : db,\n                                query  : body.replace('`' + view + '`', '`' + name + '`'),\n                                failure: function(config, response) {\n\n                                    messages.push(app.generateQueryErrorMsg(config.query, response.message));\n                                }\n                            }];\n\n                        app.tunnelings(tunnelings, {\n                            success: function() {\n\n                                app.setLoading(false);\n\n                                if (callback) {\n\n                                    callback();\n                                }\n                            },\n                            failure: function() {\n\n                                app.openMessage(messages);\n\n                                app.setLoading(false);\n                            }\n                        });\n                    }\n                });\n            }\n        });\n    },\n\n    createProcedure: function(db) {\n\n        Ext.Msg.prompt('Create Procedure', 'Please enter new procedure name:', function(btn, name) {\n\n            if (btn == 'ok') {\n\n                this.openQueryTab();\n                var sql = this.getAPIS().getQuery('CREATE_PROCEDURE', db, name);\n                this.setActiveEditorValue(sql);\n            }\n        }, this);\n    },\n\n    alterProcedure: function(db, procedure) {\n\n        var app = this;\n\n        app.setLoading(true);\n\n        this.tunneling({\n            db     : db,\n            query  : this.getAPIS().getQuery('SHOW_CREATE_PROCEDURE', db, procedure),\n            success: function(config, response) {\n\n                if (response.records.length == 0) {\n\n                    app.setLoading(false);\n                    return;\n                }\n\n                if (!response.records[0][2]) {\n\n                    Ext.Msg.alert('error', 'Unable to retrieve information. Please check your permission.');\n                    app.setLoading(false);\n                    return;\n                }\n\n                this.openQueryTab();\n\n                var query  = this.getAPIS().getQuery('ALTER_PROCEDURE', db, procedure, response.records[0][2]);\n                this.setActiveEditorValue(query);\n\n                app.setLoading(false);\n            }\n        });\n    },\n\n    dropProcedure: function(db, procedure, callback) {\n\n        var app = this;\n\n        Ext.Msg.confirm('Drop Procedure \\'' + procedure + '\\'', 'Do you really want to drop the procedure?', function(btn, text) {\n\n            if (btn == 'yes') {\n\n                app.setLoading(true);\n\n                this.tunneling({\n                    db     : db,\n                    query  : this.getAPIS().getQuery('DROP_PROCEDURE', db, procedure, ''),\n                    success: function(config, response) {\n\n                        app.setLoading(false);\n\n                        if (callback) {\n\n                            callback(config, response);\n                        }\n                    }\n                });\n            }\n        }, this);\n    },\n\n    createFunction: function(db) {\n\n        Ext.Msg.prompt('Create Function', 'Please enter new function name:', function(btn, name) {\n\n            if (btn == 'ok') {\n\n                this.openQueryTab();\n\n                var sql = this.getAPIS().getQuery('CREATE_FUNCTION', db, name);\n                this.setActiveEditorValue(sql);\n            }\n        }, this);\n    },\n\n    alterFunction: function(db, func) {\n\n        var app = this;\n\n        app.setLoading(true);\n\n        this.tunneling({\n            db     : db,\n            query  : app.getAPIS().getQuery('SHOW_CREATE_FUNCTION', db, func),\n            success: function(config, response) {\n\n                if (response.records.length == 0) {\n\n                    return;\n                }\n\n                if (!response.records[0][2]) {\n\n                    Ext.Msg.alert('error', 'Unable to retrieve information. Please check your permission.');\n                    return;\n                }\n\n                app.openQueryTab();\n\n                var query  = app.getAPIS().getQuery('ALTER_FUNCTION', db, func, response.records[0][2]);\n                app.setActiveEditorValue(query);\n\n                app.setLoading(false);\n            }\n        });\n    },\n\n    dropFunction: function(db, func, callback) {\n\n        var app = this;\n\n        Ext.Msg.confirm('Drop Function \\'' + func + '\\'', 'Do you really want to drop the function?', function(btn, text) {\n\n            if (btn == 'yes') {\n\n                app.setLoading(true);\n\n                app.tunneling({\n                    db     : db,\n                    query  : app.getAPIS().getQuery('DROP_FUNCTION', db, func, ''),\n                    success: function(config, response) {\n\n                        app.setLoading(false);\n\n                        if (callback) {\n\n                            callback(config, response);\n                        }\n                    }\n                });\n            }\n        });\n    },\n\n    createTrigger: function(db) {\n\n        Ext.Msg.prompt('Create Trigger', 'Please enter new trigger name:', function(btn, name) {\n\n            if (btn == 'ok') {\n\n                this.openQueryTab();\n\n                var sql = this.getAPIS().getQuery('CREATE_TRIGGER', db, name);\n                this.setActiveEditorValue(sql);\n            }\n        }, this);\n    },\n\n    alterTrigger: function(db, trigger) {\n\n        var app = this;\n\n        app.setLoading(true);\n        this.tunneling({\n            db     : db,\n            query  : this.getAPIS().getQuery('SHOW_CREATE_TRIGGER', db, trigger),\n            success: function(config, response) {\n\n                app.openQueryTab();\n\n                var query  = app.getAPIS().getQuery('ALTER_TRIGGER', db, trigger, response.records[0][2]);\n                app.setActiveEditorValue(query);\n\n                app.setLoading(false);\n            }\n        });\n    },\n\n    dropTrigger: function(db, trigger, callback) {\n\n        var app = this;\n\n        Ext.Msg.confirm('Drop Trigger \\'' + trigger + '\\'', 'Do you really want to drop the trigger?', function(btn, text) {\n\n            if (btn == 'yes') {\n\n                app.setLoading(true);\n\n                app.tunneling({\n                    db     : db,\n                    query  : app.getAPIS().getQuery('DROP_TRIGGER', db, trigger, ''),\n                    success: function(config, response) {\n\n                        app.setLoading(false);\n\n                        if (callback) {\n\n                            callback(config, response);\n                        }\n                    }\n                });\n            }\n        }, this);\n    },\n\n    renameTrigger: function(db, trigger, callback) {\n\n        var app = this;\n\n        Ext.Msg.prompt('Rename Trigger \\'' + trigger + '\\' in \\'' + db + '\\'', 'Please enter new trigger name:', function(btn, name) {\n\n            if (btn == 'ok') {\n\n                app.setLoading(true);\n\n                var messages = [];\n                app.tunneling({\n                    db     : db,\n                    query  : app.getAPIS().getQuery('SHOW_CREATE_TRIGGER', db, trigger),\n                    success: function(config, response) {\n\n                        var body       = response.records[0][2],\n                            tunnelings = [{\n                                db     : db,\n                                query  : app.getAPIS().getQuery('DROP_TRIGGER', db, trigger, ''),\n                                failure: function(config, response) {\n\n                                    messages.push(app.generateQueryErrorMsg(config.query, response.message));\n                                }\n                            }, {\n                                db     : db,\n                                query  : body.replace('`' + trigger + '`', '`' + name + '`'),\n                                failure: function(config, response) {\n\n                                    messages.push(app.generateQueryErrorMsg(config.query, response.message));\n                                }\n                            }];\n\n                        app.tunnelings(tunnelings, {\n                            success: function() {\n\n                                app.setLoading(false);\n\n                                if (callback) {\n\n                                    callback();\n                                }\n                            },\n                            failure: function() {\n\n                                app.setLoading(false);\n                                app.openMessage(messages);\n                            }\n                        });\n                    }\n                });\n            }\n        });\n    },\n\n    createEvent: function(db) {\n\n        Ext.Msg.prompt('Create Event', 'Please enter new event name:', function(btn, name) {\n\n            if (btn == 'ok') {\n\n                this.openQueryTab();\n\n                var query = this.getAPIS().getQuery('CREATE_EVENT', db, name);\n                this.setActiveEditorValue(query);\n            }\n        }, this);\n    },\n\n    alterEvent: function(db, event) {\n\n        this.tunneling({\n            db     : db,\n            query  : this.getAPIS().getQuery('SHOW_CREATE_EVENT', db, event),\n            success: function(config, response) {\n\n                this.openQueryTab();\n\n                var query  = this.getAPIS().getQuery('ALTER_EVENT', db, event, response.records[0][3]);\n                this.setActiveEditorValue(query);\n            }\n        });\n    },\n\n    dropEvent: function(db, event, callback) {\n\n        var app = this;\n\n        Ext.Msg.confirm('Drop Event \\'' + event + '\\'', 'Do you really want to drop the event?', function(btn, text) {\n\n            if (btn == 'yes') {\n\n                app.setLoading(true);\n\n                app.tunneling({\n                    db     : db,\n                    query  : app.getAPIS().getQuery('DROP_EVENT', db, event, ''),\n                    success: function(config, response) {\n\n                        app.setLoading(false);\n\n                        if (callback) {\n\n                            callback(config, response);\n                        }\n                    }\n                });\n            }\n        });\n    },\n\n    renameEvent: function(db, event, callback) {\n\n        var app = this;\n\n        Ext.Msg.prompt('Rename Event \\'' + event + '\\' in \\'' + db + '\\'', 'Please enter new event name:', function(btn, name) {\n\n            if (btn == 'ok') {\n\n                app.setLoading(true);\n\n                var messages = [];\n                app.tunneling({\n                    db     : db,\n                    query  : app.getAPIS().getQuery('SHOW_CREATE_EVENT', db, event),\n                    success: function(config, response) {\n\n                        var body       = response.records[0][3],\n                            tunnelings = [{\n                                db     : db,\n                                query  : app.getAPIS().getQuery('DROP_EVENT', db, event, ''),\n                                failure: function(config, response) {\n\n                                    messages.push(app.generateQueryErrorMsg(config.query, response.message));\n                                }\n                            }, {\n                                db     : db,\n                                query  : body.replace('`' + event + '`', '`' + name + '`'),\n                                failure: function(config, response) {\n\n                                    messages.push(app.generateQueryErrorMsg(config.query, response.message));\n                                }\n                            }];\n\n                        app.tunnelings(tunnelings, {\n                            success: function() {\n\n                                app.setLoading(false);\n\n                                if (callback) {\n\n                                    callback();\n                                }\n                            },\n                            failure: function() {\n\n                                app.setLoading(false);\n                                app.openMessage(messages);\n                            }\n                        });\n                    }\n                });\n            }\n        }, this);\n    },\n\n    openConnPanel: function() {\n\n        this.openWindow('connection.Connect');\n    },\n\n    openFindPanel: function() {\n\n        this.openWindow('command.Find');\n    },\n\n    openUserPanel: function() {\n\n        var app = this;\n\n        app.setLoading(true);\n\n        this.tunneling({\n            db     : 'mysql',\n            query  : this.getAPIS().getQuery('SELECT_ALL_USER'),\n            success: function() {\n\n                app.openWindow('user.Grant');\n                app.setLoading(false);\n            }\n        });\n    },\n\n    openTokenPanel: function(tokens) {\n\n        this.openWindow('query.Token', tokens);\n    },\n\n    openProcessPanel: function() {\n\n        this.openWindow('command.Process');\n    },\n\n    openFlushPanel: function() {\n\n        this.openWindow('command.Flush');\n    },\n\n    openStatusPanel: function() {\n\n        this.openWindow('command.Status');\n    },\n\n    openFlushPanel: function() {\n\n        this.openWindow('command.Flush');\n    },\n\n    openVariablesPanel: function() {\n\n        this.openWindow('command.Variables');\n    },\n\n    openQuickPanel: function() {\n\n        this.openWindow('command.Quick');\n    },\n\n    openAlterTableWindow: function(db, table, openTab) {\n\n        this.openWindow('table.EditSchemaWindow', db, table, openTab);\n    },\n\n    openCreateTableWindow: function(db) {\n\n        this.openWindow('table.EditSchemaWindow', db);\n    },\n\n    openAlterIndexWindow: function(db, table, index) {\n\n        this.openWindow('table.EditIndexWindow', db, table, index);\n    },\n\n    openCreateIndexWindow: function(db, table) {\n\n        this.openWindow('table.EditIndexWindow', db, table);\n    },\n\n    openCreateDatabaseWindow: function(db) {\n\n        this.openWindow('database.CreateDatabase', db);\n    },\n\n    openCopyDatabaseWindow: function(type, name) {\n\n        this.openWindow('database.CopyDatabaseWindow', type, name);\n    },\n\n    openSchemaToHTMLWindow: function() {\n\n        this.openWindow('database.SchemaToHTML');\n    },\n\n    openSchemaToCSVWindow: function() {\n\n        this.openWindow('database.DownloadToCSV');\n    },\n\n    openReorderColumns: function(db, table) {\n\n        var app = this;\n        app.setLoading(true);\n        this.tunneling({\n            db     : db,\n            query  : this.getAPIS().getQuery('SHOW_FULL_FIELDS', db, table),\n            success: function(config, response) {\n\n                app.setLoading(false);\n                this.openWindow('table.ReorderColumns', db, table, response);\n            }\n        });\n    },\n\n    openAdvancedProperties: function(db, table) {\n\n        var app = this;\n\n        app.setLoading(true);\n        this.tunneling({\n            db     : db,\n            query  : this.getAPIS().getQuery('SHOW_ADVANCED_PROPERTIES', db, table),\n            success: function(config, response) {\n\n                app.setLoading(false);\n                this.openWindow('table.AdvancedProperties', db, table, response);\n            }\n        });\n    },\n\n    openQueryTab: function() {\n\n        this.initQueryTab('Query');\n    },\n\n    initQueryTab: function(name, closable) {\n\n        this.getQueryTabPanel().fireEvent('initQueryTab', name, closable);\n    },\n\n    createDatabase: function() {\n\n        this.openCreateDatabaseWindow();\n    },\n\n    alterDatabase: function(db) {\n\n        this.openCreateDatabaseWindow(db);\n    },\n\n    dropDatabase: function(db, callback) {\n\n        var app = this;\n        Ext.Msg.confirm('Drop Database \\'' + db + '\\'', 'Do you really want to drop the database?\\n\\nWarning: You will lose all data!', function(btn, text) {\n\n            if (btn == 'yes') {\n\n                app.setLoading(true);\n\n                this.tunneling({\n                    db     : db,\n                    query  : this.getAPIS().getQuery('DROP_DATABASE', db),\n                    success: function(config, response) {\n\n                        var tree = this.getSelectedTree(),\n                            root = tree.getRootNode();\n                        app.reloadTree(root);\n\n                        app.fireEvent('after_drop_database');\n\n                        app.setLoading(false);\n\n                        if (callback) {\n\n                            callback(config, response);\n                        }\n                    }\n                });\n            }\n        }, this);\n    },\n\n    truncateDatabase: function(db, callback) {\n\n        var app = this;\n        Ext.Msg.confirm('Truncate Database \\'' + db + '\\'', 'Do you really want to truncate the database?\\n\\nWarning: You will lose all data!', function(btn, text) {\n\n            if (btn == 'yes') {\n\n                var tunnelings = [], messages = [];\n\n                app.setLoading(true);\n\n                app.tunneling({\n                    db     : db,\n                    query  : app.getAPIS().getQuery('SHOW_DATABASE_TABLES', db),\n                    success: function(config, response) {\n\n                        Ext.Array.each(response.records, function(row, idx) {\n\n                            var table = row[0];\n                            tunnelings.push({\n                                db     : db,\n                                query  : app.getAPIS().getQuery('DROP_TABLE', db, table, ''),\n                                failure: function(config, response) {\n\n                                    messages.push(app.generateQueryErrorMsg(config.query, response.message));\n                                }\n                            });\n                        });\n\n                        app.tunnelings(tunnelings, {\n                            success: function() {\n\n                                app.setLoading(false);\n\n                                if (callback) {\n\n                                    callback();\n                                }\n                            },\n                            failure: function() {\n\n                                app.setLoading(false);\n                                app.openMessage(messages);\n                            }\n                        });\n                    }\n                });\n            }\n        }, this);\n    },\n\n    emptyDatabase: function(db, callback) {\n\n        var app = this;\n\n        Ext.Msg.confirm('Empty Database \\'' + db + '\\'', 'Do you really want to empty the database?\\n\\nWarning: You will lose all data!', function(btn, text) {\n\n            if (btn == 'yes') {\n\n                app.setLoading(true);\n\n                this.tunneling({\n                    db     : db,\n                    query  : 'EMPTY DATABASE `' + db + '`',\n                    success: function(config, response) {\n\n                        app.setLoading(false);\n\n                        if (callback) {\n\n                            callback(config, response);\n                        }\n                    }\n                });\n            }\n        }, this);\n    },\n\n    renameTable: function(db, table, callback) {\n\n        var app = this;\n        Ext.Msg.prompt('Rename Table \\'' + table + '\\' in \\'' + db + '\\'', 'Please enter new table name:', function(btn, text) {\n\n            if (btn == 'ok') {\n\n                app.setLoading(true);\n\n                this.tunneling({\n                    db     : db,\n                    query  : this.getAPIS().getQuery('RENAME_TABLE', db, table, db, text),\n                    success: function(config, response) {\n\n                        app.fireEvent('after_rename_table');\n                        app.reloadTablesNode(db);\n\n                        app.setLoading(false);\n\n                        if (callback) {\n\n                            callback(config, response, text);\n                        }\n                    }\n                });\n            }\n        }, this, false, table);\n    },\n\n    truncateTable: function(db, table, callback) {\n\n        var app = this;\n        Ext.Msg.confirm('Truncate Table \\'' + table + '\\' in \\'' + db + '\\'', 'Do you really want to truncate the table?\\n\\nWarning: You will lose all data!', function(btn, text) {\n\n            if (btn == 'yes') {\n\n                app.setLoading(true);\n\n                this.tunneling({\n                    db     : db,\n                    query  : this.getAPIS().getQuery('TRUNCATE_TABLE', db, table),\n                    success: function(config, response) {\n\n                        app.setLoading(false);\n\n                        if (callback) {\n\n                            callback(config, response);\n                        }\n                    }\n                });\n            }\n        }, this);\n    },\n\n    dropTable: function(db, table, callback) {\n\n        var app = this;\n        Ext.Msg.confirm('Drop Table \\'' + table + '\\' in \\'' + db + '\\'', 'Do you really want to drop the table?\\n\\nWarning: You will lose all data!', function(btn, text) {\n\n            if (btn == 'yes') {\n\n                app.setLoading(true);\n\n                this.tunneling({\n                    db     : db,\n                    query  : 'DROP TABLE `' + db + '`.`' + table + '`',\n                    success: function(config, response) {\n\n                        app.fireEvent('after_drop_table');\n                        app.openMessage(app.generateSuccessMsg(config.query, table + ' table was been removed successfully.'));\n                        app.reloadTablesNode(db);\n\n                        app.setLoading(false);\n\n                        if (callback) {\n\n                            callback(config, response);\n                        }\n                    }\n                });\n            }\n        }, this)\n    },\n\n    duplicateTable: function(db, table, callback) {\n\n        var app = this;\n\n        Ext.Msg.prompt('Duplicate Table \\'' + table + '\\' in \\'' + db + '\\'', 'Please enter new table name:', function(btn, name) {\n\n            if (btn == 'ok') {\n\n                app.setLoading(true);\n\n                var messages   = [],\n                    tunnelings = [{\n                        db     : db,\n                        query  : app.getAPIS().getQuery('COPY_TABLE_STRUCTURE', db, table, db, name),\n                        failure: function(idx, query, config, response) {\n\n                            messages.push(app.generateQueryErrorMsg(query, response.message));\n                        }\n                    }, {\n                        db     : db,\n                        query  : app.getAPIS().getQuery('COPY_TABLE_DATA', db, table, db, name),\n                        failure: function(idx, query, config, response) {\n\n                            messages.push(app.generateQueryErrorMsg(query, response.message));\n                        }\n                    }];\n\n                app.tunnelings(tunnelings, {\n                    success: function() {\n\n                        app.setLoading(false);\n\n                        app.fireEvent('after_duplicate_table');\n\n                        if (callback) {\n\n                            callback();\n                        }\n                    },\n                    failure: function() {\n\n                        app.setLoading(false);\n                        app.openMessage(messages);\n                    }\n                });\n            }\n        });\n    },\n\n    setActiveEditorValue: function(v) {\n\n        var editor = this.getActiveEditor();\n        t = editor.getValue();\n        editor.setValue(t ? t + \"\\n\" + v : v);\n    },\n\n\n    parseQuery: function(query) {\n\n        var parser  = Ext.create('Planche.lib.QueryParser', this.getAPIS()),\n            queries = parser.parse(query);\n\n        return queries;\n    },\n\n    alignmentQuery: function(query) {\n\n        if (typeof query == 'string') {\n\n            var queries = this.parseQuery(query);\n\n            if (queries.length == 0) {\n\n                return query;\n            }\n\n            var tmp = [];\n            Ext.Array.each(queries, function(query, idx) {\n\n                tmp.push(Planche.lib.QueryAlignment.alignment(query));\n            });\n\n            tmp = tmp.join('\\n');\n\n            return tmp;\n        }\n\n        return Planche.lib.QueryAlignment.alignment(query);\n    },\n\n    formatQuery: function(query) {\n\n        if (query) {\n\n            var queries = query;\n        }\n        else {\n\n            var editor = this.getActiveEditor();\n\n            if (!editor) { return; }\n\n            if (editor.somethingSelected()) {\n\n                var queries = editor.getSelection();\n            }\n            else {\n\n                var queries = editor.getValue();\n            }\n        }\n\n        var parser = Ext.create('Planche.lib.QueryParser', this.getAPIS());\n        queries = parser.parse(queries);\n\n        if (queries.length == 0) {\n\n            return;\n        }\n\n        var tmp = [];\n        Ext.Array.each(queries, function(query, idx) {\n\n            tmp.push(Planche.lib.QueryAlignment.alignment(query));\n        });\n\n        tmp = tmp.join('\\n\\n');\n\n        if (query) {\n\n            return tmp;\n        }\n        else {\n\n            if (editor.somethingSelected()) {\n\n                editor.replaceSelection(tmp);\n            }\n            else {\n\n                editor.setValue(tmp);\n            }\n        }\n    },\n\n    /**\n     * executeQuery\n     *\n     * 선택된 쿼리를 재귀적으로 실행한다.\n     *\n     * @access public\n     *\n     * @return\n     */\n    executeQuery: function() {\n\n        var app     = this,\n            queries = app.getParsedQuery();\n\n        if (queries.length == 0) {\n\n            app.openMessage(app.generateError(\n                'Query was empty',\n                'No query(s) were executed. Please enter a query in the SQL editor or place the cursor inside a query.'\n            ));\n\n            return;\n        }\n\n        this.removeResultTabPanel();\n\n        var panel = app.getActiveMessageTab(),\n            dom   = Ext.get(panel.getEl().query(\"div[id$=innerCt]\")),\n            db    = app.getSelectedDatabase();\n\n        dom.setHTML('');\n\n        var tunneling;\n        var messages = [];\n\n        app.setLoading(true);\n\n        (tunneling = Ext.Function.bind(function() {\n\n            var query = queries.shift();\n\n            if (query) {\n\n                if (query.isDelimiter() === true) {\n\n                    messages.push(app.generateQuerySuccessMsg(\n                        query.raw,\n                        'Change Delimiter'\n                    ));\n\n                    tunneling();\n                    return;\n                }\n\n                app.tunneling({\n                    db     : db,\n                    query  : query.getSQL(),\n                    success: function(config, response) {\n\n                        if (response.is_result_query === true) {\n\n                            app.initQueryResult({\n                                icon    : 'resources/images/icon_table.png',\n                                closable: true,\n                                title   : 'Result'\n                            }, db, query, response);\n                        }\n                        else {\n\n                            var msg = response.affected_rows + ' row(s) affected<br/><br/>';\n                            msg += 'Execution Time : ' + response.exec_time + '<br/>';\n                            msg += 'Transfer Time  : ' + response.transfer_time + '<br/>';\n                            msg += 'Total Time     : ' + response.total_time;\n                            messages.push(app.generateQuerySuccessMsg(query.getSQL(), msg));\n                        }\n\n                        tunneling();\n                    },\n                    failure: function(config, response) {\n\n                        messages.push(app.generateError(query.getSQL(), response.message));\n\n                        app.setLoading(false);\n\n                        tunneling();\n                    }\n                })\n            }\n            else {\n\n                app.setLoading(false);\n\n                app.afterExecuteQuery(messages);\n                app.reloadTree();\n            }\n\n        }))();\n    },\n\n    afterExecuteQuery: function(messages) {\n\n        if (messages.length == 0) { return; }\n\n        this.openMessage(messages);\n    },\n\n    setLoading: function(loading) {\n\n        var connTab = this.getActiveConnectTab();\n\n        if(connTab){\n\n            connTab.setLoading(loading);\n        }\n\n        var stopBtn = Ext.getCmp('toolbar-stop-operation');\n\n        stopBtn.setDisabled(!loading);\n    },\n\n    stopOperation: function() {\n\n        Ext.data.JsonP.abort();\n        Ext.Ajax.abortAll();\n        this.setLoading(false);\n    },\n\n    /**\n     * Trigger openMessage event with  some messages\n     *\n     * @access public\n     * @method getToolBar\n     */\n    openMessage: function(messages) {\n\n        this.getActiveMessageTab().fireEvent('openMessage', messages);\n    },\n\n    generateQueryErrorMsg: function(query, message) {\n\n        return this.generateError('The Query : ' + query, message);\n    },\n\n    generateQuerySuccessMsg: function(query, message) {\n\n        return this.generateSuccessMsg('The Query : ' + query, message);\n    },\n\n    generateSuccessMsg: function(title, message) {\n\n        message = message || \"\";\n        return '<div class=\"query_success\">' + title + '<span class=\"message\"> ' + message + '</span></div>';\n    },\n\n    generateError: function(title, message) {\n\n        message = message || \"\";\n        return '<div class=\"query_err\">' + title + '<span class=\"message\"> ' + message + '</span></div>';\n    },\n\n    getParsedQuery: function() {\n\n        var queries = [];\n\n        var editor = this.getActiveEditor();\n\n        if (!editor) { return queries; }\n\n        var parser = Ext.create('Planche.lib.QueryParser', this.getAPIS());\n\n        if (editor.somethingSelected()) {\n\n            return parser.parse(editor.getSelection());\n        }\n        else {\n\n            var cursor = editor.getCursor();\n\n            queries = parser.parse(editor.getValue());\n            var tmp = [];\n            Ext.Array.each(queries, function(query, idx) {\n\n                if (tmp.length > 0) return;\n\n                if (cursor.line == query.eline[0] && cursor.ch <= query.eline[1]) {\n\n                    tmp.push(query);\n                }\n                else if (cursor.line < query.eline[0]) {\n\n                    tmp.push(query);\n                }\n            });\n            return tmp;\n        }\n    },\n\n    openTable: function(db, table) {\n\n        var tab     = this.getActiveTableDataTab(),\n            parser  = Ext.create('Planche.lib.QueryParser', this.getAPIS()),\n            queries = parser.parse(this.getAPIS().getQuery('SELECT_TABLE', db, table, \"*\", '')),\n            query   = queries[0];\n\n        this.openMode = 'select';\n\n        this.setLoading(true);\n\n        this.tunneling({\n            db     : db,\n            query  : query.getSQL(),\n            tab    : tab,\n            success: function(config, response) {\n\n                this.initQueryResult({openTable: table}, db, query, response);\n                this.setLoading(false);\n            },\n            failure: function(config, response) {\n\n                this.openMessage(this.generateQueryErrorMsg(config.query, response.message));\n                this.setLoading(false);\n            }\n        });\n    },\n\n    countTable: function(db, table) {\n\n        var tab     = this.getActiveTableDataTab(),\n            parser  = Ext.create('Planche.lib.QueryParser', this.getAPIS()),\n            queries = parser.parse(this.getAPIS().getQuery('SELECT_COUNT', db, table, \"*\", '')),\n            query   = queries[0];\n\n        this.openMode = 'count';\n\n        this.setLoading(true);\n\n        this.tunneling({\n            db     : db,\n            query  : query.getSQL(),\n            tab    : tab,\n            success: function(config, response) {\n\n                this.initQueryResult({openTable: table}, db, query, response);\n                this.setLoading(false);\n            },\n            failure: function(config, response) {\n\n                this.openMessage(this.generateQueryErrorMsg(config.query, response.message));\n                this.setLoading(false);\n            }\n        });\n    },\n\n    makeRecords: function(fields, records) {\n\n        var tmp = [];\n        Ext.Array.each(records, function(row, ridx) {\n\n            if (!row) return;\n\n            var record = {};\n            Ext.Array.each(fields, function(col, cidx) {\n\n                record[col.name] = row[cidx];\n            });\n            tmp.push(record);\n        });\n\n        return tmp;\n    },\n\n    initQueryResult: function(config, db, query, response) {\n\n        this.getActiveResultTabPanel().fireEvent('initQueryResult', config, db, query, response);\n    },\n\n    showMessage: function(msg) {\n\n        Ext.Msg.alert('Message', msg);\n    },\n\n    tokenize: function() {\n\n        var editor = this.getActiveEditor();\n\n        if (!editor) { return; }\n        if (!editor.somethingSelected()) {\n\n            this.showMessage('Query is not selected.');\n            return;\n        }\n\n        var queries = editor.getSelection(),\n            queries = this.parseQuery(queries);\n\n        var tokens = [];\n        Ext.Array.each(queries, function(query, idx) {\n\n            Ext.Array.each(query.getTokens(), function(token, idx) {\n\n                tokens.push(token);\n            });\n        });\n\n        this.openTokenPanel(tokens);\n    },\n\n    loadQuickCommands: function(tab) {\n\n        var app        = this,\n            api        = tab.getAPIS(),\n            tree       = tab.child('schema-tree'),\n            tunnelings = [],\n            messages   = [];\n\n        app.onTask = true;\n\n        app.updateTaskMessage('Start quick command indexing');\n\n        tab.quickCommand.init();\n\n        tab.quickCommand.append({\n            icon  : 'execute-query',\n            name  : 'Run/Execute Query',\n            value : 0,\n            method: app.executeQuery\n        });\n        tab.quickCommand.append({\n            icon  : 'connection',\n            name  : 'New Connection',\n            value : 0,\n            method: app.openConnPanel\n        });\n        tab.quickCommand.append({\n            icon  : 'user',\n            name  : 'User Manager',\n            value : 0,\n            method: app.openUserPanel\n        });\n        tab.quickCommand.append({\n            icon  : 'proc',\n            name  : 'Show process list',\n            value : 0,\n            method: app.openProcessPanel\n        });\n        tab.quickCommand.append({\n            icon  : 'fullscreen',\n            name  : 'Change to fullscreen',\n            value : 0,\n            method: app.changeToFullscreen\n        });\n        tab.quickCommand.append({\n            icon  : 'database',\n            name  : 'Create database',\n            value : 0,\n            method: app.createDatabase\n        });\n        tab.quickCommand.append({\n            icon  : 'vars',\n            name  : 'Show variables',\n            value : 0,\n            method: app.openVariablesPanel\n        });\n        tab.quickCommand.append({\n            icon  : 'status',\n            name  : 'Show status',\n            value : 0,\n            method: app.openStatusPanel\n        });\n        tab.quickCommand.append({\n            icon  : 'flush',\n            name  : 'Flush',\n            value : 0,\n            method: app.openFlushPanel\n        });\n\n        tab.quickCommand.append({\n            icon  : 'stop',\n            name  : 'Stop operation',\n            value : 0,\n            method: app.stopOperation\n        });\n\n        var noIndexing = Planche.config.noIndexing || [];\n\n        app.tunneling({\n            connection: tab,\n            db        : '',\n            query     : api.getQuery('SHOW_DATABASE'),\n            success   : function(config, response) {\n\n                var total  = response.records.length,\n                    jobIdx = 1;\n\n                Ext.Array.each(response.records, function(row) {\n\n                    var db = row[0];\n                    if (noIndexing.indexOf(db) > -1) {\n\n                        jobIdx++;\n                        return;\n                    }\n\n                    tab.quickCommand.append({\n                        icon  : 'table',\n                        name  : 'Create table in ' + db,\n                        value : 0,\n                        method: app.openCreateTableWindow,\n                        params: [db]\n                    });\n\n                    tab.quickCommand.append({\n                        icon  : 'database',\n                        name  : 'Drop ' + db + ' database',\n                        value : 0,\n                        method: app.dropDatabase,\n                        params: [db]\n                    });\n\n                    tab.quickCommand.append({\n                        icon  : 'database',\n                        name  : 'Edit ' + db + ' database',\n                        value : 0,\n                        method: app.alterDatabase,\n                        params: [db]\n                    });\n\n                    tab.quickCommand.append({\n                        icon  : 'database',\n                        name  : 'Truncate ' + db + ' database',\n                        value : 0,\n                        method: app.truncateDatabase,\n                        params: [db]\n                    });\n\n                    tab.quickCommand.append({\n                        icon  : 'database',\n                        name  : 'Empty ' + db + ' database',\n                        value : 0,\n                        method: app.emptyDatabase,\n                        params: [db]\n                    });\n\n                    tunnelings.push({\n                        connection: tab,\n                        db        : db,\n                        query     : api.getQuery('SHOW_ALL_TABLE_STATUS', db),\n                        success   : function(config, response) {\n\n                            Ext.Array.each(response.records, function(row, idx) {\n\n                                var table = row[0];\n\n                                app.updateTaskMessage('Indexing `' + db + '`.`' + table + '`');\n\n                                tab.quickCommand.append({\n                                    icon  : 'table',\n                                    name  : 'Open ' + table + ' in ' + db,\n                                    value : 0,\n                                    method: app.openTable,\n                                    params: [db, table]\n                                });\n                                tab.quickCommand.append({\n                                    icon  : 'table',\n                                    name  : 'Count ' + table + ' in ' + db,\n                                    value : 0,\n                                    method: app.countTable,\n                                    params: [db, table]\n                                });\n                                tab.quickCommand.append({\n                                    icon  : 'sql',\n                                    name  : 'Paste SQL: Select ' + table + ' in ' + db,\n                                    value : 0,\n                                    method: app.pasteSQLStatement,\n                                    params: [db, table, 'select']\n                                });\n                                tab.quickCommand.append({\n                                    icon  : 'sql',\n                                    name  : 'Paste SQL: Update ' + table + ' in ' + db,\n                                    value : 0,\n                                    method: app.pasteSQLStatement,\n                                    params: [db, table, 'update']\n                                });\n                                tab.quickCommand.append({\n                                    icon  : 'sql',\n                                    name  : 'Paste SQL: Delete ' + table + ' in ' + db,\n                                    value : 0,\n                                    method: app.pasteSQLStatement,\n                                    params: [db, table, 'delete']\n                                });\n                                tab.quickCommand.append({\n                                    icon  : 'sql',\n                                    name  : 'Paste SQL: Insert ' + table + ' in ' + db,\n                                    value : 0,\n                                    method: app.pasteSQLStatement,\n                                    params: [db, table, 'insert']\n                                });\n                                tab.quickCommand.append({\n                                    icon  : 'table',\n                                    name  : 'Edit ' + table + ' table in ' + db,\n                                    value : 0,\n                                    method: app.openAlterTableWindow,\n                                    params: [db, table]\n                                });\n                                tab.quickCommand.append({\n                                    icon  : 'table',\n                                    name  : 'Rename ' + table + ' table in ' + db,\n                                    value : 0,\n                                    method: app.renameTable,\n                                    params: [db, table]\n                                });\n                                tab.quickCommand.append({\n                                    icon  : 'table',\n                                    name  : 'Truncate ' + table + ' table in ' + db,\n                                    value : 0,\n                                    method: app.truncateTable,\n                                    params: [db, table]\n                                });\n                                tab.quickCommand.append({\n                                    icon  : 'table',\n                                    name  : 'Drop ' + table + ' table in ' + db,\n                                    value : 0,\n                                    method: app.dropTable,\n                                    params: [db, table]\n                                });\n                                tab.quickCommand.append({\n                                    icon  : 'table',\n                                    name  : 'Reorder ' + table + ' table column(s) in ' + db,\n                                    value : 0,\n                                    method: app.openReorderColumns,\n                                    params: [db, table]\n                                });\n                                tab.quickCommand.append({\n                                    icon  : 'table',\n                                    name  : 'View ' + table + ' table advanced properties in ' + db,\n                                    value : 0,\n                                    method: app.openAdvancedProperties,\n                                    params: [db, table]\n                                });\n                            });\n\n                            app.updateTaskProgressBar(jobIdx / total);\n                            jobIdx++;\n                        },\n                        failure   : function(config, response) {\n\n                            messages.push(app.generateQueryErrorMsg(query, response.message));\n                        }\n                    });\n                });\n\n                if (response.records.length == 0) {\n\n                    app.onTask = false;\n                    return;\n                }\n\n                app.tunnelings(tunnelings, {\n                    success: function() {\n\n                        app.updateTaskMessage('Indexing completed');\n                        app.onTask = false;\n                    },\n                    failure: function() {\n\n                        app.updateTaskMessage('Indexing Error');\n                        app.openMessage(messages);\n                        app.onTask = false;\n                    }\n                });\n            },\n            failure   : function(config, response) {\n\n                app.updateTaskMessage(response.message);\n                app.onTask = false;\n            }\n        });\n    },\n\n    changeToFullscreen: function() {\n\n        // mozilla proposal\n        var elem = Ext.getBody().el.dom;\n\n        if (elem.requestFullscreen) {\n\n            elem.requestFullscreen();\n\n        } else if (elem.mozRequestFullScreen) {\n\n            elem.mozRequestFullScreen();\n\n        } else if (elem.webkitRequestFullscreen) {\n\n            elem.webkitRequestFullscreen();\n        }\n        else {\n\n            Ext.Msg.alert('info', 'This browser is not support fullscreen mode');\n        }\n    },\n\n    detectCRUDEvent: function() {\n\n        var app     = this,\n            runTask = function() {\n\n                var tab = app.getActiveConnectTab();\n                app.addTask(app.loadQuickCommands, [tab]);\n            };\n\n        app.on('after_create_table', runTask);\n        app.on('after_alter_table', runTask);\n        app.on('after_rename_table', runTask);\n        app.on('after_drop_table', runTask);\n        app.on('after_create_database', runTask);\n        app.on('after_alter_database', runTask);\n        app.on('after_rename_database', runTask);\n        app.on('after_drop_database', runTask);\n    }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/App.js\n// module id = 99\n// module chunks = 0"],"sourceRoot":""}